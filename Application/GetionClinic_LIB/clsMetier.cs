using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.ComponentModel;
using System.IO;
namespace GestionClinic_LIB
{
    public class clsMetier
    {
        //***Les variables globales***
        private static string _ConnectionString, _host, _db, _user, _pwd,_version;
        private static clsMetier Fact;
        private SqlConnection conn;
        public static string strChaineConnection = null;
        public static int id_du_paiement = 0,id_Sortie_art = 0, id_Sortie_art_ext = 0;

        public static List<string> lstDesignationAutreDetails = new List<string>();
        public static List<int> lstQuantiteAutreDetails = new List<int>();
        public static List<double> lstPrixAutreDetails = new List<double>();
        public static DateTime? dateMAJSortie = DateTime.Today;
        public static DateTime? dateMAJAppro = DateTime.Today;
        public static string bdEnCours = "";


        #region prerecquis
        public static clsMetier GetInstance()
        {
            if (Fact == null)
                Fact = new clsMetier();
            return Fact;
        }
        private object getParameter(IDbCommand cmd, string name, DbType type, int size, object value)
        {
            IDbDataParameter param = cmd.CreateParameter();
            param.Size = size;
            param.DbType = type;
            param.ParameterName = name;
            param.Value = value;
            return param;
        }
        public void Initialize(string ConnectionString)
        {
            _ConnectionString = ConnectionString;
            conn = new SqlConnection(ConnectionString);
        }
        public void Initialize(clsConnexion con)
        {
            _host = con.Serveur;// host;
            _db = con.DB; ;
            _user = con.User;
            _pwd = con.Pwd;
            _version = con.Version;
            if(!_version.Equals("complete")) _host = _host + @"\SQLEXPRESS";
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            conn = new SqlConnection(sch);
        }
        public void Initialize(clsConnexion con, int type)//Express et Complete
        {
            _host = con.Serveur;// host;
            _db = con.DB; ;
            _user = con.User;
            _pwd = con.Pwd;
            _version = con.Version;
            if (!_version.Equals("complete")) _host = _host + @"\SQLEXPRESS";
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            switch (type)
            {
                //sql server 2005
                case 1: sch = string.Format("Data Source={0};Persist Security Info=True; Initial Catalog={1};User ID={2}; Password={3}", _host, _db, _user, _pwd); break;
                //sql server 2008 Data Source=WIN7-PC\SQLEXPRESS;Initial Catalog=bihito;Persist Security Info=True;User ID=sa;Password=sa
                case 2: sch = string.Format("Data Source={0};Persist Security Info=True; Initial Catalog={1};User ID={2}; Password={3}", _host, _db, _user, _pwd); break;
                case 3: break;
            }
            conn = new SqlConnection(sch);
            strChaineConnection = sch;
        }
        public void Initialize(string host, string db, string user, string pwd,string version)
        {
            _host = host;
            _db = db;
            _user = user;
            _pwd = pwd;
            _version = version;
            if (!_version.Equals("complete")) _host = _host + @"\SQLEXPRESS";
            string sch = string.Format("server={0}; database={1}; user={2}; pwd={3}", _host, _db, _user, _pwd);
            conn = new SqlConnection(sch);
        }
        public void setDB(string db)
        {
            _db = db;
        }
        public bool isConnect()
        {
            bool bl = true;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                conn.Close();
            }
            catch (Exception exc)
            {
                bl = false;
                conn.Close();
                throw new Exception(exc.Message);
            }
            return bl;
        }
        public bool isConnect(clsConnexion con)
        {
            bool bl = true;
            _host = con.Serveur;// host;
            _db = con.DB;
            _user = con.User;
            _pwd = con.Pwd;
            _version = con.Version;
            if (!_version.Equals("complete")) _host = _host + @"\SQLEXPRESS";
            string sch = string.Format("server={0}; database=Master; user={1}; pwd={2}", con.Serveur, con.User, con.Pwd);
            conn = new SqlConnection(sch);
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                conn.Close();
            }
            catch (Exception exc)
            {
                sch = string.Format("server={0}; database={1};id user={2}; pwd={3}", _host, _db, _user, _pwd);
                bl = false;
                conn.Close();
                throw new Exception(exc.Message);
            }
            return bl;
        }
        public List<string> getAllDB()
        {
            List<string> lst = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT name FROM sysdatabases where name!='master' order by name");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                            lst.Add(dr["name"].ToString());
                    }
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lst;
        }
        public string getCurrentDataBase()
        {
            string bd = "";
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    //Sélection de la base des données en cours
                    cmd.CommandText = string.Format("SELECT DB_NAME() AS bd_encours");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            bd = dr["bd_encours"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return bd;
        }

        #region OPERATION SUR LA SAUVEGARDE LOCALE DE LA BD
        /// <summary>
        /// Permet d'éffectuer une sauvegarde locale de la Base des données en passant en paramètre le chemin
        /// d'accès ou l'emplacement du fichier de sauvegarde
        /// </summary>
        /// <param name="cheminAcces">String chemin d'acces Bd</param>
        /// <param name="lecteur">string</param>
        /// <returns>string</returns>
        public string BackupLocalDataBase(string cheminAcces, string lecteur)
        {
            string requete = "";
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (string.IsNullOrEmpty(cheminAcces))
                    {
                        throw new Exception("Le chemin d'accès pour la sauvegarde de la base des données est invalide !!");
                    }
                    else
                    {
                        lecteur = null;
                        requete = "USE master " +
                                  "BACKUP DATABASE " + conn.Database + " " +
                                  "TO DISK = N'" + cheminAcces + "' WITH NOFORMAT," +
                                  "NOINIT,NAME = N'" + conn.Database + "_Complete_BackUpBase'";
                        cmd.CommandText = requete;
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return cheminAcces;
        }
        #endregion

        #region OPERATION SUR LA RESTAURATION DE LA BD
        /// <summary>
        /// Permet d'éffetctuer la restauration de la base des données à partir d'un fichier archive et prend respectivement
        /// comme paramètre le chemin d'accès du fichier de restauration, la lettre du lecteur de restauration ainsi que le numéro
        /// de version de PostGreSQL utilisé sur le serveur
        /// </summary>
        /// <param name="cheminAcces">string</param>
        /// <param name="lecteur">string</param>
        /// <returns>string</returns>
        public string RestoreDataBase(string cheminAcces, string lecteur)
        {
            string requete = "";
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (string.IsNullOrEmpty(cheminAcces))
                    {
                        throw new Exception("Le chemin d'accès pour la restauration de de la base des données est invalide !!");
                    }
                    else
                    {
                        lecteur = null;
                        requete = "USE master " +
                                  "SELECT 'kill',spid FROM sysprocesses " +
                                  "WHERE dbid=db_id('" + conn.Database + "') " +
                            //"GO " +
                                  "RESTORE DATABASE " + conn.Database + " " +
                                  "FROM DISK = N'" + cheminAcces + "'";
                        cmd.CommandText = requete;
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return cheminAcces;
        }
        #endregion

        public void closeConnexion()
        {
            try
            {
                if (conn.State.ToString().Equals("Open")) conn.Close();
            }
            catch (Exception) { }
        }

        #endregion prerecquis
        #region  CLSPERSONNE
        public clspersonne getClspersonne(object intid)
        {
            clspersonne varclspersonne = new clspersonne();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *,ISNULL((year(GETDATE())-year(personne.datenaissance)),0) AS age_pers FROM personne WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.IdPers = int.Parse(dr["id"].ToString());
                            varclspersonne.AgePers = int.Parse(dr["age_pers"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclspersonne.Telephone = dr["telephone"].ToString();
                            varclspersonne.Adresse = dr["adresse"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspersonne;
        }

        public List<clspersonne> getAllClspersonne(string criteria)
        {
            List<clspersonne> lstclspersonne = new List<clspersonne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *,(year(GETDATE())-year(personne.datenaissance)) AS age_pers FROM personne  WHERE 1=1";
                    sql += "  OR   nom LIKE '%" + criteria + "%'";
                    sql += "  OR   postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspersonne varclspersonne = null;
                        while (dr.Read())
                        {
                            varclspersonne = new clspersonne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.IdPers = int.Parse(dr["id"].ToString());
                            if (!dr["age_pers"].ToString().Trim().Equals("")) varclspersonne.AgePers = int.Parse(dr["age_pers"].ToString());
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclspersonne.Telephone = dr["telephone"].ToString();
                            varclspersonne.Adresse = dr["adresse"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"];
                            lstclspersonne.Add(varclspersonne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public List<clspersonne> getAllClspersonne()
        {
            List<clspersonne> lstclspersonne = new List<clspersonne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *,(year(GETDATE())-year(personne.datenaissance)) AS age_pers FROM personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspersonne varclspersonne = null;
                        while (dr.Read())
                        {
                            varclspersonne = new clspersonne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspersonne.IdPers = int.Parse(dr["id"].ToString());
                            
                            varclspersonne.Nom = dr["nom"].ToString();
                            varclspersonne.Postnom = dr["postnom"].ToString();
                            varclspersonne.Prenom = dr["prenom"].ToString();
                            varclspersonne.Sexe = dr["sexe"].ToString();
                            varclspersonne.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclspersonne.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            if (!dr["age_pers"].ToString().Trim().Equals("")) varclspersonne.AgePers = int.Parse(dr["age_pers"].ToString());
                            //else varclspersonne.AgePers = 0;
                            varclspersonne.Telephone = dr["telephone"].ToString();
                            varclspersonne.Adresse = dr["adresse"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclspersonne.Photo = (Byte[])dr["photo"]; 
                            lstclspersonne.Add(varclspersonne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public DataTable getAllClspersonne1()
        {
            DataTable lstclspersonne = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *,(year(GETDATE())-year(personne.datenaissance)) AS age_pers  FROM personne ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclspersonne.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public DataTable getAllClspersonneDt()
        {
            DataTable lstclspersonne = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') AS nom,ISNULL(personne.postnom,'') AS postnom,ISNULL(personne.prenom,'') AS prenom,ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo FROM personne
                    ORDER BY nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclspersonne.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public DataTable getAllClspersonneDt(int id_personne)
        {
            DataTable lstclspersonne = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') AS nom,ISNULL(personne.postnom,'') AS postnom,ISNULL(personne.prenom,'') AS prenom,ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,
                    personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo FROM personne WHERE id=" + id_personne);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclspersonne.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public DataTable getAllClspersonneFournisseurDt()
        {
            DataTable lstclspersonne = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT fournisseur.id AS idFour,fournisseur.numero,ISNULL(personne.nom,'') AS nom,ISNULL(personne.postnom,'') AS postnom,ISNULL(personne.prenom,'') AS prenom,ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo FROM personne
                    RIGHT OUTER JOIN fournisseur ON personne.id=fournisseur.id_personne ORDER BY nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclspersonne.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspersonne;
        }

        public int insertClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO personne ( nom,postnom,prenom,sexe,etatcivil,datenaissance,telephone,adresse,photo ) VALUES (@nom,@postnom,@prenom,@sexe,@etatcivil,@datenaissance,@telephone,@adresse,@photo  )");
                    if (varclspersonne.Nom != null) cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 30, varclspersonne.Nom));
                    else cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Postnom != null) cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 1000, varclspersonne.Postnom));
                    else cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 1000, DBNull.Value));
                    if (varclspersonne.Prenom != null) cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, varclspersonne.Prenom));
                    else cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Sexe != null) cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, varclspersonne.Sexe));
                    else cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, "M"));
                    if (varclspersonne.Etatcivil != null) cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 15, varclspersonne.Etatcivil));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 15, "Celibataire"));
                    if (varclspersonne.Datenaissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, varclspersonne.Datenaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 100, varclspersonne.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 100, DBNull.Value));
                    if (varclspersonne.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 300, varclspersonne.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 300, DBNull.Value));
                    if (varclspersonne.Photo != null) cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    else cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    i = cmd.ExecuteNonQuery();

                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = string.Format("SELECT @@IDENTITY AS id_inserted FROM personne");
                        IDataReader rd = cmd1.ExecuteReader();
                        if (rd.Read()) clsDoTraitement.Identifiant_Personne = Convert.ToInt32(rd["id_inserted"]);
                        rd.Close();
                        conn.Close();
                    }
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE personne  SET nom=@nom,postnom=@postnom,prenom=@prenom,sexe=@sexe,etatcivil=@etatcivil,datenaissance=@datenaissance,telephone=@telephone,adresse=@adresse,photo=@photo  WHERE 1=1  AND id=@id ");
                    if (varclspersonne.Nom != null) cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 30, varclspersonne.Nom));
                    else cmd.Parameters.Add(getParameter(cmd, "@nom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Postnom != null) cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 40, varclspersonne.Postnom));
                    else cmd.Parameters.Add(getParameter(cmd, "@postnom", DbType.String, 40, DBNull.Value));
                    if (varclspersonne.Prenom != null) cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, varclspersonne.Prenom));
                    else cmd.Parameters.Add(getParameter(cmd, "@prenom", DbType.String, 30, DBNull.Value));
                    if (varclspersonne.Sexe != null) cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, varclspersonne.Sexe));
                    else cmd.Parameters.Add(getParameter(cmd, "@sexe", DbType.String, 1, "M"));
                    if (varclspersonne.Etatcivil != null) cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 15, varclspersonne.Etatcivil));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatcivil", DbType.String, 15, "Celibataire"));
                    if (varclspersonne.Datenaissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, varclspersonne.Datenaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@datenaissance", DbType.DateTime, 8, DBNull.Value));
                    if (varclspersonne.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 100, varclspersonne.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 100, DBNull.Value));
                    if (varclspersonne.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 300, varclspersonne.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 300, DBNull.Value));

                    //Validation photo suivant les cas
                    if (clsDoTraitement.accepte_updatepicture == 1)
                    {
                        //Photo chargé à partir d'un répertoire
                        varclspersonne.Photo = clsDoTraitement.GetInstance().getFileToByte(clsDoTraitement.pathPhotoLoad);
                        cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    }
                    else if (clsDoTraitement.accepte_updatepicture == 2)
                    {
                        //Photo chargé à partir du webcam
                        varclspersonne.Photo = clsDoTraitement.GetInstance().getFileToByte(clsDoTraitement.GetInstance().loadParamTemporaire());
                        cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    }
                    else if (clsDoTraitement.accepte_updatepicture == 3)
                    {
                        //Photo a valider modification sumplement chargé
                        if (varclspersonne.Photo != null) cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                        else cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    }
                    //if (varclspersonne.Photo != null) cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, varclspersonne.Photo));
                    //else cmd.Parameters.Add(getParameter(cmd, "@photo", DbType.Binary, Int32.MaxValue, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspersonne.IdPers));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClspersonne(clspersonne varclspersonne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM personne  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclspersonne.IdPers));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message + " ,vous devez d'abord supprimer toutes les informations liées à cette personne");
            }
            return i;
        }

        #endregion CLSPERSONNE 
        #region  CLSQUALIFICATION
        public clsqualification getClsqualification(object intid)
        {
            clsqualification varclsqualification = new clsqualification();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM qualification WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsqualification.Id = int.Parse(dr["id"].ToString());
                            varclsqualification.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsqualification;
        }

        public List<clsqualification> getAllClsqualification(string criteria)
        {
            List<clsqualification> lstclsqualification = new List<clsqualification>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM qualification  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsqualification varclsqualification = null;
                        while (dr.Read())
                        {

                            varclsqualification = new clsqualification();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsqualification.Id = int.Parse(dr["id"].ToString());
                            varclsqualification.Designation = dr["designation"].ToString();
                            lstclsqualification.Add(varclsqualification);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsqualification;
        }

        public List<clsqualification> getAllClsqualification()
        {
            List<clsqualification> lstclsqualification = new List<clsqualification>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM qualification ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsqualification varclsqualification = null;
                        while (dr.Read())
                        {

                            varclsqualification = new clsqualification();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsqualification.Id = int.Parse(dr["id"].ToString());
                            varclsqualification.Designation = dr["designation"].ToString();
                            lstclsqualification.Add(varclsqualification);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsqualification;
        }

        public int insertClsqualification(clsqualification varclsqualification)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO qualification ( designation ) VALUES (@designation  )");
                    if (varclsqualification.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsqualification.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsqualification(clsqualification varclsqualification)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE qualification  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsqualification.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsqualification.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsqualification.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsqualification(clsqualification varclsqualification)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM qualification  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsqualification.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSQUALIFICATION
        #region  CLSPROFESSION
        public clsprofession getClsprofession(object intid)
        {
            clsprofession varclsprofession = new clsprofession();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM profession WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsprofession.Id = int.Parse(dr["id"].ToString());
                            varclsprofession.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsprofession;
        }

        public List<clsprofession> getAllClsprofession(string criteria)
        {
            List<clsprofession> lstclsprofession = new List<clsprofession>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM profession  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsprofession varclsprofession = null;
                        while (dr.Read())
                        {

                            varclsprofession = new clsprofession();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprofession.Id = int.Parse(dr["id"].ToString());
                            varclsprofession.Designation = dr["designation"].ToString();
                            lstclsprofession.Add(varclsprofession);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprofession;
        }

        public List<clsprofession> getAllClsprofession()
        {
            List<clsprofession> lstclsprofession = new List<clsprofession>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM profession ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprofession varclsprofession = null;
                        while (dr.Read())
                        {
                            varclsprofession = new clsprofession();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprofession.Id = int.Parse(dr["id"].ToString());
                            varclsprofession.Designation = dr["designation"].ToString();
                            lstclsprofession.Add(varclsprofession);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprofession;
        }

        public int insertClsprofession(clsprofession varclsprofession)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO profession ( designation ) VALUES (@designation  )");
                    if (varclsprofession.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsprofession.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsprofession(clsprofession varclsprofession)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE profession  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsprofession.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsprofession.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsprofession.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsprofession(clsprofession varclsprofession)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM profession  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsprofession.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPROFESSION
        #region  CLSCATEGORIEAGENT
        public clscategorieagent getClscategorieagent(object intid)
        {
            clscategorieagent varclscategorieagent = new clscategorieagent();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categorieagent WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorieagent.Id = int.Parse(dr["id"].ToString());
                            varclscategorieagent.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscategorieagent;
        }

        public List<clscategorieagent> getAllClscategorieagent(string criteria)
        {
            List<clscategorieagent> lstclscategorieagent = new List<clscategorieagent>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM categorieagent  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategorieagent varclscategorieagent = null;
                        while (dr.Read())
                        {

                            varclscategorieagent = new clscategorieagent();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorieagent.Id = int.Parse(dr["id"].ToString());
                            varclscategorieagent.Designation = dr["designation"].ToString();
                            lstclscategorieagent.Add(varclscategorieagent);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategorieagent;
        }

        public List<clscategorieagent> getAllClscategorieagent()
        {
            List<clscategorieagent> lstclscategorieagent = new List<clscategorieagent>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categorieagent ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategorieagent varclscategorieagent = null;
                        while (dr.Read())
                        {

                            varclscategorieagent = new clscategorieagent();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategorieagent.Id = int.Parse(dr["id"].ToString());
                            varclscategorieagent.Designation = dr["designation"].ToString();
                            lstclscategorieagent.Add(varclscategorieagent);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategorieagent;
        }

        public int insertClscategorieagent(clscategorieagent varclscategorieagent)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO categorieagent ( designation ) VALUES (@designation  )");
                    if (varclscategorieagent.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscategorieagent.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscategorieagent(clscategorieagent varclscategorieagent)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE categorieagent  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclscategorieagent.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclscategorieagent.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscategorieagent.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscategorieagent(clscategorieagent varclscategorieagent)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM categorieagent  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscategorieagent.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCATEGORIEAGENT 
        #region  CLSAGENT
        public clsagent getClsagent(object intid)
        {
            clsagent varclsagent = new clsagent();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,agent.id AS idAg,agent.id_personne,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.numeroinss,agent.id_fonction,agent.id_qualification,agent.id_service,agent.dateangagement,agent.grade,personne.photo from personne
                    INNER JOIN agent ON personne.id=agent.id_personne  WHERE agent.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Agent
                            if (!dr["idAg"].ToString().Trim().Equals("")) varclsagent.IdAgent = int.Parse(dr["idAg"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsagent.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsagent.Id_service = int.Parse(dr["id_service"].ToString());
                            //if (!dr["id_categorieagent"].ToString().Trim().Equals("")) varclsagent.Id_categorieagent = int.Parse(dr["id_categorieagent"].ToString());
                            //if (!dr["id_fonction"].ToString().Trim().Equals("")) varclsagent.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            //if (!dr["id_qualification"].ToString().Trim().Equals("")) varclsagent.Id_qualification = int.Parse(dr["id_qualification"].ToString());
                            varclsagent.Matricule = dr["matricule"].ToString();
                            varclsagent.Grade = dr["grade"].ToString();
                            if (!dr["dateangagement"].ToString().Trim().Equals("")) varclsagent.Dateangagement = DateTime.Parse(dr["dateangagement"].ToString());
                            varclsagent.Numeroinss = dr["numeroinss"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsagent.IdPers = int.Parse(dr["id"].ToString());
                            varclsagent.Nom = dr["nom"].ToString();
                            varclsagent.Postnom = dr["postnom"].ToString();
                            varclsagent.Prenom = dr["prenom"].ToString();
                            varclsagent.Sexe = dr["sexe"].ToString();
                            varclsagent.Etatcivil = dr["etatcivil"].ToString();
                            varclsagent.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsagent.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsagent.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsagent.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsagent;
        }

        public List<clsagent> getAllClsagent(string criteria)
        {
            List<clsagent> lstclsagent = new List<clsagent>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,agent.id AS idAg,agent.id_personne,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.numeroinss,agent.id_fonction,agent.id_qualification,agent.id_service,agent.grade,agent.dateangagement,personne.photo from personne
                    INNER JOIN agent ON personne.id=agent.id_personne  WHERE 1=1";
                    sql += "  OR   agent.matricule LIKE '%" + criteria + "%'";
                    sql += "  OR   agent.numeroinss LIKE '%" + criteria + "%'";
                    sql += "  OR   agent.grade LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsagent varclsagent = null;
                        while (dr.Read())
                        {
                            varclsagent = new clsagent();
                            //Agent
                            if (!dr["idAg"].ToString().Trim().Equals("")) varclsagent.IdAgent = int.Parse(dr["idAg"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsagent.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categorieagent"].ToString().Trim().Equals("")) varclsagent.Id_categorieagent = int.Parse(dr["id_categorieagent"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclsagent.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            if (!dr["id_qualification"].ToString().Trim().Equals("")) varclsagent.Id_qualification = int.Parse(dr["id_qualification"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsagent.Id_service = int.Parse(dr["id_service"].ToString());
                            varclsagent.Matricule = dr["matricule"].ToString();
                            varclsagent.Grade = dr["grade"].ToString();
                            if (!dr["dateangagement"].ToString().Trim().Equals("")) varclsagent.Dateangagement = DateTime.Parse(dr["dateangagement"].ToString());
                            varclsagent.Numeroinss = dr["numeroinss"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsagent.IdPers = int.Parse(dr["id"].ToString());
                            varclsagent.Nom = dr["nom"].ToString();
                            varclsagent.Postnom = dr["postnom"].ToString();
                            varclsagent.Prenom = dr["prenom"].ToString();
                            varclsagent.Sexe = dr["sexe"].ToString();
                            varclsagent.Etatcivil = dr["etatcivil"].ToString();
                            varclsagent.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsagent.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsagent.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsagent.Photo = (Byte[])dr["photo"];
                            lstclsagent.Add(varclsagent);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsagent;
        }

        public List<clsagent> getAllClsagent()
        {
            List<clsagent> lstclsagent = new List<clsagent>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,agent.id AS idAg,agent.id_personne,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.grade,agent.numeroinss,agent.id_categorieagent,agent.id_fonction,agent.id_qualification,agent.id_service,agent.dateangagement,personne.photo from personne
                    INNER JOIN agent ON personne.id=agent.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsagent varclsagent = null;
                        while (dr.Read())
                        {
                            varclsagent = new clsagent();

                            //Agent
                            if (!dr["idAg"].ToString().Trim().Equals("")) varclsagent.IdAgent = int.Parse(dr["idAg"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsagent.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categorieagent"].ToString().Trim().Equals("")) varclsagent.Id_categorieagent = int.Parse(dr["id_categorieagent"].ToString());
                            if (!dr["id_fonction"].ToString().Trim().Equals("")) varclsagent.Id_fonction = int.Parse(dr["id_fonction"].ToString());
                            if (!dr["id_qualification"].ToString().Trim().Equals("")) varclsagent.Id_qualification = int.Parse(dr["id_qualification"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsagent.Id_service = int.Parse(dr["id_service"].ToString());
                            varclsagent.Matricule = dr["matricule"].ToString();
                            varclsagent.Grade = dr["grade"].ToString();
                            if (!dr["dateangagement"].ToString().Trim().Equals("")) varclsagent.Dateangagement = DateTime.Parse(dr["dateangagement"].ToString());
                            varclsagent.Numeroinss = dr["numeroinss"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsagent.IdPers = int.Parse(dr["id"].ToString());
                            varclsagent.Nom = dr["nom"].ToString();
                            varclsagent.Postnom = dr["postnom"].ToString();
                            varclsagent.Prenom = dr["prenom"].ToString();
                            varclsagent.Sexe = dr["sexe"].ToString();
                            varclsagent.Etatcivil = dr["etatcivil"].ToString();
                            varclsagent.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsagent.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsagent.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsagent.Photo = (Byte[])dr["photo"];
                            lstclsagent.Add(varclsagent);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsagent;
        }

        public DataTable getAllClsagent1()
        {
            DataTable lstclsagent = new DataTable("tbl");
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,agent.id AS idAg,agent.id_personne,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.numeroinss,agent.id_fonction,agent.id_qualification,agent.dateangagement,agent.id_categorieagent,agent.id_service,agent.grade,personne.photo from personne
                    INNER JOIN agent ON personne.id=agent.id_personne ORDER BY personne.nom ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsagent.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsagent;
        }

//        public DataSet getAllClsagent12()
//        {
//            DataSet ds = new DataSet();
//            try
//            {
//                if (conn.State != ConnectionState.Open) conn.Open();
                
//                using (SqlCommand cmd = conn.CreateCommand())
//                {
                    
//                    cmd.CommandText = string.Format(@"SELECT personne.id,agent.id AS idAg,agent.id_personne,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.numeroinss,agent.id_fonction,agent.id_qualification,agent.dateangagement,agent.id_categorieagent,agent.id_service,agent.grade,personne.photo from personne
//                    INNER JOIN agent ON personne.id=agent.id_personne ORDER BY personne.nom ASC");
//                    SqlDataAdapter da = new SqlDataAdapter(cmd);
//                    da.Fill(ds,"tb");
//                }
//                conn.Close();
//            }
//            catch (Exception exc)
//            {
//                conn.Close();
//                throw new Exception(exc.Message);
//            }
//            return ds;
//        }

        public DataTable getAllClsagent1(int id_agent)
        {
            DataTable lstclsagent = new DataTable("tbl");
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,agent.id AS idAg,agent.id_personne,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,agent.matricule,agent.numeroinss,agent.id_fonction,agent.id_qualification,agent.dateangagement,agent.id_categorieagent,agent.id_service,agent.grade,personne.photo from personne
                    INNER JOIN agent ON personne.id=agent.id_personne WHERE agent.id=" + id_agent);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsagent.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsagent;
        }

        public int insertClsagent(clsagent varclsagent)
        {
            int i = 0;
            try
            {
                varclsagent.Id_personne = clsDoTraitement.Identifiant_Personne;

                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? dateeng = DateTime.Today;
                    if (!varclsagent.Dateangagement.HasValue) dateeng = DateTime.Today;
                    else dateeng = varclsagent.Dateangagement;

                    cmd.CommandText = string.Format("INSERT INTO agent ( id_personne,id_categorieagent,id_fonction,id_qualification,id_service,matricule,grade,dateangagement,numeroinss ) VALUES (@id_personne,@id_categorieagent,@id_fonction,@id_qualification,@id_service,@matricule,@grade,@dateangagement,@numeroinss  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 100, varclsagent.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categorieagent", DbType.Int32, 100, varclsagent.Id_categorieagent));
                    cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 100, varclsagent.Id_fonction));
                    cmd.Parameters.Add(getParameter(cmd, "@id_qualification", DbType.Int32, 100, varclsagent.Id_qualification));
                    cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 100, varclsagent.Id_service));
                    if (varclsagent.Matricule != null) cmd.Parameters.Add(getParameter(cmd, "@matricule", DbType.String, 20, varclsagent.Matricule));
                    else cmd.Parameters.Add(getParameter(cmd, "@matricule", DbType.String, 20, DBNull.Value));
                    if (varclsagent.Grade != null) cmd.Parameters.Add(getParameter(cmd, "@grade", DbType.String, 30, varclsagent.Grade));
                    else cmd.Parameters.Add(getParameter(cmd, "@grade", DbType.String, 30, DBNull.Value));
                    if (varclsagent.Dateangagement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateangagement", DbType.DateTime, 8, dateeng));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateangagement", DbType.DateTime, 8, dateeng));
                    if (varclsagent.Numeroinss != null) cmd.Parameters.Add(getParameter(cmd, "@numeroinss", DbType.String, 20, varclsagent.Numeroinss));
                    else cmd.Parameters.Add(getParameter(cmd, "@numeroinss", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();

                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = string.Format("SELECT @@IDENTITY AS id_inserted FROM agent");
                        IDataReader rd = cmd1.ExecuteReader();
                        if (rd.Read()) clsDoTraitement.Identifiant_Agent = Convert.ToInt32(rd["id_inserted"]);
                        rd.Close();
                        conn.Close();
                    }
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsagent(clsagent varclsagent)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? dateeng = DateTime.Today;
                    if (!varclsagent.Dateangagement.HasValue) dateeng = DateTime.Today;
                    else dateeng = varclsagent.Dateangagement;

                    cmd.CommandText = string.Format("UPDATE agent  SET id_personne=@id_personne,id_categorieagent=@id_categorieagent,id_fonction=@id_fonction,id_qualification=@id_qualification,id_service=@id_service,matricule=@matricule,grade=@grade,dateangagement=@dateangagement,numeroinss=@numeroinss  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 100, varclsagent.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categorieagent", DbType.Int32, 4, varclsagent.Id_categorieagent));
                    cmd.Parameters.Add(getParameter(cmd, "@id_fonction", DbType.Int32, 4, varclsagent.Id_fonction));
                    cmd.Parameters.Add(getParameter(cmd, "@id_qualification", DbType.Int32, 4, varclsagent.Id_qualification));
                    cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 100, varclsagent.Id_service));
                    if (varclsagent.Matricule != null) cmd.Parameters.Add(getParameter(cmd, "@matricule", DbType.String, 20, varclsagent.Matricule));
                    else cmd.Parameters.Add(getParameter(cmd, "@matricule", DbType.String, 20, DBNull.Value));
                    if (varclsagent.Grade != null) cmd.Parameters.Add(getParameter(cmd, "@grade", DbType.String, 30, varclsagent.Grade));
                    else cmd.Parameters.Add(getParameter(cmd, "@grade", DbType.String, 30, DBNull.Value));
                    if (varclsagent.Dateangagement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateangagement", DbType.DateTime, 8, dateeng));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateangagement", DbType.DateTime, 8, dateeng));
                    if (varclsagent.Numeroinss != null) cmd.Parameters.Add(getParameter(cmd, "@numeroinss", DbType.String, 20, varclsagent.Numeroinss));
                    else cmd.Parameters.Add(getParameter(cmd, "@numeroinss", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsagent.IdAgent));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsagent(clsagent varclsagent)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM agent  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsagent.IdAgent));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message + " ,vous devez d'abord supprimer toutes les informations liées à cet agent");
            }
            return i;
        }

        #endregion CLSAGENT
        #region  CLSSERVICE
        public clsservice getClsservice(object intid)
        {
            clsservice varclsservice = new clsservice();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM service WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsservice.Id = int.Parse(dr["id"].ToString());
                            varclsservice.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsservice;
        }

        public List<clsservice> getAllClsservice(string criteria)
        {
            List<clsservice> lstclsservice = new List<clsservice>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM service  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsservice varclsservice = null;
                        while (dr.Read())
                        {

                            varclsservice = new clsservice();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsservice.Id = int.Parse(dr["id"].ToString());
                            varclsservice.Designation = dr["designation"].ToString();
                            lstclsservice.Add(varclsservice);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsservice;
        }

        public List<clsservice> getAllClsservice()
        {
            List<clsservice> lstclsservice = new List<clsservice>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM service ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsservice varclsservice = null;
                        while (dr.Read())
                        {

                            varclsservice = new clsservice();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsservice.Id = int.Parse(dr["id"].ToString());
                            varclsservice.Designation = dr["designation"].ToString();
                            lstclsservice.Add(varclsservice);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsservice;
        }

        public int insertClsservice(clsservice varclsservice)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO service ( designation ) VALUES (@designation  )");
                    if (varclsservice.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsservice.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsservice(clsservice varclsservice)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE service  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsservice.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsservice.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsservice.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsservice(clsservice varclsservice)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM service  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsservice.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSSERVICE
        #region  CLSBLOC
        public clsbloc getClsbloc(object intid)
        {
            clsbloc varclsbloc = new clsbloc();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM bloc WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsbloc.Id = int.Parse(dr["id"].ToString());
                            varclsbloc.Designation = dr["designation"].ToString();
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsbloc.Id_service = int.Parse(dr["id_service"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsbloc;
        }

        public List<clsbloc> getAllClsbloc(string criteria)
        {
            List<clsbloc> lstclsbloc = new List<clsbloc>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM bloc  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsbloc varclsbloc = null;
                        while (dr.Read())
                        {

                            varclsbloc = new clsbloc();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsbloc.Id = int.Parse(dr["id"].ToString());
                            varclsbloc.Designation = dr["designation"].ToString();
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsbloc.Id_service = int.Parse(dr["id_service"].ToString());
                            lstclsbloc.Add(varclsbloc);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsbloc;
        }

        public List<clsbloc> getAllClsbloc()
        {
            List<clsbloc> lstclsbloc = new List<clsbloc>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM bloc ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsbloc varclsbloc = null;
                        while (dr.Read())
                        {

                            varclsbloc = new clsbloc();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsbloc.Id = int.Parse(dr["id"].ToString());
                            varclsbloc.Designation = dr["designation"].ToString();
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclsbloc.Id_service = int.Parse(dr["id_service"].ToString());
                            lstclsbloc.Add(varclsbloc);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsbloc;
        }

        public int insertClsbloc(clsbloc varclsbloc)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO bloc ( designation,id_service ) VALUES (@designation,@id_service  )");
                    if (varclsbloc.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsbloc.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsbloc.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclsbloc.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsbloc(clsbloc varclsbloc)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE bloc  SET designation=@designation,id_service=@id_service  WHERE 1=1  AND id=@id ");
                    if (varclsbloc.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsbloc.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsbloc.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclsbloc.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsbloc.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsbloc(clsbloc varclsbloc)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM bloc  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsbloc.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSBLOC
        #region  CLSAIRSANTE
        public clsairsante getClsairsante(object intid)
        {
            clsairsante varclsairsante = new clsairsante();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM airsante WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsairsante.Id = int.Parse(dr["id"].ToString());
                            varclsairsante.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsairsante;
        }

        public List<clsairsante> getAllClsairsante(string criteria)
        {
            List<clsairsante> lstclsairsante = new List<clsairsante>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM airsante  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsairsante varclsairsante = null;
                        while (dr.Read())
                        {

                            varclsairsante = new clsairsante();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsairsante.Id = int.Parse(dr["id"].ToString());
                            varclsairsante.Designation = dr["designation"].ToString();
                            lstclsairsante.Add(varclsairsante);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsairsante;
        }

        public List<clsairsante> getAllClsairsante()
        {
            List<clsairsante> lstclsairsante = new List<clsairsante>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM airsante ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsairsante varclsairsante = null;
                        while (dr.Read())
                        {

                            varclsairsante = new clsairsante();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsairsante.Id = int.Parse(dr["id"].ToString());
                            varclsairsante.Designation = dr["designation"].ToString();
                            lstclsairsante.Add(varclsairsante);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsairsante;
        }

        public int insertClsairsante(clsairsante varclsairsante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO airsante ( designation ) VALUES (@designation  )");
                    if (varclsairsante.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsairsante.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsairsante(clsairsante varclsairsante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE airsante  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsairsante.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsairsante.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsairsante.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsairsante(clsairsante varclsairsante)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM airsante  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsairsante.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSAIRSANTE
        #region  CLSETABLISSEMENTPRISEENCHARGE
        public clsetablissementpriseencharge getClsetablissementpriseencharge(object intid)
        {
            clsetablissementpriseencharge varclsetablissementpriseencharge = new clsetablissementpriseencharge();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT *  FROM etablissementpriseencharge 
                    INNER JOIN malade ON etablissementpriseencharge.id=malade.id_etablissement WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementpriseencharge.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementpriseencharge.Denomination = dr["denomination"].ToString();
                            varclsetablissementpriseencharge.Adresse = dr["adresse"].ToString();
                            varclsetablissementpriseencharge.Telephone = dr["telephone"].ToString();
                            varclsetablissementpriseencharge.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsetablissementpriseencharge;
        }

        public List<clsetablissementpriseencharge> getAllClsetablissementpriseencharge(string criteria)
        {
            List<clsetablissementpriseencharge> lstclsetablissementpriseencharge = new List<clsetablissementpriseencharge>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM etablissementpriseencharge  WHERE 1=1";
                    sql += "  OR   denomination LIKE '%" + criteria + "%'";
                    sql += "  OR   adresse LIKE '%" + criteria + "%'";
                    sql += "  OR   telephone LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetablissementpriseencharge varclsetablissementpriseencharge = null;
                        while (dr.Read())
                        {
                            varclsetablissementpriseencharge = new clsetablissementpriseencharge();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementpriseencharge.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementpriseencharge.Denomination = dr["denomination"].ToString();
                            varclsetablissementpriseencharge.Adresse = dr["adresse"].ToString();
                            varclsetablissementpriseencharge.Telephone = dr["telephone"].ToString();
                            lstclsetablissementpriseencharge.Add(varclsetablissementpriseencharge);
                            varclsetablissementpriseencharge.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsetablissementpriseencharge;
        }

        public List<clsetablissementpriseencharge> getAllClsetablissementpriseencharge()
        {
            List<clsetablissementpriseencharge> lstclsetablissementpriseencharge = new List<clsetablissementpriseencharge>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM etablissementpriseencharge ORDER BY denomination ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetablissementpriseencharge varclsetablissementpriseencharge = null;
                        while (dr.Read())
                        {
                            varclsetablissementpriseencharge = new clsetablissementpriseencharge();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementpriseencharge.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementpriseencharge.Denomination = dr["denomination"].ToString();
                            varclsetablissementpriseencharge.Adresse = dr["adresse"].ToString();
                            varclsetablissementpriseencharge.Telephone = dr["telephone"].ToString();
                            lstclsetablissementpriseencharge.Add(varclsetablissementpriseencharge);
                            varclsetablissementpriseencharge.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsetablissementpriseencharge;
        }

        public List<clsetablissementpriseencharge> getAllClsetablissementpriseenchargeMituelle()
        {
            List<clsetablissementpriseencharge> lstclsetablissementpriseencharge = new List<clsetablissementpriseencharge>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM etablissementpriseencharge WHERE denomination!='Privée' AND denomination!='privée' AND denomination!='Privee' AND denomination!='Prive' AND denomination!='prive'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetablissementpriseencharge varclsetablissementpriseencharge = null;
                        while (dr.Read())
                        {
                            varclsetablissementpriseencharge = new clsetablissementpriseencharge();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementpriseencharge.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementpriseencharge.Denomination = dr["denomination"].ToString();
                            varclsetablissementpriseencharge.Adresse = dr["adresse"].ToString();
                            varclsetablissementpriseencharge.Telephone = dr["telephone"].ToString();
                            lstclsetablissementpriseencharge.Add(varclsetablissementpriseencharge);
                            varclsetablissementpriseencharge.Taux = Math.Round(double.Parse(dr["taux"].ToString()), 2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsetablissementpriseencharge;
        }

        public int insertClsetablissementpriseencharge(clsetablissementpriseencharge varclsetablissementpriseencharge)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO etablissementpriseencharge ( denomination,adresse,telephone,taux ) VALUES (@denomination,@adresse,@telephone,@taux  )");
                    if (varclsetablissementpriseencharge.Denomination != null) cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, varclsetablissementpriseencharge.Denomination));
                    else cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementpriseencharge.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, varclsetablissementpriseencharge.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementpriseencharge.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, varclsetablissementpriseencharge.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@taux", DbType.Single, 4, varclsetablissementpriseencharge.Taux));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsetablissementpriseencharge(clsetablissementpriseencharge varclsetablissementpriseencharge)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE etablissementpriseencharge  SET denomination=@denomination,adresse=@adresse,telephone=@telephone,taux=@taux  WHERE 1=1  AND id=@id ");
                    if (varclsetablissementpriseencharge.Denomination != null) cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, varclsetablissementpriseencharge.Denomination));
                    else cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementpriseencharge.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, varclsetablissementpriseencharge.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementpriseencharge.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, varclsetablissementpriseencharge.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@taux", DbType.Single, 4, varclsetablissementpriseencharge.Taux));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetablissementpriseencharge.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsetablissementpriseencharge(clsetablissementpriseencharge varclsetablissementpriseencharge)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM etablissementpriseencharge  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetablissementpriseencharge.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSETABLISSEMENTPRISEENCHARGE
        #region  CLSINTERVENTION
        public clsintervention getClsintervention(object intid)
        {
            clsintervention varclsintervention = new clsintervention();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM intervention WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintervention.Id = int.Parse(dr["id"].ToString());
                            varclsintervention.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsintervention.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_bloc"].ToString().Trim().Equals("")) varclsintervention.Id_bloc = int.Parse(dr["id_bloc"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsintervention;
        }

        public List<clsintervention> getAllClsintervention(string criteria)
        {
            List<clsintervention> lstclsintervention = new List<clsintervention>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM intervention  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsintervention varclsintervention = null;
                        while (dr.Read())
                        {

                            varclsintervention = new clsintervention();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintervention.Id = int.Parse(dr["id"].ToString());
                            varclsintervention.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsintervention.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_bloc"].ToString().Trim().Equals("")) varclsintervention.Id_bloc = int.Parse(dr["id_bloc"].ToString());
                            lstclsintervention.Add(varclsintervention);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsintervention;
        }

        public List<clsintervention> getAllClsintervention()
        {
            List<clsintervention> lstclsintervention = new List<clsintervention>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM intervention ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsintervention varclsintervention = null;
                        while (dr.Read())
                        {

                            varclsintervention = new clsintervention();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintervention.Id = int.Parse(dr["id"].ToString());
                            varclsintervention.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsintervention.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_bloc"].ToString().Trim().Equals("")) varclsintervention.Id_bloc = int.Parse(dr["id_bloc"].ToString());
                            lstclsintervention.Add(varclsintervention);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsintervention;
        }

        public List<clsintervention> getAllClstarifinterventionpaiement(int id_malade)
        {
            List<clsintervention> lstclsintervention = new List<clsintervention>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT subit.id AS idSubit,intervention.id,intervention.id_bloc,intervention.designation,intervention.prix FROM intervention 
                    INNER JOIN subit ON intervention.id=subit.id_intervention 
                    INNER JOIN malade ON malade.id=subit.id_malade 
                    INNER JOIN personne ON personne.id=malade.id_personne 
                    WHERE malade.id=" + id_malade + " AND (subit.etatpaiement='Non cloturé non payé' OR subit.etatpaiement='Cloturé non payé') ORDER BY intervention.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsintervention varclsintervention = null;
                        while (dr.Read())
                        {
                            varclsintervention = new clsintervention();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsintervention.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idSubit"].ToString().Trim().Equals("")) varclsintervention.Id_de_subit = int.Parse(dr["idSubit"].ToString());
                            varclsintervention.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsintervention.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_bloc"].ToString().Trim().Equals("")) varclsintervention.Id_bloc = int.Parse(dr["id_bloc"].ToString());
                            varclsintervention.DesignationConplete = varclsintervention.Designation + "=>" + varclsintervention.Prix + " $US";
                            lstclsintervention.Add(varclsintervention);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsintervention;
        }

        public int insertClsintervention(clsintervention varclsintervention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO intervention ( designation,prix,id_bloc ) VALUES (@designation,@prix,@id_bloc  )");
                    if (varclsintervention.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsintervention.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsintervention.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsintervention.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_bloc", DbType.Int32, 4, varclsintervention.Id_bloc));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsintervention(clsintervention varclsintervention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE intervention  SET designation=@designation,prix=@prix,id_bloc=@id_bloc  WHERE 1=1  AND id=@id ");
                    if (varclsintervention.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsintervention.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsintervention.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsintervention.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_bloc", DbType.Int32, 4, varclsintervention.Id_bloc));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintervention.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsintervention(clsintervention varclsintervention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM intervention  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsintervention.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSINTERVENTION
        #region  CLSCATEGORIEMALADE
        public clscategoriemalade getClscategoriemalade(object intid)
        {
            clscategoriemalade varclscategoriemalade = new clscategoriemalade();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categoriemalade WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriemalade.Id = int.Parse(dr["id"].ToString());
                            varclscategoriemalade.Designation = dr["designation"].ToString();
                            if (!dr["taux"].ToString().Trim().Equals("")) varclscategoriemalade.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscategoriemalade;
        }

        public clscategoriemalade getClscategoriemalade1(object intid)
        {
            clscategoriemalade varclscategoriemalade = new clscategoriemalade();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT categoriemalade.* FROM categoriemalade INNER JOIN malade ON categoriemalade.id=malade.id_categoriemalade WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriemalade.Id = int.Parse(dr["id"].ToString());
                            varclscategoriemalade.Designation = dr["designation"].ToString();
                            if (!dr["taux"].ToString().Trim().Equals("")) varclscategoriemalade.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscategoriemalade;
        }

        public List<clscategoriemalade> getAllClscategoriemalade(string criteria)
        {
            List<clscategoriemalade> lstclscategoriemalade = new List<clscategoriemalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM categoriemalade  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscategoriemalade varclscategoriemalade = null;
                        while (dr.Read())
                        {
                            varclscategoriemalade = new clscategoriemalade();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriemalade.Id = int.Parse(dr["id"].ToString());
                            varclscategoriemalade.Designation = dr["designation"].ToString();
                            if (!dr["taux"].ToString().Trim().Equals("")) varclscategoriemalade.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                            lstclscategoriemalade.Add(varclscategoriemalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategoriemalade;
        }

        public List<clscategoriemalade> getAllClscategoriemalade()
        {
            List<clscategoriemalade> lstclscategoriemalade = new List<clscategoriemalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categoriemalade ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscategoriemalade varclscategoriemalade = null;
                        while (dr.Read())
                        {
                            varclscategoriemalade = new clscategoriemalade();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriemalade.Id = int.Parse(dr["id"].ToString());
                            varclscategoriemalade.Designation = dr["designation"].ToString();
                            if (!dr["taux"].ToString().Trim().Equals("")) varclscategoriemalade.Taux = Math.Round(double.Parse(dr["taux"].ToString()),2);
                            lstclscategoriemalade.Add(varclscategoriemalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategoriemalade;
        }

        public int insertClscategoriemalade(clscategoriemalade varclscategoriemalade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO categoriemalade ( designation,taux ) VALUES (@designation,@taux  )");
                    if (varclscategoriemalade.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscategoriemalade.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@taux", DbType.Single, 4, varclscategoriemalade.Taux));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscategoriemalade(clscategoriemalade varclscategoriemalade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE categoriemalade  SET designation=@designation,taux=@taux  WHERE 1=1  AND id=@id ");
                    if (varclscategoriemalade.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscategoriemalade.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@taux", DbType.Single, 4, varclscategoriemalade.Taux));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategoriemalade.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscategoriemalade(clscategoriemalade varclscategoriemalade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM categoriemalade  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategoriemalade.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCATEGORIEMALADE
        #region  CLSCATEGORIECHAMBRE
        public clscategoriechambre getClscategoriechambre(object intid)
        {
            clscategoriechambre varclscategoriechambre = new clscategoriechambre();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categoriechambre WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriechambre.Id = int.Parse(dr["id"].ToString());
                            varclscategoriechambre.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclscategoriechambre.Prix = double.Parse(dr["prix"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscategoriechambre;
        }

        public List<clscategoriechambre> getAllClscategoriechambre(string criteria)
        {
            List<clscategoriechambre> lstclscategoriechambre = new List<clscategoriechambre>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM categoriechambre  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategoriechambre varclscategoriechambre = null;
                        while (dr.Read())
                        {

                            varclscategoriechambre = new clscategoriechambre();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriechambre.Id = int.Parse(dr["id"].ToString());
                            varclscategoriechambre.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclscategoriechambre.Prix = double.Parse(dr["prix"].ToString());
                            lstclscategoriechambre.Add(varclscategoriechambre);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategoriechambre;
        }

        public List<clscategoriechambre> getAllClscategoriechambre()
        {
            List<clscategoriechambre> lstclscategoriechambre = new List<clscategoriechambre>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM categoriechambre ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscategoriechambre varclscategoriechambre = null;
                        while (dr.Read())
                        {

                            varclscategoriechambre = new clscategoriechambre();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscategoriechambre.Id = int.Parse(dr["id"].ToString());
                            varclscategoriechambre.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclscategoriechambre.Prix = double.Parse(dr["prix"].ToString());
                            lstclscategoriechambre.Add(varclscategoriechambre);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscategoriechambre;
        }

        public int insertClscategoriechambre(clscategoriechambre varclscategoriechambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO categoriechambre ( designation,prix ) VALUES (@designation,@prix  )");
                    if (varclscategoriechambre.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscategoriechambre.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclscategoriechambre.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclscategoriechambre.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscategoriechambre(clscategoriechambre varclscategoriechambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE categoriechambre  SET designation=@designation,prix=@prix  WHERE 1=1  AND id=@id ");
                    if (varclscategoriechambre.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscategoriechambre.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclscategoriechambre.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclscategoriechambre.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategoriechambre.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscategoriechambre(clscategoriechambre varclscategoriechambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM categoriechambre  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscategoriechambre.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCATEGORIECHAMBRE
        #region  CLSMALADE
        public clsmalade getClsmalade(object intid)
        {
            clsmalade varclsmalade = new clsmalade();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Malade
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            varclsmalade.Postnom = dr["postnom"].ToString();
                            varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade;
        }

        public clsmalade getClsmalade1(object intid)
        {
            clsmalade varclsmalade = new clsmalade();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Malade
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            varclsmalade.Postnom = dr["postnom"].ToString();
                            varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade;
        }

        public List<clsmalade> getAllClsmalade(string criteria)
        {
            List<clsmalade> lstclsmalade = new List<clsmalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne  WHERE ";
                    sql += "       malade.numero LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    sql += "  OR   malade.numero_fiche LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade varclsmalade = null;
                        while (dr.Read())
                        {
                            varclsmalade = new clsmalade();
                            //Malade
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            varclsmalade.Postnom = dr["postnom"].ToString();
                            varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];

                            lstclsmalade.Add(varclsmalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public List<clsmalade> getAllClsmaladeFeminin(string criteria)
        {
            List<clsmalade> lstclsmalade = new List<clsmalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne WHERE personne.sexe='F' 
                    AND (personne.nom IN (SELECT personne.nom FROM personne INNER JOIN malade ON personne.id=malade.id_personne  WHERE "; 
                    sql += "  personne.nom LIKE '%" + criteria + "%')";
                    sql += "  OR personne.postnom IN (SELECT personne.postnom FROM personne INNER JOIN malade ON personne.id=malade.id_personne  WHERE   personne.postnom LIKE '%" + criteria + "%')";
                    sql += "  OR personne.prenom IN (SELECT personne.prenom FROM personne INNER JOIN malade ON personne.id=malade.id_personne  WHERE   personne.prenom LIKE '%" + criteria + "%')";
                    sql += "  OR personne.telephone IN (SELECT personne.telephone FROM personne INNER JOIN malade ON personne.id=malade.id_personne  WHERE   personne.telephone LIKE '%" + criteria + "%')";
                    sql += "  OR malade.numero IN (SELECT personne.telephone FROM personne INNER JOIN malade ON personne.id=malade.id_personne  WHERE   personne.telephone LIKE '%" + criteria + "%'))";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade varclsmalade = null;
                        while (dr.Read())
                        {
                            varclsmalade = new clsmalade();
                            //Malade
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            varclsmalade.Postnom = dr["postnom"].ToString();
                            varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];

                            lstclsmalade.Add(varclsmalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public List<clsmalade> getAllClsmalade()
        {
            List<clsmalade> lstclsmalade = new List<clsmalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne ORDER BY personne.nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade varclsmalade = null;
                        while (dr.Read())
                        {
                            //Malade
                            varclsmalade = new clsmalade();
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            //varclsmalade.Postnom = dr["postnom"].ToString();
                            //varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];
                            lstclsmalade.Add(varclsmalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public List<clsmalade> getAllClsmaladeNonAb()
        {
            List<clsmalade> lstclsmalade = new List<clsmalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne
                    INNER JOIN categoriemalade ON malade.id_categoriemalade=categoriemalade.id WHERE categoriemalade.designation='Non abonné' ORDER BY personne.nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade varclsmalade = null;
                        while (dr.Read())
                        {
                            //Malade
                            varclsmalade = new clsmalade();
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            //varclsmalade.Postnom = dr["postnom"].ToString();
                            //varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];
                            lstclsmalade.Add(varclsmalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public List<clsmalade> getAllClsmaladeAb()
        {
            List<clsmalade> lstclsmalade = new List<clsmalade>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne
                    INNER JOIN categoriemalade ON malade.id_categoriemalade=categoriemalade.id WHERE categoriemalade.designation='Abonné' ORDER BY personne.nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade varclsmalade = null;
                        while (dr.Read())
                        {
                            //Malade
                            varclsmalade = new clsmalade();
                            if (!dr["idMal"].ToString().Trim().Equals("")) varclsmalade.Id = int.Parse(dr["idMal"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsmalade.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_categoriemalade"].ToString().Trim().Equals("")) varclsmalade.Id_categoriemalade = int.Parse(dr["id_categoriemalade"].ToString());
                            if (!dr["id_etablissement"].ToString().Trim().Equals("")) varclsmalade.Id_etablissement = int.Parse(dr["id_etablissement"].ToString());
                            if (!dr["id_airsante"].ToString().Trim().Equals("")) varclsmalade.Id_airsante = int.Parse(dr["id_airsante"].ToString());
                            if (!dr["id_profession"].ToString().Trim().Equals("")) varclsmalade.Id_profession = int.Parse(dr["id_profession"].ToString());
                            if (!dr["id_groupesanguin"].ToString().Trim().Equals("")) varclsmalade.Id_groupesanguin = int.Parse(dr["id_groupesanguin"].ToString());
                            varclsmalade.Numero = dr["numero"].ToString();
                            varclsmalade.Numero_fiche = dr["numero_fiche"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade.IdPers = int.Parse(dr["id"].ToString());
                            varclsmalade.Nom = dr["nom"].ToString();
                            //varclsmalade.Postnom = dr["postnom"].ToString();
                            //varclsmalade.Prenom = dr["prenom"].ToString();
                            varclsmalade.Sexe = dr["sexe"].ToString();
                            varclsmalade.Etatcivil = dr["etatcivil"].ToString();
                            varclsmalade.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmalade.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmalade.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmalade.Photo = (Byte[])dr["photo"];
                            lstclsmalade.Add(varclsmalade);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmaladeDt()
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + '=>' + malade.numero_fiche AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne
                    ORDER BY nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmaladeDtNonAb()
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + '=>' + malade.numero_fiche AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne
                    INNER JOIN categoriemalade ON malade.id_categoriemalade=categoriemalade.id WHERE categoriemalade.designation='Non abonné' ORDER BY personne.nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmaladeDt(int id_malade)
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + '=>' + malade.numero_fiche AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne WHERE malade.id=" + id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmaladeDt2(int id_malade)
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + '=>' + malade.numero_fiche AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,malade.id AS idMal,malade.id_personne,malade.numero,malade.numero_fiche FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne WHERE malade.id=" + id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmaladeDtFeminin()
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') + '=>' + malade.numero_fiche AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.id,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne WHERE personne.sexe LIKE 'f'
                    ORDER BY nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public string generatenumeromalade(int idPersonne)
        {
            return "MA" + idPersonne.ToString() + "-" + DateTime.Today.Year.ToString().Substring(2, 2);
        }

        public string generatenumerofichemalade(int idMalade)
        {
            return idMalade.ToString() + "/" + DateTime.Today.Year.ToString().Substring(2, 2);
        }

        public DataTable getAllClsmalade1()
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT ISNULL(personne.nom,'') + ISNULL(personne.postnom,'') + ISNULL(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN consultation ON malade.id=consultation.id_malade
                    INNER JOIN dossierconsultationprenatale ON malade.id=dossierconsultationprenatale.id_malade
                    INNER JOIN dossierconsultationpostnatal ON malade.id=dossierconsultationpostnatal.id_malade
                    INNER JOIN operation_laboratoire ON malade.id=operation_laboratoire.id_malade
                    INNER JOIN hospitalisation ON malade.id=hospitalisation.id_malade
                    INNER JOIN subit ON malade.id=subit.id_malade
                    WHERE dossierpreconsultation.etatpaiement='Fiche non payée'
                    OR consultation.etatpaiement='Non cloturé non payé' AND consultation.etatpaiement='Cloturé non payé' 
                    OR dossierconsultationprenatale.etatpaiement='Non cloturé non payé' AND dossierconsultationprenatale.etatpaiement='Cloturé non payé' 
                    OR dossierconsultationpostnatal.etatpaiement='Non cloturé non payé' AND dossierconsultationpostnatal.etatpaiement='Cloturé non payé' 
                    OR operation_laboratoire.etatpaiement='Non cloturé non payé' AND operation_laboratoire.etatpaiement='Cloturé non payé' 
                    OR hospitalisation.etatpaiement='Non cloturé non payé' AND hospitalisation.etatpaiement='Cloturé non payé'
                    OR subit.etatpaiement='Non cloturé non payé' AND subit.etatpaiement='Cloturé non payé'
                    ORDER BY personne.nom ASC");

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public DataTable getAllClsmalade3()
        {
            DataTable lstclsmalade = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,malade.id AS idMal,malade.id_personne,malade.id_airsante,malade.id_categoriemalade,malade.id_etablissement,malade.id_profession,malade.numero,malade.numero_fiche,malade.id_groupesanguin FROM personne
                    INNER JOIN malade
                    ON personne.id=malade.id_personne ORDER BY personne.nom ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmalade.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade;
        }

        public int insertClsmalade(clsmalade varclsmalade)
        {
            int i = 0;
            try
            {
                varclsmalade.Id_personne = clsDoTraitement.Identifiant_Personne;
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string numeroMalade = "";
                    if (string.IsNullOrEmpty(clsDoTraitement.numeroMalade)) numeroMalade = this.generatenumeromalade(varclsmalade.Id_personne);
                    else numeroMalade = clsDoTraitement.numeroMalade;

                    cmd.CommandText = string.Format("INSERT INTO malade ( id_personne,id_categoriemalade,id_etablissement,id_airsante,id_profession,numero,id_groupesanguin ) VALUES (@id_personne,@id_categoriemalade,@id_etablissement,@id_airsante,@id_profession,@numero,@id_groupesanguin  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsmalade.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categoriemalade", DbType.Int32, 4, varclsmalade.Id_categoriemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_etablissement", DbType.Int32, 4, varclsmalade.Id_etablissement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_airsante", DbType.Int32, 4, varclsmalade.Id_airsante));
                    cmd.Parameters.Add(getParameter(cmd, "@id_profession", DbType.Int32, 4, varclsmalade.Id_profession));
                    cmd.Parameters.Add(getParameter(cmd, "@id_groupesanguin", DbType.Int32, 4, varclsmalade.Id_groupesanguin));
                    if (varclsmalade.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, numeroMalade));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, numeroMalade));
                    i = cmd.ExecuteNonQuery();

                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = string.Format("SELECT @@IDENTITY AS id_inserted FROM malade");
                        IDataReader rd = cmd1.ExecuteReader();
                        if (rd.Read()) clsDoTraitement.IdMalade = Convert.ToInt32(rd["id_inserted"]);
                        rd.Close();
                        conn.Close();
                    }
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmalade(clsmalade varclsmalade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE malade  SET id_personne=@id_personne,id_categoriemalade=@id_categoriemalade,id_etablissement=@id_etablissement,id_airsante=@id_airsante,id_profession=@id_profession,numero=@numero,id_groupesanguin=@id_groupesanguin,numero_fiche=@numero_fiche WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsmalade.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_categoriemalade", DbType.Int32, 4, varclsmalade.Id_categoriemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_etablissement", DbType.Int32, 4, varclsmalade.Id_etablissement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_airsante", DbType.Int32, 4, varclsmalade.Id_airsante));
                    cmd.Parameters.Add(getParameter(cmd, "@id_profession", DbType.Int32, 4, varclsmalade.Id_profession));
                    cmd.Parameters.Add(getParameter(cmd, "@id_groupesanguin", DbType.Int32, 4, varclsmalade.Id_groupesanguin));
                    if (varclsmalade.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, varclsmalade.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@numero_fiche", DbType.String, 30, varclsmalade.Numero_fiche));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmalade.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmalade(clsmalade varclsmalade)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM malade  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmalade.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message + " ,vous devez d'abord supprimer toutes les informations liées à ce malade");
            }
            return i;
        }

        #endregion CLSMALADE
        #region  CLSCHAMBRE
        public clschambre getClschambre(object intid)
        {
            clschambre varclschambre = new clschambre();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *,(chambre.designation + CONVERT(VARCHAR(20),ISNULL(chambre.numero,0))) AS designation2  FROM chambre WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclschambre.Id = int.Parse(dr["id"].ToString());
                            varclschambre.Designation = dr["designation"].ToString();
                            if (!dr["numero"].ToString().Trim().Equals("")) varclschambre.Numero = double.Parse(dr["numero"].ToString());
                            if (!dr["id_categoriechambre"].ToString().Trim().Equals("")) varclschambre.Id_categoriechambre = int.Parse(dr["id_categoriechambre"].ToString());
                            varclschambre.DesignationConplete = dr["designation2"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclschambre;
        }

        public List<clschambre> getAllClschambre(string criteria)
        {
            List<clschambre> lstclschambre = new List<clschambre>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM chambre  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clschambre varclschambre = null;
                        while (dr.Read())
                        {

                            varclschambre = new clschambre();
                            if (!dr["id"].ToString().Trim().Equals("")) varclschambre.Id = int.Parse(dr["id"].ToString());
                            varclschambre.Designation = dr["designation"].ToString();
                            if (!dr["numero"].ToString().Trim().Equals("")) varclschambre.Numero = double.Parse(dr["numero"].ToString());
                            if (!dr["id_categoriechambre"].ToString().Trim().Equals("")) varclschambre.Id_categoriechambre = int.Parse(dr["id_categoriechambre"].ToString());
                            lstclschambre.Add(varclschambre);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclschambre;
        }

        public List<clschambre> getAllClschambre()
        {
            List<clschambre> lstclschambre = new List<clschambre>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *,(chambre.designation + CONVERT(VARCHAR(20),ISNULL(chambre.numero,0))) AS designation2 FROM chambre ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clschambre varclschambre = null;
                        while (dr.Read())
                        {

                            varclschambre = new clschambre();
                            if (!dr["id"].ToString().Trim().Equals("")) varclschambre.Id = int.Parse(dr["id"].ToString());
                            varclschambre.Designation = dr["designation"].ToString();
                            if (!dr["numero"].ToString().Trim().Equals("")) varclschambre.Numero = double.Parse(dr["numero"].ToString());
                            if (!dr["id_categoriechambre"].ToString().Trim().Equals("")) varclschambre.Id_categoriechambre = int.Parse(dr["id_categoriechambre"].ToString());
                            varclschambre.DesignationConplete = dr["designation2"].ToString();
                            lstclschambre.Add(varclschambre);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclschambre;
        }

        public List<clschambre> getAllClschambretarifpaiement(int id_malade)
        {
            List<clschambre> lstclsclschambre = new List<clschambre>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT hospitalisation.id AS idHospitalisation,chambre.id,chambre.id_categoriechambre,chambre.designation AS designation,chambre.numero AS numero,(chambre.designation + CONVERT(VARCHAR(20),ISNULL(chambre.numero,0))) AS designation2,categoriechambre.designation AS desi,categoriechambre.prix AS prix,ISNULL(DATEDIFF(DAY,hospitalisation.datedebut,hospitalisation.datefin),0) AS nbrjour FROM categoriechambre
                    INNER JOIN chambre ON categoriechambre.id=chambre.id_categoriechambre
                    INNER JOIN hospitalisation ON chambre.id=hospitalisation.id_chambre 
                    INNER JOIN malade ON malade.id=hospitalisation.id_malade WHERE malade.id=" + id_malade + " AND (hospitalisation.etatpaiement='Cloturé non payé' OR hospitalisation.etatpaiement='Non cloturé non payé')");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clschambre varclschambre = null;
                        while (dr.Read())
                        {
                            varclschambre = new clschambre();
                            if (!dr["id"].ToString().Trim().Equals("")) varclschambre.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idHospitalisation"].ToString().Trim().Equals("")) varclschambre.Id_de_hospitalisation = int.Parse(dr["idHospitalisation"].ToString());
                            if (!dr["id_categoriechambre"].ToString().Trim().Equals("")) varclschambre.Id_categoriechambre = int.Parse(dr["id_categoriechambre"].ToString());
                            if (!dr["nbrjour"].ToString().Trim().Equals("")) varclschambre.Nbrjour = int.Parse(dr["nbrjour"].ToString());
                            if (!dr["prix"].ToString().Trim().Equals("")) varclschambre.Prix_de_chambre = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            double numero_chambre = dr["numero"] == DBNull.Value ? 0 : double.Parse(dr["numero"].ToString());
                            varclschambre.DesignationConplete = dr["designation"].ToString() + numero_chambre + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2) + " $US=>" + int.Parse(dr["nbrjour"].ToString()) + " Jrs";
                            lstclsclschambre.Add(varclschambre);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsclschambre;
        }

        public int insertClschambre(clschambre varclschambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO chambre ( designation,numero,id_categoriechambre ) VALUES (@designation,@numero,@id_categoriechambre  )");
                    if (varclschambre.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclschambre.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclschambre.Numero.HasValue) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.Single, 4, varclschambre.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.Single, 4, DBNull.Value));
                    if (varclschambre.Id_categoriechambre.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_categoriechambre", DbType.Int32, 4, varclschambre.Id_categoriechambre));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_categoriechambre", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClschambre(clschambre varclschambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE chambre  SET designation=@designation,numero=@numero,id_categoriechambre=@id_categoriechambre  WHERE 1=1  AND id=@id ");
                    if (varclschambre.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclschambre.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclschambre.Numero.HasValue) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.Single, 4, varclschambre.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.Single, 4, DBNull.Value));
                    if (varclschambre.Id_categoriechambre.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_categoriechambre", DbType.Int32, 4, varclschambre.Id_categoriechambre));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_categoriechambre", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclschambre.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClschambre(clschambre varclschambre)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM chambre  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclschambre.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCHAMBRE
        #region  CLSHOSPITALISATION

        public clshospitalisation getClshospitalisation(object intid)
        {
            clshospitalisation varclshospitalisation = new clshospitalisation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM hospitalisation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclshospitalisation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            varclshospitalisation.Etatpaiement = dr["etatpaiement"].ToString();

                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclshospitalisation;
        }

        public clshospitalisation getClshospitalisation1(int ? id)
        {
            clshospitalisation varclshospitalisation = new clshospitalisation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM hospitalisation WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclshospitalisation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            varclshospitalisation.Etatpaiement = dr["etatpaiement"].ToString();

                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclshospitalisation;
        }

        public List<clshospitalisation> getAllClshospitalisation(string criteria)
        {
            List<clshospitalisation> lstclshospitalisation = new List<clshospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM hospitalisation  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clshospitalisation varclshospitalisation = null;
                        while (dr.Read())
                        {

                            varclshospitalisation = new clshospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclshospitalisation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            varclshospitalisation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclshospitalisation.Add(varclshospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclshospitalisation;
        }

        public List<clshospitalisation> getAllClshospitalisation1(int criteria, string etatpaiement1, string etatpaiement2)
        {
            List<clshospitalisation> lstclshospitalisation = new List<clshospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM hospitalisation  WHERE id_malade= " + criteria + " and (etatpaiement='" + etatpaiement1 + "' or etatpaiement='" + etatpaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clshospitalisation varclshospitalisation = null;
                        while (dr.Read())
                        {
                            varclshospitalisation = new clshospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclshospitalisation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclshospitalisation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclshospitalisation.Add(varclshospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclshospitalisation;
        }

        public List<clshospitalisation> getAllClshospitalisation()
        {
            List<clshospitalisation> lstclshospitalisation = new List<clshospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM hospitalisation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clshospitalisation varclshospitalisation = null;
                        while (dr.Read())
                        {

                            varclshospitalisation = new clshospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclshospitalisation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            varclshospitalisation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclshospitalisation.Add(varclshospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclshospitalisation;
        }

        public int insertClshospitalisation(clshospitalisation varclshospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO hospitalisation ( datedebut,datefin,id_malade,id_chambre,etatpaiement ) VALUES (@datedebut,@datefin,@id_malade,@id_chambre,@etatpaiement)");
                    if (varclshospitalisation.Datedebut.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebut", DbType.DateTime, 8, varclshospitalisation.Datedebut));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebut", DbType.DateTime, 8, DateTime.Today));
                    if (varclshospitalisation.Datefin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datefin", DbType.DateTime, 8, varclshospitalisation.Datefin));
                    else cmd.Parameters.Add(getParameter(cmd, "@datefin", DbType.DateTime, 8, DBNull.Value));
                    if (varclshospitalisation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclshospitalisation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclshospitalisation.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_chambre", DbType.Int32, 4, varclshospitalisation.Id_chambre));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClshospitalisation(clshospitalisation varclshospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE hospitalisation  SET datedebut=@datedebut,datefin=@datefin,etatpaiement=@etatpaiement,id_malade=@id_malade,id_chambre=@id_chambre  WHERE 1=1  AND id=@id ");
                    if (varclshospitalisation.Datedebut.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebut", DbType.DateTime, 8, varclshospitalisation.Datedebut));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebut", DbType.DateTime, 8, DateTime.Today));
                    if (varclshospitalisation.Datefin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datefin", DbType.DateTime, 8, varclshospitalisation.Datefin));
                    else cmd.Parameters.Add(getParameter(cmd, "@datefin", DbType.DateTime, 8, DBNull.Value));
                    if (varclshospitalisation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclshospitalisation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclshospitalisation.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_chambre", DbType.Int32, 4, varclshospitalisation.Id_chambre));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclshospitalisation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClshospitalisation(int ? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE hospitalisation SET etatpaiement='Non Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE hospitalisation SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClshospitalisation(clshospitalisation varclshospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM hospitalisation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclshospitalisation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSHOSPITALISATION 
        #region  CLSGROUPE
        public clsgroupe getClsgroupe(object intid)
        {
            clsgroupe varclsgroupe = new clsgroupe();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM groupe WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsgroupe;
        }

        public List<clsgroupe> getAllClsgroupe(string criteria)
        {
            List<clsgroupe> lstclsgroupe = new List<clsgroupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM groupe  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsgroupe varclsgroupe = null;
                        while (dr.Read())
                        {

                            varclsgroupe = new clsgroupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                            lstclsgroupe.Add(varclsgroupe);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsgroupe;
        }

        public List<clsgroupe> getAllClsgroupe()
        {
            List<clsgroupe> lstclsgroupe = new List<clsgroupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM groupe ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgroupe varclsgroupe = null;
                        while (dr.Read())
                        {
                            varclsgroupe = new clsgroupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupe.Id = int.Parse(dr["id"].ToString());
                            varclsgroupe.Designation = dr["designation"].ToString();
                            if (!dr["niveau"].ToString().Trim().Equals("")) varclsgroupe.Niveau = int.Parse(dr["niveau"].ToString());
                            lstclsgroupe.Add(varclsgroupe);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsgroupe;
        }

        public int insertClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO groupe ( designation,niveau ) VALUES (@designation,@niveau  )");
                    if (varclsgroupe.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsgroupe.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    if (varclsgroupe.Niveau.HasValue) cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, varclsgroupe.Niveau));
                    else cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE groupe  SET designation=@designation,niveau=@niveau  WHERE 1=1  AND id=@id ");
                    if (varclsgroupe.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, varclsgroupe.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 30, DBNull.Value));
                    if (varclsgroupe.Niveau.HasValue) cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, varclsgroupe.Niveau));
                    else cmd.Parameters.Add(getParameter(cmd, "@niveau", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsgroupe.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsgroupe(clsgroupe varclsgroupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM groupe  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsgroupe.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSGROUPE
        #region  CLSUTILISATEUR
        /// <summary>
        /// Permet de verifier les paramètres de connexion de l'utilisateur, donc username et password
        /// et retourne un tableau contenant successivement l'Id de l'Agent, son nom complet comcatene à son matricule,
        /// le niveau de l'utilisateur ainsi que son matricule
        /// </summary>
        /// <param name="username">String nom d'utilisateur</param>
        /// <param name="password">String mot de passe</param>
        /// <returns>Tableau des string</returns>
        public string[] verifieLoginUser(string username, string password)
        {
            string[] tbValue = new string[4];
            bool okActivateUser = false;

            //Echec de la connexion en superAdministrateur alors on peut se connecte en Administrateur 
            //ou en invite
            if (username.ToLower().Equals("sa"))
            {
                //Super utilisateur de la BD
                tbValue[0] = "0";
                tbValue[1] = "Superutilisateur de la BD";
                tbValue[2] = "Administrateur";
                clsDoTraitement.nombre_droit = 1;//Nombre facultatif mais supérieur au nombre des droits à accorder
            }
            else
            {
                try
                {
                    if (conn.State != ConnectionState.Open) conn.Open();
                    using (IDbCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = string.Format(@"SELECT agent.id AS id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,agent.matricule AS matricule,utilisateur.activation AS activation,utilisateur.nomuser,utilisateur.droits AS droits,utilisateur.motpass FROM personne 
                    INNER JOIN agent ON personne.id=agent.id_personne 
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE utilisateur.nomuser='{0}' AND utilisateur.motpass='{1}'", username, CryptageJosam_LIB.clsMetier.GetInstance().doCrypte(password));

                        using (IDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                tbValue[0] = Convert.ToString(dr["id"]);
                                clsDoTraitement.id_Agent_Connecte = Convert.ToInt32(dr["id"]);
                                tbValue[1] = Convert.ToString(dr["nom"]);
                                tbValue[2] = Convert.ToString(dr["droits"]);//Tous les droit de l'utilisateur
                                //Ces droits sont:0->Administrateur,1->Médecin,2->Infirmier,3->Laborantin,4->Pharmacien,
                                //                5->Caissier,6->Médecin gynéco.,7->Service

                                tbValue[3] = Convert.ToString(dr["matricule"]);
                                okActivateUser = Convert.ToBoolean(dr["activation"]);

                                int nbr = 0;
                                try
                                {
                                    string[] nbdroit = tbValue[2].Split(',');
                                    foreach (string str in nbdroit) nbr++;
                                }
                                catch (Exception) { }

                                clsDoTraitement.nombre_droit = nbr;

                                //Si desvaleurs sont trouvee et que la personne se connecte tout en etant active ,on les inscrits 
                                //dans un fichier text dont le contenu sera supprime apres deconnexion de l'utilisateur
                                if (okActivateUser) { }
                                else
                                {
                                    tbValue[0] = "";
                                    tbValue[1] = "";
                                    tbValue[2] = "20";
                                    tbValue[3] = "";
                                }
                            }
                            else
                            {
                                tbValue[0] = "";
                                tbValue[1] = "";
                                tbValue[2] = "10";
                                tbValue[3] = "";
                            }
                        }
                    }
                    conn.Close();
                }
                catch (Exception exc)
                {
                    conn.Close();
                    throw new Exception(exc.Message);
                }
            }
            return tbValue;
        }

        public clsutilisateur getClsutilisateur(object intid)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE utilisateur.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            if (!dr["droits"].ToString().Trim().Equals("")) varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                            //varclsutilisateur.Postnom = dr["postnom"].ToString();
                            //varclsutilisateur.Prenom = dr["prenom"].ToString();
                            //varclsutilisateur.Sexe = dr["sexe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsutilisateur;
        }

        public clsutilisateur getClsutilisateurUser(string nom_user)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE utilisateur.nomuser='{0}'", nom_user);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            if (!dr["droits"].ToString().Trim().Equals("")) varclsutilisateur.Droits = dr["droits"].ToString();
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                            //varclsutilisateur.Postnom = dr["postnom"].ToString();
                            //varclsutilisateur.Prenom = dr["prenom"].ToString();
                            //varclsutilisateur.Sexe = dr["sexe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsutilisateur;
        }

        public clsutilisateur getClsutilisateur1(object intid_agent)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE agent.id={0}", intid_agent);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            if (!dr["droits"].ToString().Trim().Equals("")) varclsutilisateur.Droits = dr["droits"].ToString();
                            varclsutilisateur.Motpass = dr["motpass"].ToString();
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                            //varclsutilisateur.Postnom = dr["postnom"].ToString();
                            //varclsutilisateur.Prenom = dr["prenom"].ToString();
                            //varclsutilisateur.Sexe = dr["sexe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsutilisateur;
        }

        public DataTable getAllClsutilisateur1()
        {
            DataTable lstclsutilisateur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,agent.matricule,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.activation,utilisateur.schema_user,utilisateur.droits FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent ORDER BY utilisateur.nomuser ASC");

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsutilisateur.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur;
        }

        public DataTable getAllClsutilisateur1(int id_utilisateur)
        {
            DataTable lstclsutilisateur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,agent.matricule,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.activation,utilisateur.schema_user,utilisateur.droits FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE utilisateur.id=" + id_utilisateur);

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsutilisateur.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur;
        }

        public DataTable getAllClsutilisateur2(int intid)
        {
            DataTable lstclsutilisateur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent WHERE utilisateur.id=" + intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsutilisateur.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur;
        }

        public List<clsutilisateur> getAllClsutilisateur(string criteria)
        {
            List<clsutilisateur> lstclsutilisateur = new List<clsutilisateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.schema_user,utilisateur.droits,utilisateur.motpass,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent  WHERE 1=1";
                    sql += "  OR   utilisateur.nomuser LIKE '%" + criteria + "%'";
                    sql += "  OR   utilisateur.motpass LIKE '%" + criteria + "%'";
                    sql += "  OR   utilisateur.droits LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsutilisateur varclsutilisateur = null;
                        while (dr.Read())
                        {
                            varclsutilisateur = new clsutilisateur();
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            if (!dr["droits"].ToString().Trim().Equals("")) varclsutilisateur.Droits = dr["droits"].ToString();
                            varclsutilisateur.Motpass = CryptageJosam_LIB.clsMetier.GetInstance().doDeCrypte(dr["motpass"].ToString());
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                            varclsutilisateur.Postnom = dr["postnom"].ToString();
                            varclsutilisateur.Prenom = dr["prenom"].ToString();
                            varclsutilisateur.Sexe = dr["sexe"].ToString();
                            lstclsutilisateur.Add(varclsutilisateur);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur;
        }

        //Methode Aj

        public clsutilisateur getAllClsutilisateur1(string criteria)
        {
            clsutilisateur varclsutilisateur = new clsutilisateur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT * FROM utilisateur WHERE utilisateur.nomuser=@critaire";
                    cmd.CommandText = string.Format(sql);
                    cmd.Parameters.Add(getParameter(cmd, "@critaire", DbType.String, 100, criteria));

                    //cmd.CommandText = "SELECT * FROM utilisateur WHERE nomuser="+criteria;
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Utilisateur
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            varclsutilisateur.Motpass = CryptageJosam_LIB.clsMetier.GetInstance().doDeCrypte(dr["motpass"].ToString());
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            //if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            //varclsutilisateur.Nom = dr["nom"].ToString();
                            ////varclsutilisateur.Postnom = dr["postnom"].ToString();
                            //varclsutilisateur.Prenom = dr["prenom"].ToString();
                            //varclsutilisateur.Sexe = dr["sexe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsutilisateur;
        }

        public List<clsutilisateur> getAllClsutilisateur()
        {
            List<clsutilisateur> lstclsutilisateur = new List<clsutilisateur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,utilisateur.id AS idUser,utilisateur.id_agent,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,utilisateur.nomuser,utilisateur.motpass,utilisateur.schema_user,utilisateur.droits,utilisateur.activation FROM personne
                    INNER JOIN agent ON personne.id=agent.id_personne
                    INNER JOIN utilisateur ON agent.id=utilisateur.id_agent ORDER BY utilisateur.nomuser ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsutilisateur varclsutilisateur = null;
                        while (dr.Read())
                        {
                            varclsutilisateur = new clsutilisateur();
                            //Utilisateur
                            if (!dr["idUser"].ToString().Trim().Equals("")) varclsutilisateur.Id = int.Parse(dr["idUser"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsutilisateur.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                            if (!dr["droits"].ToString().Trim().Equals("")) varclsutilisateur.Droits = dr["droits"].ToString();
                            varclsutilisateur.Nomuser = dr["nomuser"].ToString();
                            varclsutilisateur.Motpass = CryptageJosam_LIB.clsMetier.GetInstance().doDeCrypte(dr["motpass"].ToString());
                            if (!dr["activation"].ToString().Trim().Equals("")) varclsutilisateur.Activation = bool.Parse(dr["activation"].ToString());

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur.IdPers = int.Parse(dr["id"].ToString());
                            varclsutilisateur.Nom = dr["nom"].ToString();
                            //varclsutilisateur.Postnom = dr["postnom"].ToString();
                            //varclsutilisateur.Prenom = dr["prenom"].ToString();
                            //varclsutilisateur.Sexe = dr["sexe"].ToString();
                            lstclsutilisateur.Add(varclsutilisateur);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur;
        }

        public int insertClsutilisateur(clsutilisateur varclsutilisateur)
        {
            //On crée d'abord le user en déhors de la transaction
            bool echec_create = false;
            string message_erreur_user = "";
            try
            {
                //Avant de faire l'insertion dans la table utilisateur, on commence par créer le login et le user de la BD
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"exec sp_addlogin '" + varclsutilisateur.Nomuser + "','" + varclsutilisateur.Motpass + "','" + clsMetier.bdEnCours + @"'
                                                 
                                                 exec sp_grantdbaccess '" + varclsutilisateur.Nomuser + @"'
                                                 ");
                    int j = cmd.ExecuteNonQuery();
                    echec_create = true;
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                message_erreur_user = exc.Message;
                conn.Close();
                throw new Exception(exc.Message);
            }

            //Dans la transaction on fait le reste
            IDbTransaction transaction = null;
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                if (echec_create) { }
                else throw new Exception(message_erreur_user);//Si la création du user a échoué, on fait échoué le reste

                //Si l'on à cocher la case à cocher d'activation de l'utilisateur on doit le donner accès à se connecter ou non
                if ((bool)varclsutilisateur.Activation) { }
                else
                {
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format(@"revoke connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                        cmd2.Transaction = transaction;
                        i = cmd2.ExecuteNonQuery();
                    }
                }

                //Insertion de l'utilisateur créé dans la table des user
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("INSERT INTO utilisateur ( id_agent,nomuser,motpass,activation,schema_user ) VALUES (@id_agent,@nomuser,@motpass,@activation,@schema_user  )");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_agent", DbType.Int32, 4, varclsutilisateur.Id_agent));
                    if (varclsutilisateur.Nomuser != null) cmd3.Parameters.Add(getParameter(cmd3, "@nomuser", DbType.String, 30, varclsutilisateur.Nomuser));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@nomuser", DbType.String, 30, DBNull.Value));
                    if (varclsutilisateur.Motpass != null) cmd3.Parameters.Add(getParameter(cmd3, "@motpass", DbType.String, 30, CryptageJosam_LIB.clsMetier.GetInstance().doCrypte(varclsutilisateur.Motpass)));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@motpass", DbType.String, 30, DBNull.Value));
                    cmd3.Parameters.Add(getParameter(cmd3, "@schema_user", DbType.String, 100, varclsutilisateur.Nomuser));
                    if (varclsutilisateur.Activation.HasValue) cmd3.Parameters.Add(getParameter(cmd3, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                    else cmd3.Parameters.Add(getParameter(cmd3, "@activation", DbType.Boolean, 2, DBNull.Value));
                    cmd3.Transaction = transaction;
                    i = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                }

                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec lors de la création de l'utilisateur, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClsutilisateur(clsutilisateur varclsutilisateur)
        {
            IDbTransaction transaction = null;
            int i = 0;
            bool ok = false;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                if (clsDoTraitement.etat_modification_user == 1)
                {
                    //Modification du nom user seulement

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur.Nomuser = clsDoTraitement.newUser;
                        varclsutilisateur.Motpass = clsDoTraitement.oldPassword;
                        cmd1.CommandText = string.Format("alter login " + clsDoTraitement.oldUser + " with name=" + varclsutilisateur.Nomuser); //On modifie le login de l'utilisateur pour changer son mode de connexion
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }
                else if (clsDoTraitement.etat_modification_user == 2)
                {
                    //Modification du mot de passe seulement

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur.Motpass = clsDoTraitement.newPassword;
                        cmd1.CommandText = string.Format("alter LOGIN " + varclsutilisateur.Nomuser + " WITH PASSWORD='" + clsDoTraitement.newPassword + "'"); //On modifie le login de l'utilisateur pour changer son mot de passe de connexion
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }
                else if (clsDoTraitement.etat_modification_user == 3)
                {
                    //Modification du nom d'utilisateur et du mot de passe

                    //Avant de modifier l'utilisateur dans la table, on modifie le user de la bd
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        varclsutilisateur.Nomuser = clsDoTraitement.newUser;
                        varclsutilisateur.Motpass = clsDoTraitement.newPassword;
                        cmd1.CommandText = string.Format("ALTER LOGIN " + clsDoTraitement.oldUser + " WITH PASSWORD='" + clsDoTraitement.newPassword + "'" + @"
                                                          ALTER LOGIN " + clsDoTraitement.oldUser + " WITH NAME=" + varclsutilisateur.Nomuser); //On modifie le login de l'utilisateur pour changer son mot de passe de connexion, puis on modifie son nom de login
                        cmd1.Transaction = transaction;
                        i = cmd1.ExecuteNonQuery();
                    }
                }

                if (clsDoTraitement.etat_modification_user == 1 || clsDoTraitement.etat_modification_user == 2 || clsDoTraitement.etat_modification_user == 3)
                {
                    //Modification de l'utilisateur
                    using (IDbCommand cmd = conn.CreateCommand())
                    {
                        cmd.CommandText = string.Format("UPDATE utilisateur  SET id_agent=@id_agent,nomuser=@nomuser,motpass=@motpass,activation=@activation  WHERE 1=1  AND id=@id ");
                        cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 4, varclsutilisateur.Id_agent));
                        if (varclsutilisateur.Nomuser != null) cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, varclsutilisateur.Nomuser));
                        else cmd.Parameters.Add(getParameter(cmd, "@nomuser", DbType.String, 30, DBNull.Value));
                        if (varclsutilisateur.Motpass != null) cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 30, CryptageJosam_LIB.clsMetier.GetInstance().doCrypte(varclsutilisateur.Motpass)));
                        else cmd.Parameters.Add(getParameter(cmd, "@motpass", DbType.String, 30, DBNull.Value));
                        if (varclsutilisateur.Activation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                        else cmd.Parameters.Add(getParameter(cmd, "@activation", DbType.Boolean, 2, DBNull.Value));
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                        cmd.Transaction = transaction;
                        i = cmd.ExecuteNonQuery();
                        transaction.Commit();
                        ok = true;
                        conn.Close();
                    }
                }
                if (!ok) conn.Close();

                if (clsDoTraitement.etat_modification_user == 4)
                {
                    varclsutilisateur.Activation = clsDoTraitement.activationUser;
                    try
                    {
                        if (conn.State != ConnectionState.Open) conn.Open();

                        if ((bool)varclsutilisateur.Activation)
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"grant connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                                i = cmd3.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"revoke connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                                i = cmd3.ExecuteNonQuery();
                            }
                        }

                        using (IDbCommand cmd4 = conn.CreateCommand())
                        {
                            cmd4.CommandText = string.Format("UPDATE utilisateur SET activation=@activation  WHERE 1=1  AND id=@id ");
                            cmd4.Parameters.Add(getParameter(cmd4, "@activation", DbType.Boolean, 2, varclsutilisateur.Activation));
                            cmd4.Parameters.Add(getParameter(cmd4, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                            cmd4.Transaction = transaction;
                            i = cmd4.ExecuteNonQuery();
                            conn.Close();
                        }
                    }
                    catch (Exception exc)
                    {
                        conn.Close();
                        throw new Exception("Echec lors de l'activation/ou désactivation de l'utilisateur, " + exc.Message);
                    }
                }
                else if (clsDoTraitement.etat_modification_user == 1 || clsDoTraitement.etat_modification_user == 2 || clsDoTraitement.etat_modification_user == 3)
                {
                    try
                    {
                        if (conn.State != ConnectionState.Open) conn.Open();

                        //On récupère le nom de l'utilisateur qui correspond au premier qui a été créé à la première fois
                        //et qui est équivalente au nom du schema de ce dernier

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = string.Format(@"SELECT utilisateur.schema_user FROM utilisateur WHERE id=" + varclsutilisateur.Id);
                            using (IDataReader dr = cmd2.ExecuteReader())
                            {
                                if (dr.Read())
                                {
                                    varclsutilisateur.Nomuser = dr["schema_user"].ToString();
                                }
                            }
                        }

                        //Si l'on à cocher la case à cocher d'activation de l'utilisateur on doit le donner accès à se connecter ou non
                        if ((bool)varclsutilisateur.Activation)
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"grant connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                                i = cmd3.ExecuteNonQuery();
                                conn.Close();
                            }
                        }
                        else
                        {
                            using (IDbCommand cmd3 = conn.CreateCommand())
                            {
                                cmd3.CommandText = string.Format(@"revoke connect to " + varclsutilisateur.Nomuser); //On interdit à l'utilisateur de se connecter au serveur
                                i = cmd3.ExecuteNonQuery();
                                conn.Close();
                            }
                        }
                    }
                    catch (Exception) { }
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec lors de la modification de l'utilisateur, " + exc.Message);
                }
                conn.Close();
            }
            clsDoTraitement.etat_modification_user = -1;
            return i;
        }

        public int updateClsutilisateur_droit(int id_user,string droits)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                //Modification de l'utilisateur
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE utilisateur  SET droits=@droits  WHERE 1=1  AND id=@id ");
                    if (droits != null) cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 100, droits));
                    else cmd.Parameters.Add(getParameter(cmd, "@droits", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_user));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsutilisateur(clsutilisateur varclsutilisateur)
        {
            int i = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format(@"SELECT utilisateur.schema_user FROM utilisateur WHERE utilisateur.id=" + varclsutilisateur.Id);
                    cmd1.Transaction = transaction;
                    using (IDataReader dr = cmd1.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["schema_user"].ToString().Trim().Equals("")) varclsutilisateur.Schema_user = dr["schema_user"].ToString();
                        }
                    }
                }

                //Avant de supprimer l'utilisateur dans la table, on supprime son schema qui correspond au premier nom d'utilisateur crée
                //puis on supprime son nom d'utilisateur et enfin on supprime son login
                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DROP SCHEMA " + varclsutilisateur.Schema_user + @" 
                                                      DROP USER " + varclsutilisateur.Schema_user + @"
                                                      DROP LOGIN " + varclsutilisateur.Nomuser); 
                    cmd2.Transaction = transaction;
                    i = cmd2.ExecuteNonQuery();
                }

                //Enfin on supprime l'i=utilisateur dans la table des utilisateurs
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM utilisateur WHERE  1=1  AND id=@id ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id", DbType.Int32, 4, varclsutilisateur.Id));
                    cmd3.Transaction = transaction;
                    i = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                }

                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec lors de la suppression de l'utilisateur, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        #endregion CLSUTILISATEUR
        #region  CLSUTILISATEUR_GROUPE
        public clsutilisateur_groupe getClsutilisateur_groupe(object intid)
        {
            clsutilisateur_groupe varclsutilisateur_groupe = new clsutilisateur_groupe();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM utilisateur_groupe WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_groupe"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_groupe = int.Parse(dr["id_groupe"].ToString());
                            if (!dr["id_utilisateur"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_utilisateur = int.Parse(dr["id_utilisateur"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsutilisateur_groupe;
        }

        public List<clsutilisateur_groupe> getAllClsutilisateur_groupe(string criteria)
        {
            List<clsutilisateur_groupe> lstclsutilisateur_groupe = new List<clsutilisateur_groupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM utilisateur_groupe  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsutilisateur_groupe varclsutilisateur_groupe = null;
                        while (dr.Read())
                        {
                            varclsutilisateur_groupe = new clsutilisateur_groupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_groupe"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_groupe = int.Parse(dr["id_groupe"].ToString());
                            if (!dr["id_utilisateur"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_utilisateur = int.Parse(dr["id_utilisateur"].ToString());
                            lstclsutilisateur_groupe.Add(varclsutilisateur_groupe);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur_groupe;
        }

        public List<clsutilisateur_groupe> getAllClsutilisateur_groupe()
        {
            List<clsutilisateur_groupe> lstclsutilisateur_groupe = new List<clsutilisateur_groupe>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM utilisateur_groupe ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsutilisateur_groupe varclsutilisateur_groupe = null;
                        while (dr.Read())
                        {
                            varclsutilisateur_groupe = new clsutilisateur_groupe();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_groupe"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_groupe = int.Parse(dr["id_groupe"].ToString());
                            if (!dr["id_utilisateur"].ToString().Trim().Equals("")) varclsutilisateur_groupe.Id_utilisateur = int.Parse(dr["id_utilisateur"].ToString());
                            lstclsutilisateur_groupe.Add(varclsutilisateur_groupe);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsutilisateur_groupe;
        }

        public int insertClsutilisateur_groupe(clsutilisateur_groupe varclsutilisateur_groupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO utilisateur_groupe ( id_groupe,id_utilisateur ) VALUES (@id_groupe,@id_utilisateur )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_groupe", DbType.Int32, 4, varclsutilisateur_groupe.Id_groupe));
                    cmd.Parameters.Add(getParameter(cmd, "@id_utilisateur", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsutilisateur_groupe(clsutilisateur_groupe varclsutilisateur_groupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE utilisateur_groupe  SET id_groupe=@id_groupe,id_utilisateur=@id_utilisateur  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_groupe", DbType.Int32, 4, varclsutilisateur_groupe.Id_groupe));
                    cmd.Parameters.Add(getParameter(cmd, "@id_utilisateur", DbType.Int32, 4, varclsutilisateur_groupe.Id_utilisateur));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur_groupe.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsutilisateur_groupe(clsutilisateur_groupe varclsutilisateur_groupe)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM utilisateur_groupe  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsutilisateur_groupe.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSUTILISATEUR_GROUPE
        #region  CLSEVACUATION
        public clsevacuation getClsevacuation(object intid)
        {
            clsevacuation varclsevacuation = new clsevacuation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM evacuation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsevacuation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsevacuation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["dateevacuation"].ToString().Trim().Equals("")) varclsevacuation.Dateevacuation = DateTime.Parse(dr["dateevacuation"].ToString());
                            varclsevacuation.Motif = dr["motif"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsevacuation;
        }

        public List<clsevacuation> getAllClsevacuation(string criteria)
        {
            List<clsevacuation> lstclsevacuation = new List<clsevacuation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM evacuation  WHERE 1=1";
                    sql += "  OR   motif LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsevacuation varclsevacuation = null;
                        while (dr.Read())
                        {

                            varclsevacuation = new clsevacuation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsevacuation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsevacuation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["dateevacuation"].ToString().Trim().Equals("")) varclsevacuation.Dateevacuation = DateTime.Parse(dr["dateevacuation"].ToString());
                            varclsevacuation.Motif = dr["motif"].ToString();
                            lstclsevacuation.Add(varclsevacuation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsevacuation;
        }

        public List<clsevacuation> getAllClsevacuation()
        {
            List<clsevacuation> lstclsevacuation = new List<clsevacuation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM evacuation ORDER BY dateevacuation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsevacuation varclsevacuation = null;
                        while (dr.Read())
                        {

                            varclsevacuation = new clsevacuation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsevacuation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsevacuation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["dateevacuation"].ToString().Trim().Equals("")) varclsevacuation.Dateevacuation = DateTime.Parse(dr["dateevacuation"].ToString());
                            varclsevacuation.Motif = dr["motif"].ToString();
                            lstclsevacuation.Add(varclsevacuation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsevacuation;
        }

        public DataTable getAllClsevacuation1()
        {
            DataTable lstclsevacuation = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM evacuation ORDER BY dateevacuation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsevacuation.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsevacuation;
        }

        public int insertClsevacuation(clsevacuation varclsevacuation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO evacuation ( id_malade,dateevacuation,motif ) VALUES (@id_malade,@dateevacuation,@motif  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsevacuation.Id_malade));
                    if (varclsevacuation.Dateevacuation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateevacuation", DbType.DateTime, 8, varclsevacuation.Dateevacuation));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateevacuation", DbType.DateTime, 8, DBNull.Value));
                    if (varclsevacuation.Motif != null) cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 500, varclsevacuation.Motif));
                    else cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 500, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsevacuation(clsevacuation varclsevacuation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE evacuation  SET id_malade=@id_malade,dateevacuation=@dateevacuation,motif=@motif  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsevacuation.Id_malade));
                    if (varclsevacuation.Dateevacuation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateevacuation", DbType.DateTime, 8, varclsevacuation.Dateevacuation));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateevacuation", DbType.DateTime, 8, DBNull.Value));
                    if (varclsevacuation.Motif != null) cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 500, varclsevacuation.Motif));
                    else cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 500, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsevacuation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsevacuation(clsevacuation varclsevacuation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM evacuation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsevacuation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSEVACUATION
        #region  CLSMALADIE_EXAMEN
        public clsmaladie_examen getClsmaladie_examen(object intid)
        {
            clsmaladie_examen varclsmaladie_examen = new clsmaladie_examen();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladie_examen WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie_examen.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_examen = int.Parse(dr["id_examen"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmaladie_examen.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladie_examen;
        }

        public List<clsmaladie_examen> getAllClsmaladie_examen(string criteria)
        {
            List<clsmaladie_examen> lstclsmaladie_examen = new List<clsmaladie_examen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladie_examen  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladie_examen varclsmaladie_examen = null;
                        while (dr.Read())
                        {

                            varclsmaladie_examen = new clsmaladie_examen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie_examen.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_examen = int.Parse(dr["id_examen"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmaladie_examen.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmaladie_examen.Add(varclsmaladie_examen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie_examen;
        }

        public List<clsmaladie_examen> getAllClsmaladie_examen()
        {
            List<clsmaladie_examen> lstclsmaladie_examen = new List<clsmaladie_examen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladie_examen ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladie_examen varclsmaladie_examen = null;
                        while (dr.Read())
                        {

                            varclsmaladie_examen = new clsmaladie_examen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie_examen.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_examen = int.Parse(dr["id_examen"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmaladie_examen.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmaladie_examen.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmaladie_examen.Add(varclsmaladie_examen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie_examen;
        }

        public List<int> getAllIdmaladie_examen_operationlabo(int id_operation_laboratoire)
        {
            List<int> lstclsmaladie_examen = new List<int>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT maladie_examen.id AS id FROM maladie_examen
                    WHERE maladie_examen.id_operation_laboratoire=@id_operation_laboratoire";

                    cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 4, id_operation_laboratoire));

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclsmaladie_examen.Add(Convert.ToInt32(dr["id"].ToString()));
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie_examen;
        }

        public int insertClsmaladie_examen(clsmaladie_examen varclsmaladie_examen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO maladie_examen ( id_operation_laboratoire,id_examen,id_maladie,date ) VALUES (@id_operation_laboratoire,@id_examen,@id_maladie,@date  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 4, varclsmaladie_examen.Id_operation_laboratoire));
                    cmd.Parameters.Add(getParameter(cmd, "@id_examen", DbType.Int32, 4, varclsmaladie_examen.Id_examen));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 4, varclsmaladie_examen.Id_maladie));
                    if (varclsmaladie_examen.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladie_examen.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmaladie_examen(clsmaladie_examen varclsmaladie_examen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE maladie_examen  SET id_operation_laboratoire=@id_operation_laboratoire,id_examen=@id_examen,id_maladie=@id_maladie,date=@date  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 4, varclsmaladie_examen.Id_operation_laboratoire));
                    cmd.Parameters.Add(getParameter(cmd, "@id_examen", DbType.Int32, 4, varclsmaladie_examen.Id_examen));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 4, varclsmaladie_examen.Id_maladie));
                    if (varclsmaladie_examen.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladie_examen.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladie_examen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmaladie_examen(clsmaladie_examen varclsmaladie_examen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM maladie_examen  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladie_examen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMALADIE_EXAMEN 
        #region  CLSSUBIT
        public clssubit getClssubit(object intid)
        {
            clssubit varclssubit = new clssubit();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM subit WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclssubit.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssubit.Date = DateTime.Parse(dr["date"].ToString());
                            varclssubit.Observation = dr["observation"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssubit.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_intervention"].ToString().Trim().Equals("")) varclssubit.Id_intervention = int.Parse(dr["id_intervention"].ToString());
                            varclssubit.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssubit;
        }
        public clssubit getClssubit1(int ? id)
        {
            clssubit varclssubit = new clssubit();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM subit WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclssubit.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssubit.Date = DateTime.Parse(dr["date"].ToString());
                            varclssubit.Observation = dr["observation"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssubit.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_intervention"].ToString().Trim().Equals("")) varclssubit.Id_intervention = int.Parse(dr["id_intervention"].ToString());
                            varclssubit.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssubit;
        }

        public List<clssubit> getAllClssubit(string criteria)
        {
            List<clssubit> lstclssubit = new List<clssubit>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM subit  WHERE 1=1";
                    sql += "  OR   observation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clssubit varclssubit = null;
                        while (dr.Read())
                        {

                            varclssubit = new clssubit();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssubit.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssubit.Date = DateTime.Parse(dr["date"].ToString());
                            varclssubit.Observation = dr["observation"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssubit.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_intervention"].ToString().Trim().Equals("")) varclssubit.Id_intervention = int.Parse(dr["id_intervention"].ToString());
                            varclssubit.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclssubit.Add(varclssubit);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssubit;
        }

        public List<clssubit> getAllClssubit1(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clssubit> lstclssubit = new List<clssubit>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT subit.*,intervention.designation,intervention.prix  FROM subit INNER JOIN intervention ON intervention.id=subit.id_intervention WHERE id_malade='" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssubit varclssubit = null;
                        while (dr.Read())
                        {
                            varclssubit = new clssubit();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssubit.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssubit.Date = DateTime.Parse(dr["date"].ToString());
                            varclssubit.Observation = dr["observation"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssubit.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_intervention"].ToString().Trim().Equals("")) varclssubit.Id_intervention = int.Parse(dr["id_intervention"].ToString());
                            varclssubit.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclssubit.Date.ToString().Substring(0, 10);
                            varclssubit.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclssubit.Add(varclssubit);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssubit;
        }

        public List<clssubit> getAllClssubit()
        {
            List<clssubit> lstclssubit = new List<clssubit>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM subit ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clssubit varclssubit = null;
                        while (dr.Read())
                        {

                            varclssubit = new clssubit();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssubit.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssubit.Date = DateTime.Parse(dr["date"].ToString());
                            varclssubit.Observation = dr["observation"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssubit.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_intervention"].ToString().Trim().Equals("")) varclssubit.Id_intervention = int.Parse(dr["id_intervention"].ToString());
                            varclssubit.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclssubit.Add(varclssubit);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssubit;
        }

        public int insertClssubit(clssubit varclssubit)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO subit ( date,observation,id_malade,id_intervention,etatpaiement ) VALUES (@date,@observation,@id_malade,@id_intervention,@etatpaiement )");
                    if (varclssubit.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclssubit.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclssubit.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 2000, varclssubit.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 2000, DBNull.Value));
                    if (varclssubit.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssubit.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssubit.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_intervention", DbType.Int32, 4, varclssubit.Id_intervention));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClssubit(clssubit varclssubit)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE subit  SET date=@date,observation=@observation,id_malade=@id_malade,id_intervention=@id_intervention,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclssubit.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclssubit.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclssubit.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 2000, varclssubit.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 2000, DBNull.Value));
                    if (varclssubit.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssubit.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssubit.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_intervention", DbType.Int32, 4, varclssubit.Id_intervention));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssubit.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        public int updateClssubit(int ? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE subit SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE subit SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        public int deleteClssubit(clssubit varclssubit)
        {
            int i = 0, i1 = 0, i2 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_subit=@id_subit) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_subit", DbType.Int32, 4, varclssubit.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_subit=@id_subit ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_subit", DbType.Int32, 4, varclssubit.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM subit WHERE 1=1 AND id=@id_subit ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_subit", DbType.Int32, 4, varclssubit.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i2;
        }

        #endregion CLSSUBIT
        #region  CLSMALADEGROSSE
        public string generatenumeroregistremaladegrosse(int idPersonne)
        {
            string numero = "";
            string numeroMalade = this.generatenumeromalade(idPersonne);
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT count(id) AS nbrligne FROM maladegrosse");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (int.Parse(dr["nbrligne"].ToString()) == 0) numero = numeroMalade + "-1-" + DateTime.Today.Year.ToString().Substring(2, 2);
                            else numero = numeroMalade + "-" + Convert.ToString(int.Parse(dr["nbrligne"].ToString()) + 1) + "-" + DateTime.Today.Year.ToString().Substring(2, 2);
                        }
                        else numero = numeroMalade + "-1-" + DateTime.Today.Year.ToString().Substring(2, 2);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return numero;
        }

        public clsmaladegrosse getClsmaladegrosse3(string numMal)
        {
            clsmaladegrosse varclsmaladegrosse = new clsmaladegrosse();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM personne
                    INNER JOIN maladegrosse ON personne.id=maladegrosse.id_malade  
                    INNER JOIN malade on malade.id=maladegrosse.id_malade WHERE malade.numero='{0}'", numMal);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladegrosse;
        }

        public List<clsmaladegrosse> getAllClsmaladegrosse2(int criteria)
        {
            List<clsmaladegrosse> lstclsmaladegrosse = new List<clsmaladegrosse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne WHERE maladegrosse.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladegrosse varclsmaladegrosse = null;
                        if (dr.Read())
                        {
                            varclsmaladegrosse = new clsmaladegrosse();

                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                            lstclsmaladegrosse.Add(varclsmaladegrosse);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladegrosse;
        }

        public List<clsmaladegrosse> getAllClsmaladegrosse4(int criteria)
        {
            List<clsmaladegrosse> lstclsmaladegrosse = new List<clsmaladegrosse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne WHERE maladegrosse.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladegrosse varclsmaladegrosse = null;
                        if (dr.Read())
                        {
                            varclsmaladegrosse = new clsmaladegrosse();

                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            //varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            //varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                            lstclsmaladegrosse.Add(varclsmaladegrosse);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladegrosse;
        }

        public DataTable getAllClsmaladegrosse1()
        {
            DataTable lstclsmaladegrosse = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,malade.numero,personne.sexe,personne.etatcivil,personne.datenaissance,personne.adresse,personne.telephone,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmaladegrosse.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladegrosse;
        }

        public clsmaladegrosse getClsmaladegrosse(object intid)
        {
            clsmaladegrosse varclsmaladegrosse = new clsmaladegrosse();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne WHERE maladegrosse.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladegrosse;
        }

        public List<clsmaladegrosse> getAllClsmaladegrosse(string criteria)
        {
            List<clsmaladegrosse> lstclsmaladegrosse = new List<clsmaladegrosse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne WHERE 1=1";
                    sql += "  OR   maladegrosse.conjoin LIKE '%" + criteria + "%'";
                    sql += "  OR   maladegrosse.numeroregistre LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladegrosse varclsmaladegrosse = null;
                        while (dr.Read())
                        {
                            varclsmaladegrosse = new clsmaladegrosse();
                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                            lstclsmaladegrosse.Add(varclsmaladegrosse);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladegrosse;
        }

        public List<clsmaladegrosse> getAllClsmaladegrosse()
        {
            List<clsmaladegrosse> lstclsmaladegrosse = new List<clsmaladegrosse>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladegrosse.id AS idMalGros,maladegrosse.id_malade,maladegrosse.conjoin,maladegrosse.numeroregistre FROM maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade  
                    INNER JOIN personne on personne.id=malade.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladegrosse varclsmaladegrosse = null;
                        while (dr.Read())
                        {
                            varclsmaladegrosse = new clsmaladegrosse();
                            //MaladeGrosse
                            if (!dr["idMalGros"].ToString().Trim().Equals("")) varclsmaladegrosse.IdFemmeEnceinte = int.Parse(dr["idMalGros"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladegrosse.Id_malade = int.Parse(dr["id_malade"].ToString());
                            varclsmaladegrosse.Conjoin = dr["conjoin"].ToString();
                            varclsmaladegrosse.Numeroregistre = dr["numeroregistre"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladegrosse.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladegrosse.Nom = dr["nom"].ToString();
                            varclsmaladegrosse.Postnom = dr["postnom"].ToString();
                            varclsmaladegrosse.Prenom = dr["prenom"].ToString();
                            varclsmaladegrosse.Sexe = dr["sexe"].ToString();
                            varclsmaladegrosse.Etatcivil = dr["etatcivil"].ToString();
                            varclsmaladegrosse.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladegrosse.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladegrosse.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladegrosse.Photo = (Byte[])dr["photo"];
                            lstclsmaladegrosse.Add(varclsmaladegrosse);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladegrosse;
        }

        public int insertClsmaladegrosse(clsmaladegrosse varclsmaladegrosse)
        {
            int i = 0;
            try
            {
                string numRegistre = this.generatenumeroregistremaladegrosse(varclsmaladegrosse.Id_malade);
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string numeroMalade = "";
                    if (string.IsNullOrEmpty(clsDoTraitement.numeroMalade)) numeroMalade = this.generatenumeromalade(varclsmaladegrosse.Id_malade);
                    else numeroMalade = clsDoTraitement.numeroMalade;

                    cmd.CommandText = string.Format("INSERT INTO maladegrosse ( id_malade,conjoin,numeroregistre ) VALUES (@id_malade,@conjoin,@numeroregistre  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmaladegrosse.Id_malade));
                    if (varclsmaladegrosse.Conjoin != null) cmd.Parameters.Add(getParameter(cmd, "@conjoin", DbType.String, 100, varclsmaladegrosse.Conjoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@conjoin", DbType.String, 100, DBNull.Value));
                    if (varclsmaladegrosse.Numeroregistre != null) cmd.Parameters.Add(getParameter(cmd, "@numeroregistre", DbType.String, 30, numRegistre));
                    else cmd.Parameters.Add(getParameter(cmd, "@numeroregistre", DbType.String, 30, numRegistre));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmaladegrosse(clsmaladegrosse varclsmaladegrosse)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE maladegrosse  SET id_categoriemalade=@id_categoriemalade,id_etablissement=@id_etablissement,id_airsante=@id_airsante,id_profession=@id_profession,id_personne=@id_personne,numero=@numero,conjoin=@conjoin,numeroregistre=@numeroregistre,prix=@prix  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmaladegrosse.Id_malade));
                    if (varclsmaladegrosse.Conjoin != null) cmd.Parameters.Add(getParameter(cmd, "@conjoin", DbType.String, 100, varclsmaladegrosse.Conjoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@conjoin", DbType.String, 100, DBNull.Value));
                    if (varclsmaladegrosse.Numeroregistre != null) cmd.Parameters.Add(getParameter(cmd, "@numeroregistre", DbType.String, 30, varclsmaladegrosse.Numeroregistre));
                    else cmd.Parameters.Add(getParameter(cmd, "@numeroregistre", DbType.String, 30, varclsmaladegrosse.Numeroregistre));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladegrosse.IdFemmeEnceinte));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmaladegrosse(clsmaladegrosse varclsmaladegrosse)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM maladegrosse  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladegrosse.IdFemmeEnceinte));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMALADEGROSSE
        #region  CLSLIVRAISON
        public clslivraison getClslivraison(object intid)
        {
            clslivraison varclslivraison = new clslivraison();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("select livraison.*,article.desination from livraison INNER JOIN article ON article.id=livraison.id_article WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclslivraison.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclslivraison.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclslivraison.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["puAchat"].ToString().Trim().Equals("")) varclslivraison.Puachat = Math.Round(double.Parse(dr["puAchat"].ToString()),2);
                            if (!dr["dateexpiration"].ToString().Trim().Equals("")) varclslivraison.Dateexpiration = DateTime.Parse(dr["dateexpiration"].ToString());
                            if (!dr["id_fournisseur"].ToString().Trim().Equals("")) varclslivraison.Id_fournisseur = int.Parse(dr["id_fournisseur"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclslivraison.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_conditionnement"].ToString().Trim().Equals("")) varclslivraison.Id_conditionnement = int.Parse(dr["id_conditionnement"].ToString());
                            if (!dr["stock_out"].ToString().Trim().Equals("")) varclslivraison.Stock_out = int.Parse(dr["stock_out"].ToString());
                            varclslivraison.Designation = dr["desination"].ToString().Trim() ;
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclslivraison;
        }

        public List<clslivraison> getAllClslivraison(string criteria)
        {
            List<clslivraison> lstclslivraison = new List<clslivraison>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "select livraison.*,article.desination from livraison INNER JOIN article ON article.id=livraison.id_article  WHERE 1=1";
                    sql += "  OR   conditionnement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslivraison varclslivraison = null;
                        while (dr.Read())
                        {
                            varclslivraison = new clslivraison();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslivraison.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclslivraison.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclslivraison.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["puAchat"].ToString().Trim().Equals("")) varclslivraison.Puachat = Math.Round(double.Parse(dr["puAchat"].ToString()),2);
                            if (!dr["dateexpiration"].ToString().Trim().Equals("")) varclslivraison.Dateexpiration = DateTime.Parse(dr["dateexpiration"].ToString());
                            if (!dr["id_fournisseur"].ToString().Trim().Equals("")) varclslivraison.Id_fournisseur = int.Parse(dr["id_fournisseur"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclslivraison.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_conditionnement"].ToString().Trim().Equals("")) varclslivraison.Id_conditionnement = int.Parse(dr["id_conditionnement"].ToString());
                            if (!dr["stock_out"].ToString().Trim().Equals("")) varclslivraison.Stock_out = int.Parse(dr["stock_out"].ToString());
                            varclslivraison.Designation = dr["desination"].ToString().Trim();
                            lstclslivraison.Add(varclslivraison);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclslivraison;
        }

        public List<clslivraison> getAllClslivraison()
        {
            List<clslivraison> lstclslivraison = new List<clslivraison>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT livraison.*,article.desination from livraison INNER JOIN article ON article.id=livraison.id_article");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslivraison varclslivraison = null;
                        while (dr.Read())
                        {
                            varclslivraison = new clslivraison();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslivraison.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclslivraison.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclslivraison.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["puAchat"].ToString().Trim().Equals("")) varclslivraison.Puachat = Math.Round(double.Parse(dr["puAchat"].ToString()), 2);
                            if (!dr["dateexpiration"].ToString().Trim().Equals("")) varclslivraison.Dateexpiration = DateTime.Parse(dr["dateexpiration"].ToString());
                            if (!dr["id_fournisseur"].ToString().Trim().Equals("")) varclslivraison.Id_fournisseur = int.Parse(dr["id_fournisseur"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclslivraison.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_conditionnement"].ToString().Trim().Equals("")) varclslivraison.Id_conditionnement = int.Parse(dr["id_conditionnement"].ToString());
                            if (!dr["stock_out"].ToString().Trim().Equals("")) varclslivraison.Stock_out = int.Parse(dr["stock_out"].ToString());
                            varclslivraison.Designation = dr["desination"].ToString().Trim();
                            lstclslivraison.Add(varclslivraison);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclslivraison;
        }

        public List<clslivraison> getAllClslivraison2(string date_jour)
        {
            List<clslivraison> lstclslivraison = new List<clslivraison>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT livraison.*,article.desination from livraison INNER JOIN article ON article.id=livraison.id_article WHERE convert(date,date,100)='" + date_jour.ToString() + "'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clslivraison varclslivraison = null;
                        while (dr.Read())
                        {
                            varclslivraison = new clslivraison();
                            if (!dr["id"].ToString().Trim().Equals("")) varclslivraison.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclslivraison.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclslivraison.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["puAchat"].ToString().Trim().Equals("")) varclslivraison.Puachat = Math.Round(double.Parse(dr["puAchat"].ToString()),2);
                            if (!dr["dateexpiration"].ToString().Trim().Equals("")) varclslivraison.Dateexpiration = DateTime.Parse(dr["dateexpiration"].ToString());
                            if (!dr["id_fournisseur"].ToString().Trim().Equals("")) varclslivraison.Id_fournisseur = int.Parse(dr["id_fournisseur"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclslivraison.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_conditionnement"].ToString().Trim().Equals("")) varclslivraison.Id_conditionnement = int.Parse(dr["id_conditionnement"].ToString());
                            if (!dr["stock_out"].ToString().Trim().Equals("")) varclslivraison.Stock_out = int.Parse(dr["stock_out"].ToString());
                            varclslivraison.Designation = dr["desination"].ToString().Trim();
                            lstclslivraison.Add(varclslivraison);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclslivraison;
        }

        public double recalculateStock(int id, IDbConnection connection, IDbTransaction transaction)
        {
            double valStock = 0;
            IDbCommand cmd2 = connection.CreateCommand();
            cmd2.CommandText = "SELECT stock FROM article WHERE id=@id";
            cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Single, 4, id));
            cmd2.Transaction = transaction;
            IDataReader rd = cmd2.ExecuteReader();
            if (rd.Read()) valStock = double.Parse(rd["stock"].ToString());
            rd.Dispose();
            cmd2.Dispose();
            return valStock;
        }

        public int insertClslivraison(clslivraison varclslivraison)
        {
            int i = 0, i1 = 0;
            double stock = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                //Recuperation de l'ancienne valeur du stock
                stock = recalculateStock(varclslivraison.Id_article, conn, transaction) + (double)varclslivraison.Quantinte;
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclslivraison.Date.HasValue) { }
                    else date = varclslivraison.Date;

                    cmd.CommandText = string.Format("INSERT INTO livraison ( date,quantinte,puAchat,dateexpiration,id_fournisseur,id_article,id_conditionnement,stock_out ) VALUES (@date,@quantinte,@puAchat,@dateexpiration,@id_fournisseur,@id_article,@id_conditionnement,@stock_out  )");
                    if (varclslivraison.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    dateMAJAppro = date;
                    if (varclslivraison.Quantinte.HasValue)
                    {
                        if (varclslivraison.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclslivraison.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide"); //cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    if (varclslivraison.Puachat.HasValue)
                    {
                        if (varclslivraison.Puachat <= 0) throw new Exception("Le prix unitaire d'achat est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@puAchat", DbType.Single, 4, varclslivraison.Puachat));
                    }
                    else throw new Exception("Le prix unitaire d'achat est invalide");//cmd.Parameters.Add(getParameter(cmd, "@puAchat", DbType.Single, 4, DBNull.Value));
                    if (varclslivraison.Dateexpiration.HasValue)
                    {
                        if (varclslivraison.Dateexpiration.Value <= DateTime.Today) throw new Exception("La date de péremtion ne peut être inférieure ou égal à la date du jour");
                        else cmd.Parameters.Add(getParameter(cmd, "@dateexpiration", DbType.DateTime, 8, varclslivraison.Dateexpiration));
                    }
                    else throw new Exception("La date de péremtion ne peut être inférieure ou égal à la date du jour");//cmd.Parameters.Add(getParameter(cmd, "@dateexpiration", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_fournisseur", DbType.Int32, 4, varclslivraison.Id_fournisseur));
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclslivraison.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@id_conditionnement", DbType.Int32, 4, varclslivraison.Id_conditionnement));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_out", DbType.Int32, 4, (stock)));

                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();


                    //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'article choisi
                    //Mis a jour du Stock de l'article dont on a add la livraison
                    //stock = recalculateStock(varclslivraison.Id_article, conn, transaction) + (double)varclslivraison.Quantinte;
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                        //if (varclsarticle.Stock.HasValue) 
                        cmd1.Parameters.Add(getParameter(cmd1, "@stock", DbType.Single, 4, stock));
                        //else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                        cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclslivraison.Id_article));
                        cmd1.Transaction = transaction;
                        i1 = cmd1.ExecuteNonQuery();
                        transaction.Commit();
                    }
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de l'enregistrement, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClslivraison(clslivraison varclslivraison)
        {
            int i = 0, i1 = 0;
            double stock = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                //Recuperation du stock avec recalcul avant insertion dans livraison
                double tmp = recalculateStock(varclslivraison.Id_article, conn, transaction);
                stock = tmp - clsDoTraitement.oldValueStockModifie + (double)varclslivraison.Quantinte;
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclslivraison.Date.HasValue) { }
                    else date = varclslivraison.Date;

                    cmd.CommandText = string.Format("UPDATE livraison  SET date=@date,quantinte=@quantinte,puAchat=@puAchat,dateexpiration=@dateexpiration,id_fournisseur=@id_fournisseur,id_article=@id_article,id_conditionnement=@id_conditionnement,stock_out=@stock_out  WHERE 1=1  AND id=@id ");
                    if (varclslivraison.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    dateMAJAppro = date;
                    if (varclslivraison.Quantinte.HasValue)
                    {
                        if (varclslivraison.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclslivraison.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide"); //cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    if (varclslivraison.Puachat.HasValue)
                    {
                        if (varclslivraison.Puachat <= 0) throw new Exception("Le prix unitaire d'achat est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@puAchat", DbType.Single, 4, varclslivraison.Puachat));
                    }
                    else throw new Exception("Le prix unitaire d'achat est invalide");//cmd.Parameters.Add(getParameter(cmd, "@puAchat", DbType.Single, 4, DBNull.Value));
                    if (varclslivraison.Dateexpiration.HasValue)
                    {
                        if (varclslivraison.Dateexpiration.Value <= DateTime.Today) throw new Exception("La date de péremtion ne peut être inférieure ou égal à la date du jour");
                        else cmd.Parameters.Add(getParameter(cmd, "@dateexpiration", DbType.DateTime, 8, varclslivraison.Dateexpiration));
                    }
                    else throw new Exception("La date de péremtion ne peut être inférieure ou égal à la date du jour");//cmd.Parameters.Add(getParameter(cmd, "@dateexpiration", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_fournisseur", DbType.Int32, 4, varclslivraison.Id_fournisseur));
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclslivraison.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@id_conditionnement", DbType.Int32, 4, varclslivraison.Id_conditionnement));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_out", DbType.Int32, 4, stock));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclslivraison.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();

                    //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'artcle choisi
                    //Mis a jour du Stock de l'article dont on a add la livraison
                    //double temp = recalculateStock(varclslivraison.Id_article, conn, transaction);
                    //stock = temp - clsDoTraitement.oldValueStockModifie + (double)varclslivraison.Quantinte;
                    if (stock < 0) throw new Exception("Modification invalide pour la quantité entré par rapport à celle en stock");
                    else
                    {
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                            //if (varclsarticle.Stock.HasValue) 
                            cmd1.Parameters.Add(getParameter(cmd1, "@stock", DbType.Single, 4, stock));
                            //else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                            cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclslivraison.Id_article));
                            cmd1.Transaction = transaction;
                            i1 = cmd1.ExecuteNonQuery();
                            transaction.Commit();
                        }
                    }
                    clsDoTraitement.oldValueStockModifie = 0;
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la modification, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int deleteClslivraison(clslivraison varclslivraison)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM livraison  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclslivraison.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSLIVRAISON 
        #region  CLSAVORTEMENT
        public clsavortement getClsavortement(object intid)
        {
            clsavortement varclsavortement = new clsavortement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM avortement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsavortement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsavortement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsavortement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsavortement;
        }

        public List<clsavortement> getAllClsavortement(string criteria)
        {
            List<clsavortement> lstclsavortement = new List<clsavortement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM avortement  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsavortement varclsavortement = null;
                        while (dr.Read())
                        {
                            varclsavortement = new clsavortement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsavortement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsavortement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsavortement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            lstclsavortement.Add(varclsavortement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsavortement;
        }

        public List<clsavortement> getAllClsavortement()
        {
            List<clsavortement> lstclsavortement = new List<clsavortement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM avortement ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsavortement varclsavortement = null;
                        while (dr.Read())
                        {

                            varclsavortement = new clsavortement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsavortement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsavortement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsavortement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            lstclsavortement.Add(varclsavortement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsavortement;
        }

        public List<clsavortement> getAllClsavortement1(int criteria)
        {
            List<clsavortement> lstclsavortement = new List<clsavortement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM avortement  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsavortement varclsavortement = null;
                        while (dr.Read())
                        {
                            varclsavortement = new clsavortement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsavortement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsavortement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsavortement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            lstclsavortement.Add(varclsavortement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsavortement;
        }

        public List<clsavortement> getAllClsavortement3(int criteria)
        {
            List<clsavortement> lstclsavortement = new List<clsavortement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT *  FROM avortement 
                    INNER JOIN maladegrosse ON maladegrosse.id=avortement.id_maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade WHERE avortement.id_maladegrosse=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsavortement varclsavortement = null;
                        while (dr.Read())
                        {
                            varclsavortement = new clsavortement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsavortement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsavortement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsavortement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            lstclsavortement.Add(varclsavortement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsavortement;
        }

        public int insertClsavortement(clsavortement varclsavortement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO avortement ( date,id_maladegrosse ) VALUES (@date,@id_maladegrosse  )");
                    if (varclsavortement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsavortement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsavortement.Id_maladegrosse));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsavortement(clsavortement varclsavortement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE avortement  SET date=@date,id_maladegrosse=@id_maladegrosse  WHERE 1=1  AND id=@id ");
                    if (varclsavortement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsavortement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsavortement.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsavortement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsavortement(clsavortement varclsavortement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM avortement  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsavortement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSAVORTEMENT
        #region  CLSDELIVRANCE
        public clsdelivrance getClsdelivrance(object intid)
        {
            clsdelivrance varclsdelivrance = new clsdelivrance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM delivrance WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdelivrance.Id = int.Parse(dr["id"].ToString());
                            varclsdelivrance.Ocyticine10uim = dr["ocyticine10uim"].ToString();
                            if (!dr["tractioncontroleducordon"].ToString().Trim().Equals("")) varclsdelivrance.Tractioncontroleducordon = bool.Parse(dr["tractioncontroleducordon"].ToString());
                            if (!dr["massageuterinapredelivrance"].ToString().Trim().Equals("")) varclsdelivrance.Massageuterinapredelivrance = bool.Parse(dr["massageuterinapredelivrance"].ToString());
                            if (!dr["delivranceartificiel"].ToString().Trim().Equals("")) varclsdelivrance.Delivranceartificiel = DateTime.Parse(dr["delivranceartificiel"].ToString());
                            varclsdelivrance.Plancenta = dr["plancenta"].ToString();
                            varclsdelivrance.Aspect = dr["aspect"].ToString();
                            varclsdelivrance.Membranes = dr["membranes"].ToString();
                            varclsdelivrance.Hemoragie = dr["hemoragie"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdelivrance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsdelivrance.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdelivrance;
        }

        public List<clsdelivrance> getAllClsdelivrance(string criteria)
        {
            List<clsdelivrance> lstclsdelivrance = new List<clsdelivrance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM delivrance  WHERE 1=1";
                    sql += "  OR   ocyticine10uim LIKE '%" + criteria + "%'";
                    sql += "  OR   plancenta LIKE '%" + criteria + "%'";
                    sql += "  OR   aspect LIKE '%" + criteria + "%'";
                    sql += "  OR   membranes LIKE '%" + criteria + "%'";
                    sql += "  OR   hemoragie LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdelivrance varclsdelivrance = null;
                        while (dr.Read())
                        {

                            varclsdelivrance = new clsdelivrance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdelivrance.Id = int.Parse(dr["id"].ToString());
                            varclsdelivrance.Ocyticine10uim = dr["ocyticine10uim"].ToString();
                            if (!dr["tractioncontroleducordon"].ToString().Trim().Equals("")) varclsdelivrance.Tractioncontroleducordon = bool.Parse(dr["tractioncontroleducordon"].ToString());
                            if (!dr["massageuterinapredelivrance"].ToString().Trim().Equals("")) varclsdelivrance.Massageuterinapredelivrance = bool.Parse(dr["massageuterinapredelivrance"].ToString());
                            if (!dr["delivranceartificiel"].ToString().Trim().Equals("")) varclsdelivrance.Delivranceartificiel = DateTime.Parse(dr["delivranceartificiel"].ToString());
                            varclsdelivrance.Plancenta = dr["plancenta"].ToString();
                            varclsdelivrance.Aspect = dr["aspect"].ToString();
                            varclsdelivrance.Membranes = dr["membranes"].ToString();
                            varclsdelivrance.Hemoragie = dr["hemoragie"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdelivrance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsdelivrance.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            lstclsdelivrance.Add(varclsdelivrance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdelivrance;
        }

        public List<clsdelivrance> getAllClsdelivrance2(int criteria)
        {
            List<clsdelivrance> lstclsdelivrance = new List<clsdelivrance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM delivrance  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdelivrance varclsdelivrance = null;
                        while (dr.Read())
                        {
                            varclsdelivrance = new clsdelivrance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdelivrance.Id = int.Parse(dr["id"].ToString());
                            varclsdelivrance.Ocyticine10uim = dr["ocyticine10uim"].ToString();
                            if (!dr["tractioncontroleducordon"].ToString().Trim().Equals("")) varclsdelivrance.Tractioncontroleducordon = bool.Parse(dr["tractioncontroleducordon"].ToString());
                            if (!dr["massageuterinapredelivrance"].ToString().Trim().Equals("")) varclsdelivrance.Massageuterinapredelivrance = bool.Parse(dr["massageuterinapredelivrance"].ToString());
                            if (!dr["delivranceartificiel"].ToString().Trim().Equals("")) varclsdelivrance.Delivranceartificiel = DateTime.Parse(dr["delivranceartificiel"].ToString());
                            varclsdelivrance.Plancenta = dr["plancenta"].ToString();
                            varclsdelivrance.Aspect = dr["aspect"].ToString();
                            varclsdelivrance.Membranes = dr["membranes"].ToString();
                            varclsdelivrance.Hemoragie = dr["hemoragie"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdelivrance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsdelivrance.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            lstclsdelivrance.Add(varclsdelivrance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdelivrance;
        }

        public List<clsdelivrance> getAllClsdelivrance3(int criteria)
        {
            List<clsdelivrance> lstclsdelivrance = new List<clsdelivrance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT *  FROM delivrance 
                    INNER JOIN maladegrosse ON maladegrosse.id=delivrance.id_maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade WHERE delivrance.id_maladegrosse=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdelivrance varclsdelivrance = null;
                        while (dr.Read())
                        {
                            varclsdelivrance = new clsdelivrance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdelivrance.Id = int.Parse(dr["id"].ToString());
                            varclsdelivrance.Ocyticine10uim = dr["ocyticine10uim"].ToString();
                            if (!dr["tractioncontroleducordon"].ToString().Trim().Equals("")) varclsdelivrance.Tractioncontroleducordon = bool.Parse(dr["tractioncontroleducordon"].ToString());
                            if (!dr["massageuterinapredelivrance"].ToString().Trim().Equals("")) varclsdelivrance.Massageuterinapredelivrance = bool.Parse(dr["massageuterinapredelivrance"].ToString());
                            if (!dr["delivranceartificiel"].ToString().Trim().Equals("")) varclsdelivrance.Delivranceartificiel = DateTime.Parse(dr["delivranceartificiel"].ToString());
                            varclsdelivrance.Plancenta = dr["plancenta"].ToString();
                            varclsdelivrance.Aspect = dr["aspect"].ToString();
                            varclsdelivrance.Membranes = dr["membranes"].ToString();
                            varclsdelivrance.Hemoragie = dr["hemoragie"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdelivrance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsdelivrance.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            lstclsdelivrance.Add(varclsdelivrance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdelivrance;
        }

        public List<clsdelivrance> getAllClsdelivrance()
        {
            List<clsdelivrance> lstclsdelivrance = new List<clsdelivrance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM delivrance ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdelivrance varclsdelivrance = null;
                        while (dr.Read())
                        {

                            varclsdelivrance = new clsdelivrance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdelivrance.Id = int.Parse(dr["id"].ToString());
                            varclsdelivrance.Ocyticine10uim = dr["ocyticine10uim"].ToString();
                            if (!dr["tractioncontroleducordon"].ToString().Trim().Equals("")) varclsdelivrance.Tractioncontroleducordon = bool.Parse(dr["tractioncontroleducordon"].ToString());
                            if (!dr["massageuterinapredelivrance"].ToString().Trim().Equals("")) varclsdelivrance.Massageuterinapredelivrance = bool.Parse(dr["massageuterinapredelivrance"].ToString());
                            if (!dr["delivranceartificiel"].ToString().Trim().Equals("")) varclsdelivrance.Delivranceartificiel = DateTime.Parse(dr["delivranceartificiel"].ToString());
                            varclsdelivrance.Plancenta = dr["plancenta"].ToString();
                            varclsdelivrance.Aspect = dr["aspect"].ToString();
                            varclsdelivrance.Membranes = dr["membranes"].ToString();
                            varclsdelivrance.Hemoragie = dr["hemoragie"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdelivrance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsdelivrance.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            lstclsdelivrance.Add(varclsdelivrance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdelivrance;
        }

        public int insertClsdelivrance(clsdelivrance varclsdelivrance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string valueGet1 = "", valueGet2 = "";
                    if (string.IsNullOrEmpty(varclsdelivrance.Plancenta)) valueGet1 = "Complet";
                    else valueGet1 = varclsdelivrance.Plancenta;
                    if (string.IsNullOrEmpty(varclsdelivrance.Membranes)) valueGet2 = "Complet";
                    else valueGet2 = varclsdelivrance.Membranes;

                    cmd.CommandText = string.Format("INSERT INTO delivrance ( ocyticine10uim,tractioncontroleducordon,massageuterinapredelivrance,delivranceartificiel,plancenta,aspect,membranes,hemoragie,date,id_maladeGrosse ) VALUES (@ocyticine10uim,@tractioncontroleducordon,@massageuterinapredelivrance,@delivranceartificiel,@plancenta,@aspect,@membranes,@hemoragie,@date,@id_maladeGrosse  )");
                    if (varclsdelivrance.Ocyticine10uim != null) cmd.Parameters.Add(getParameter(cmd, "@ocyticine10uim", DbType.String, 50, varclsdelivrance.Ocyticine10uim));
                    else cmd.Parameters.Add(getParameter(cmd, "@ocyticine10uim", DbType.String, 50, DBNull.Value));
                    if (varclsdelivrance.Tractioncontroleducordon.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tractioncontroleducordon", DbType.Boolean, 2, varclsdelivrance.Tractioncontroleducordon));
                    else cmd.Parameters.Add(getParameter(cmd, "@tractioncontroleducordon", DbType.Boolean, 2, DBNull.Value));
                    if (varclsdelivrance.Massageuterinapredelivrance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@massageuterinapredelivrance", DbType.Boolean, 2, varclsdelivrance.Massageuterinapredelivrance));
                    else cmd.Parameters.Add(getParameter(cmd, "@massageuterinapredelivrance", DbType.Boolean, 2, DBNull.Value));
                    if (varclsdelivrance.Delivranceartificiel.HasValue) cmd.Parameters.Add(getParameter(cmd, "@delivranceartificiel", DbType.DateTime, 8, varclsdelivrance.Delivranceartificiel));
                    else cmd.Parameters.Add(getParameter(cmd, "@delivranceartificiel", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdelivrance.Plancenta != null) cmd.Parameters.Add(getParameter(cmd, "@plancenta", DbType.String, 100, valueGet1));
                    else cmd.Parameters.Add(getParameter(cmd, "@plancenta", DbType.String, 100, "Complet"));
                    if (varclsdelivrance.Aspect != null) cmd.Parameters.Add(getParameter(cmd, "@aspect", DbType.String, 100, varclsdelivrance.Aspect));
                    else cmd.Parameters.Add(getParameter(cmd, "@aspect", DbType.String, 100, DBNull.Value));
                    if (varclsdelivrance.Membranes != null) cmd.Parameters.Add(getParameter(cmd, "@membranes", DbType.String, 200, valueGet2));
                    else cmd.Parameters.Add(getParameter(cmd, "@membranes", DbType.String, 200, "Complet"));
                    if (varclsdelivrance.Hemoragie != null) cmd.Parameters.Add(getParameter(cmd, "@hemoragie", DbType.String, 100, varclsdelivrance.Hemoragie));
                    else cmd.Parameters.Add(getParameter(cmd, "@hemoragie", DbType.String, 100, DBNull.Value));
                    if (varclsdelivrance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdelivrance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeGrosse", DbType.Int32, 4, varclsdelivrance.Id_maladegrosse));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdelivrance(clsdelivrance varclsdelivrance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string valueGet1 = "", valueGet2 = "";
                    if (string.IsNullOrEmpty(varclsdelivrance.Plancenta)) valueGet1 = "Complet";
                    else valueGet1 = varclsdelivrance.Plancenta;
                    if (string.IsNullOrEmpty(varclsdelivrance.Membranes)) valueGet2 = "Complet";
                    else valueGet2 = varclsdelivrance.Membranes;

                    cmd.CommandText = string.Format("UPDATE delivrance  SET ocyticine10uim=@ocyticine10uim,tractioncontroleducordon=@tractioncontroleducordon,massageuterinapredelivrance=@massageuterinapredelivrance,delivranceartificiel=@delivranceartificiel,plancenta=@plancenta,aspect=@aspect,membranes=@membranes,hemoragie=@hemoragie,date=@date,id_maladeGrosse=@id_maladeGrosse  WHERE 1=1  AND id=@id ");
                    if (varclsdelivrance.Ocyticine10uim != null) cmd.Parameters.Add(getParameter(cmd, "@ocyticine10uim", DbType.String, 50, varclsdelivrance.Ocyticine10uim));
                    else cmd.Parameters.Add(getParameter(cmd, "@ocyticine10uim", DbType.String, 50, DBNull.Value));
                    if (varclsdelivrance.Tractioncontroleducordon.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tractioncontroleducordon", DbType.Boolean, 2, varclsdelivrance.Tractioncontroleducordon));
                    else cmd.Parameters.Add(getParameter(cmd, "@tractioncontroleducordon", DbType.Boolean, 2, DBNull.Value));
                    if (varclsdelivrance.Massageuterinapredelivrance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@massageuterinapredelivrance", DbType.Boolean, 2, varclsdelivrance.Massageuterinapredelivrance));
                    else cmd.Parameters.Add(getParameter(cmd, "@massageuterinapredelivrance", DbType.Boolean, 2, DBNull.Value));
                    if (varclsdelivrance.Delivranceartificiel.HasValue) cmd.Parameters.Add(getParameter(cmd, "@delivranceartificiel", DbType.DateTime, 8, varclsdelivrance.Delivranceartificiel));
                    else cmd.Parameters.Add(getParameter(cmd, "@delivranceartificiel", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdelivrance.Plancenta != null) cmd.Parameters.Add(getParameter(cmd, "@plancenta", DbType.String, 100, valueGet1));
                    else cmd.Parameters.Add(getParameter(cmd, "@plancenta", DbType.String, 100, "Complet"));
                    if (varclsdelivrance.Aspect != null) cmd.Parameters.Add(getParameter(cmd, "@aspect", DbType.String, 100, varclsdelivrance.Aspect));
                    else cmd.Parameters.Add(getParameter(cmd, "@aspect", DbType.String, 100, DBNull.Value));
                    if (varclsdelivrance.Membranes != null) cmd.Parameters.Add(getParameter(cmd, "@membranes", DbType.String, 200, valueGet2));
                    else cmd.Parameters.Add(getParameter(cmd, "@membranes", DbType.String, 200, "Complet"));
                    if (varclsdelivrance.Hemoragie != null) cmd.Parameters.Add(getParameter(cmd, "@hemoragie", DbType.String, 100, varclsdelivrance.Hemoragie));
                    else cmd.Parameters.Add(getParameter(cmd, "@hemoragie", DbType.String, 100, DBNull.Value));
                    if (varclsdelivrance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdelivrance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeGrosse", DbType.Int32, 4, varclsdelivrance.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdelivrance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdelivrance(clsdelivrance varclsdelivrance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM delivrance  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdelivrance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSDELIVRANCE
        #region  CLSCONSULTATIONPRENATAL
        public clsconsultationprenatal getClsconsultationprenatal(object intid)
        {
            clsconsultationprenatal varclsconsultationprenatal = new clsconsultationprenatal();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultationprenatal WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclsconsultationprenatal.Ddr = dr["ddr"].ToString();
                            varclsconsultationprenatal.Drp = dr["drp"].ToString();
                            varclsconsultationprenatal.Entecedent = dr["entecedent"].ToString();
                            varclsconsultationprenatal.Motif = dr["motif"].ToString();
                            varclsconsultationprenatal.Historiquegrossesse = dr["historiqueGrossesse"].ToString();
                            varclsconsultationprenatal.Gropesanguin = dr["gropeSanguin"].ToString();
                            varclsconsultationprenatal.Rh = dr["rh"].ToString();
                            varclsconsultationprenatal.Gesttte = dr["gesttte"].ToString();
                            varclsconsultationprenatal.Parite = dr["parite"].ToString();
                            varclsconsultationprenatal.Statuthemoglobique = dr["statuthemoglobique"].ToString();
                            if (!dr["conseiller"].ToString().Trim().Equals("")) varclsconsultationprenatal.Conseiller = bool.Parse(dr["conseiller"].ToString());
                            if (!dr["testee"].ToString().Trim().Equals("")) varclsconsultationprenatal.Testee = bool.Parse(dr["testee"].ToString());
                            if (!dr["oedeme"].ToString().Trim().Equals("")) varclsconsultationprenatal.Oedeme = bool.Parse(dr["oedeme"].ToString());
                            varclsconsultationprenatal.Conjoctivepalpebrale = dr["conjoctivepalpebrale"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultationprenatal.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsconsultationprenatal.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsconsultationprenatal.Temperature = double.Parse(dr["temperature"].ToString());
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pressionarterielle = double.Parse(dr["pressionArterielle"].ToString());
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsconsultationprenatal.Taille = double.Parse(dr["taille"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultationprenatal;
        }

        public List<clsconsultationprenatal> getAllClsconsultationprenatal(string criteria)
        {
            List<clsconsultationprenatal> lstclsconsultationprenatal = new List<clsconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultationprenatal  WHERE 1=1";
                    sql += "  OR   ddr LIKE '%" + criteria + "%'";
                    sql += "  OR   drp LIKE '%" + criteria + "%'";
                    sql += "  OR   entecedent LIKE '%" + criteria + "%'";
                    sql += "  OR   motif LIKE '%" + criteria + "%'";
                    sql += "  OR   historiqueGrossesse LIKE '%" + criteria + "%'";
                    sql += "  OR   gropeSanguin LIKE '%" + criteria + "%'";
                    sql += "  OR   rh LIKE '%" + criteria + "%'";
                    sql += "  OR   gesttte LIKE '%" + criteria + "%'";
                    sql += "  OR   parite LIKE '%" + criteria + "%'";
                    sql += "  OR   statuthemoglobique LIKE '%" + criteria + "%'";
                    sql += "  OR   conjoctivepalpebrale LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultationprenatal varclsconsultationprenatal = null;
                        while (dr.Read())
                        {
                            varclsconsultationprenatal = new clsconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclsconsultationprenatal.Ddr = dr["ddr"].ToString();
                            varclsconsultationprenatal.Drp = dr["drp"].ToString();
                            varclsconsultationprenatal.Entecedent = dr["entecedent"].ToString();
                            varclsconsultationprenatal.Motif = dr["motif"].ToString();
                            varclsconsultationprenatal.Historiquegrossesse = dr["historiqueGrossesse"].ToString();
                            varclsconsultationprenatal.Gropesanguin = dr["gropeSanguin"].ToString();
                            varclsconsultationprenatal.Rh = dr["rh"].ToString();
                            varclsconsultationprenatal.Gesttte = dr["gesttte"].ToString();
                            varclsconsultationprenatal.Parite = dr["parite"].ToString();
                            varclsconsultationprenatal.Statuthemoglobique = dr["statuthemoglobique"].ToString();
                            if (!dr["conseiller"].ToString().Trim().Equals("")) varclsconsultationprenatal.Conseiller = bool.Parse(dr["conseiller"].ToString());
                            if (!dr["testee"].ToString().Trim().Equals("")) varclsconsultationprenatal.Testee = bool.Parse(dr["testee"].ToString());
                            if (!dr["oedeme"].ToString().Trim().Equals("")) varclsconsultationprenatal.Oedeme = bool.Parse(dr["oedeme"].ToString());
                            varclsconsultationprenatal.Conjoctivepalpebrale = dr["conjoctivepalpebrale"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultationprenatal.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsconsultationprenatal.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsconsultationprenatal.Temperature = double.Parse(dr["temperature"].ToString());
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pressionarterielle = double.Parse(dr["pressionArterielle"].ToString());
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsconsultationprenatal.Taille = double.Parse(dr["taille"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            lstclsconsultationprenatal.Add(varclsconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationprenatal;
        }

        public List<clsconsultationprenatal> getAllClsconsultationprenatal2(int criteria)
        {
            List<clsconsultationprenatal> lstclsconsultationprenatal = new List<clsconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultationprenatal  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationprenatal varclsconsultationprenatal = null;
                        while (dr.Read())
                        {
                            varclsconsultationprenatal = new clsconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclsconsultationprenatal.Ddr = dr["ddr"].ToString();
                            varclsconsultationprenatal.Drp = dr["drp"].ToString();
                            varclsconsultationprenatal.Entecedent = dr["entecedent"].ToString();
                            varclsconsultationprenatal.Motif = dr["motif"].ToString();
                            varclsconsultationprenatal.Historiquegrossesse = dr["historiqueGrossesse"].ToString();
                            varclsconsultationprenatal.Gropesanguin = dr["gropeSanguin"].ToString();
                            varclsconsultationprenatal.Rh = dr["rh"].ToString();
                            varclsconsultationprenatal.Gesttte = dr["gesttte"].ToString();
                            varclsconsultationprenatal.Parite = dr["parite"].ToString();
                            varclsconsultationprenatal.Statuthemoglobique = dr["statuthemoglobique"].ToString();
                            if (!dr["conseiller"].ToString().Trim().Equals("")) varclsconsultationprenatal.Conseiller = bool.Parse(dr["conseiller"].ToString());
                            if (!dr["testee"].ToString().Trim().Equals("")) varclsconsultationprenatal.Testee = bool.Parse(dr["testee"].ToString());
                            if (!dr["oedeme"].ToString().Trim().Equals("")) varclsconsultationprenatal.Oedeme = bool.Parse(dr["oedeme"].ToString());
                            varclsconsultationprenatal.Conjoctivepalpebrale = dr["conjoctivepalpebrale"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultationprenatal.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsconsultationprenatal.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsconsultationprenatal.Temperature = double.Parse(dr["temperature"].ToString());
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pressionarterielle = double.Parse(dr["pressionArterielle"].ToString());
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsconsultationprenatal.Taille = double.Parse(dr["taille"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            lstclsconsultationprenatal.Add(varclsconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationprenatal;
        }

        public List<clsconsultationprenatal> getAllClsconsultationprenatal3(int criteria)
        {
            List<clsconsultationprenatal> lstclsconsultationprenatal = new List<clsconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT *  FROM consultationprenatal 
                    INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=consultationprenatal.id_dossierconsultationprenatale                        
                    INNER JOIN maladegrosse ON maladegrosse.id=consultationprenatal.id_maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade WHERE consultationprenatal.id_maladegrosse=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationprenatal varclsconsultationprenatal = null;
                        while (dr.Read())
                        {
                            varclsconsultationprenatal = new clsconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclsconsultationprenatal.Ddr = dr["ddr"].ToString();
                            varclsconsultationprenatal.Drp = dr["drp"].ToString();
                            varclsconsultationprenatal.Entecedent = dr["entecedent"].ToString();
                            varclsconsultationprenatal.Motif = dr["motif"].ToString();
                            varclsconsultationprenatal.Historiquegrossesse = dr["historiqueGrossesse"].ToString();
                            varclsconsultationprenatal.Gropesanguin = dr["gropeSanguin"].ToString();
                            varclsconsultationprenatal.Rh = dr["rh"].ToString();
                            varclsconsultationprenatal.Gesttte = dr["gesttte"].ToString();
                            varclsconsultationprenatal.Parite = dr["parite"].ToString();
                            varclsconsultationprenatal.Statuthemoglobique = dr["statuthemoglobique"].ToString();
                            if (!dr["conseiller"].ToString().Trim().Equals("")) varclsconsultationprenatal.Conseiller = bool.Parse(dr["conseiller"].ToString());
                            if (!dr["testee"].ToString().Trim().Equals("")) varclsconsultationprenatal.Testee = bool.Parse(dr["testee"].ToString());
                            if (!dr["oedeme"].ToString().Trim().Equals("")) varclsconsultationprenatal.Oedeme = bool.Parse(dr["oedeme"].ToString());
                            varclsconsultationprenatal.Conjoctivepalpebrale = dr["conjoctivepalpebrale"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultationprenatal.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsconsultationprenatal.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsconsultationprenatal.Temperature = double.Parse(dr["temperature"].ToString());
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pressionarterielle = double.Parse(dr["pressionArterielle"].ToString());
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsconsultationprenatal.Taille = double.Parse(dr["taille"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            lstclsconsultationprenatal.Add(varclsconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationprenatal;
        }

        public List<clsconsultationprenatal> getAllClsconsultationprenatal()
        {
            List<clsconsultationprenatal> lstclsconsultationprenatal = new List<clsconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultationprenatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultationprenatal varclsconsultationprenatal = null;
                        while (dr.Read())
                        {
                            varclsconsultationprenatal = new clsconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclsconsultationprenatal.Ddr = dr["ddr"].ToString();
                            varclsconsultationprenatal.Drp = dr["drp"].ToString();
                            varclsconsultationprenatal.Entecedent = dr["entecedent"].ToString();
                            varclsconsultationprenatal.Motif = dr["motif"].ToString();
                            varclsconsultationprenatal.Historiquegrossesse = dr["historiqueGrossesse"].ToString();
                            varclsconsultationprenatal.Gropesanguin = dr["gropeSanguin"].ToString();
                            varclsconsultationprenatal.Rh = dr["rh"].ToString();
                            varclsconsultationprenatal.Gesttte = dr["gesttte"].ToString();
                            varclsconsultationprenatal.Parite = dr["parite"].ToString();
                            varclsconsultationprenatal.Statuthemoglobique = dr["statuthemoglobique"].ToString();
                            if (!dr["conseiller"].ToString().Trim().Equals("")) varclsconsultationprenatal.Conseiller = bool.Parse(dr["conseiller"].ToString());
                            if (!dr["testee"].ToString().Trim().Equals("")) varclsconsultationprenatal.Testee = bool.Parse(dr["testee"].ToString());
                            if (!dr["oedeme"].ToString().Trim().Equals("")) varclsconsultationprenatal.Oedeme = bool.Parse(dr["oedeme"].ToString());
                            varclsconsultationprenatal.Conjoctivepalpebrale = dr["conjoctivepalpebrale"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultationprenatal.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsconsultationprenatal.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsconsultationprenatal.Temperature = double.Parse(dr["temperature"].ToString());
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pressionarterielle = double.Parse(dr["pressionArterielle"].ToString());
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclsconsultationprenatal.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsconsultationprenatal.Taille = double.Parse(dr["taille"].ToString());
                            if (!dr["id_maladeGrosse"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_maladegrosse = int.Parse(dr["id_maladeGrosse"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclsconsultationprenatal.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            lstclsconsultationprenatal.Add(varclsconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationprenatal;
        }

        public DataTable getAllClsconsultationprenatal1()
        {
            DataTable lstclsconsultationprenatal = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT *  FROM consultationprenatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsconsultationprenatal.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationprenatal;
        }

        public int insertClsconsultationprenatal(clsconsultationprenatal varclsconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string value = "";
                    if (string.IsNullOrEmpty(varclsconsultationprenatal.Conjoctivepalpebrale)) value = "Pâle";
                    else value = varclsconsultationprenatal.Conjoctivepalpebrale;

                    cmd.CommandText = string.Format("INSERT INTO consultationprenatal ( ddr,drp,entecedent,motif,historiqueGrossesse,gropeSanguin,rh,gesttte,parite,statuthemoglobique,conseiller,testee,oedeme,conjoctivepalpebrale,date,poid,temperature,pressionArterielle,pouls,taille,id_maladeGrosse,id_dossierconsultationprenatale ) VALUES (@ddr,@drp,@entecedent,@motif,@historiqueGrossesse,@gropeSanguin,@rh,@gesttte,@parite,@statuthemoglobique,@conseiller,@testee,@oedeme,@conjoctivepalpebrale,@date,@poid,@temperature,@pressionArterielle,@pouls,@taille,@id_maladeGrosse,@id_dossierconsultationprenatale  )");
                    if (varclsconsultationprenatal.Ddr != null) cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.String, 100, varclsconsultationprenatal.Ddr));
                    else cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Drp != null) cmd.Parameters.Add(getParameter(cmd, "@drp", DbType.String, 100, varclsconsultationprenatal.Drp));
                    else cmd.Parameters.Add(getParameter(cmd, "@drp", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Entecedent != null) cmd.Parameters.Add(getParameter(cmd, "@entecedent", DbType.String, 100, varclsconsultationprenatal.Entecedent));
                    else cmd.Parameters.Add(getParameter(cmd, "@entecedent", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Motif != null) cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 100, varclsconsultationprenatal.Motif));
                    else cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Historiquegrossesse != null) cmd.Parameters.Add(getParameter(cmd, "@historiqueGrossesse", DbType.String, 100, varclsconsultationprenatal.Historiquegrossesse));
                    else cmd.Parameters.Add(getParameter(cmd, "@historiqueGrossesse", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Gropesanguin != null) cmd.Parameters.Add(getParameter(cmd, "@gropeSanguin", DbType.String, 30, varclsconsultationprenatal.Gropesanguin));
                    else cmd.Parameters.Add(getParameter(cmd, "@gropeSanguin", DbType.String, 30, DBNull.Value));
                    if (varclsconsultationprenatal.Rh != null) cmd.Parameters.Add(getParameter(cmd, "@rh", DbType.String, 100, varclsconsultationprenatal.Rh));
                    else cmd.Parameters.Add(getParameter(cmd, "@rh", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Gesttte != null) cmd.Parameters.Add(getParameter(cmd, "@gesttte", DbType.String, 100, varclsconsultationprenatal.Gesttte));
                    else cmd.Parameters.Add(getParameter(cmd, "@gesttte", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Parite != null) cmd.Parameters.Add(getParameter(cmd, "@parite", DbType.String, 100, varclsconsultationprenatal.Parite));
                    else cmd.Parameters.Add(getParameter(cmd, "@parite", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Statuthemoglobique != null) cmd.Parameters.Add(getParameter(cmd, "@statuthemoglobique", DbType.String, 100, varclsconsultationprenatal.Statuthemoglobique));
                    else cmd.Parameters.Add(getParameter(cmd, "@statuthemoglobique", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Conseiller.HasValue) cmd.Parameters.Add(getParameter(cmd, "@conseiller", DbType.Boolean, 2, varclsconsultationprenatal.Conseiller));
                    else cmd.Parameters.Add(getParameter(cmd, "@conseiller", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Testee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@testee", DbType.Boolean, 2, varclsconsultationprenatal.Testee));
                    else cmd.Parameters.Add(getParameter(cmd, "@testee", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Oedeme.HasValue) cmd.Parameters.Add(getParameter(cmd, "@oedeme", DbType.Boolean, 2, varclsconsultationprenatal.Oedeme));
                    else cmd.Parameters.Add(getParameter(cmd, "@oedeme", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Conjoctivepalpebrale != null) cmd.Parameters.Add(getParameter(cmd, "@conjoctivepalpebrale", DbType.String, 200, value));
                    else cmd.Parameters.Add(getParameter(cmd, "@conjoctivepalpebrale", DbType.String, 200, "Pâle"));
                    if (varclsconsultationprenatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsconsultationprenatal.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsconsultationprenatal.Poid));
                    cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, varclsconsultationprenatal.Temperature));
                    cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.Single, 4, varclsconsultationprenatal.Pressionarterielle));
                    if (varclsconsultationprenatal.Pouls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, varclsconsultationprenatal.Pouls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultationprenatal.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsconsultationprenatal.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeGrosse", DbType.Int32, 4, varclsconsultationprenatal.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 4, varclsconsultationprenatal.Id_dossierconsultationprenatale));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultationprenatal(clsconsultationprenatal varclsconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string value = "";
                    if (string.IsNullOrEmpty(varclsconsultationprenatal.Conjoctivepalpebrale)) value = "Pâle";
                    else value = varclsconsultationprenatal.Conjoctivepalpebrale;

                    cmd.CommandText = string.Format("UPDATE consultationprenatal  SET ddr=@ddr,drp=@drp,entecedent=@entecedent,motif=@motif,historiqueGrossesse=@historiqueGrossesse,gropeSanguin=@gropeSanguin,rh=@rh,gesttte=@gesttte,parite=@parite,statuthemoglobique=@statuthemoglobique,conseiller=@conseiller,testee=@testee,oedeme=@oedeme,conjoctivepalpebrale=@conjoctivepalpebrale,date=@date,poid=@poid,temperature=@temperature,pressionArterielle=@pressionArterielle,pouls=@pouls,taille=@taille,id_maladeGrosse=@id_maladeGrosse,id_dossierconsultationprenatale=@id_dossierconsultationprenatale  WHERE 1=1  AND id=@id ");
                    if (varclsconsultationprenatal.Ddr != null) cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.String, 100, varclsconsultationprenatal.Ddr));
                    else cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Drp != null) cmd.Parameters.Add(getParameter(cmd, "@drp", DbType.String, 100, varclsconsultationprenatal.Drp));
                    else cmd.Parameters.Add(getParameter(cmd, "@drp", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Entecedent != null) cmd.Parameters.Add(getParameter(cmd, "@entecedent", DbType.String, 100, varclsconsultationprenatal.Entecedent));
                    else cmd.Parameters.Add(getParameter(cmd, "@entecedent", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Motif != null) cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 100, varclsconsultationprenatal.Motif));
                    else cmd.Parameters.Add(getParameter(cmd, "@motif", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Historiquegrossesse != null) cmd.Parameters.Add(getParameter(cmd, "@historiqueGrossesse", DbType.String, 100, varclsconsultationprenatal.Historiquegrossesse));
                    else cmd.Parameters.Add(getParameter(cmd, "@historiqueGrossesse", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Gropesanguin != null) cmd.Parameters.Add(getParameter(cmd, "@gropeSanguin", DbType.String, 30, varclsconsultationprenatal.Gropesanguin));
                    else cmd.Parameters.Add(getParameter(cmd, "@gropeSanguin", DbType.String, 30, DBNull.Value));
                    if (varclsconsultationprenatal.Rh != null) cmd.Parameters.Add(getParameter(cmd, "@rh", DbType.String, 100, varclsconsultationprenatal.Rh));
                    else cmd.Parameters.Add(getParameter(cmd, "@rh", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Gesttte != null) cmd.Parameters.Add(getParameter(cmd, "@gesttte", DbType.String, 100, varclsconsultationprenatal.Gesttte));
                    else cmd.Parameters.Add(getParameter(cmd, "@gesttte", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Parite != null) cmd.Parameters.Add(getParameter(cmd, "@parite", DbType.String, 100, varclsconsultationprenatal.Parite));
                    else cmd.Parameters.Add(getParameter(cmd, "@parite", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Statuthemoglobique != null) cmd.Parameters.Add(getParameter(cmd, "@statuthemoglobique", DbType.String, 100, varclsconsultationprenatal.Statuthemoglobique));
                    else cmd.Parameters.Add(getParameter(cmd, "@statuthemoglobique", DbType.String, 100, DBNull.Value));
                    if (varclsconsultationprenatal.Conseiller.HasValue) cmd.Parameters.Add(getParameter(cmd, "@conseiller", DbType.Boolean, 2, varclsconsultationprenatal.Conseiller));
                    else cmd.Parameters.Add(getParameter(cmd, "@conseiller", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Testee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@testee", DbType.Boolean, 2, varclsconsultationprenatal.Testee));
                    else cmd.Parameters.Add(getParameter(cmd, "@testee", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Oedeme.HasValue) cmd.Parameters.Add(getParameter(cmd, "@oedeme", DbType.Boolean, 2, varclsconsultationprenatal.Oedeme));
                    else cmd.Parameters.Add(getParameter(cmd, "@oedeme", DbType.Boolean, 2, DBNull.Value));
                    if (varclsconsultationprenatal.Conjoctivepalpebrale != null) cmd.Parameters.Add(getParameter(cmd, "@conjoctivepalpebrale", DbType.String, 200, value));
                    else cmd.Parameters.Add(getParameter(cmd, "@conjoctivepalpebrale", DbType.String, 200, "Pâle"));
                    if (varclsconsultationprenatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsconsultationprenatal.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsconsultationprenatal.Poid));
                    cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, varclsconsultationprenatal.Temperature));
                    cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.Single, 4, varclsconsultationprenatal.Pressionarterielle));
                    if (varclsconsultationprenatal.Pouls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, varclsconsultationprenatal.Pouls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultationprenatal.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsconsultationprenatal.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeGrosse", DbType.Int32, 4, varclsconsultationprenatal.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 4, varclsconsultationprenatal.Id_dossierconsultationprenatale));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsultationprenatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultationprenatal(int? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {

                    cmd.CommandText = "UPDATE consultationprenatal SET etatpaiement='Non payé' WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsconsultationprenatal(clsconsultationprenatal varclsconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM consultationprenatal  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsultationprenatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCONSULTATIONPRENATAL
        #region  CLSTYPEACCOUCHEMENT
        public clstypeaccouchement getClstypeaccouchement(object intid)
        {
            clstypeaccouchement varclstypeaccouchement = new clstypeaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typeaccouchement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypeaccouchement;
        }

        public clstypeaccouchement getAllClstypeaccouchement1(int criteria)
        {
            clstypeaccouchement varclstypeaccouchement = new clstypeaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT typeaccouchement.id,typeaccouchement.designation,typeaccouchement.prix FROM typeaccouchement
            INNER JOIN accouchement ON typeaccouchement.id=accouchement.id_typeaccouchement
            WHERE accouchement.id={0}", criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypeaccouchement;
        }

        public clstypeaccouchement getAllClstypeaccouchement2(int intid)
        {
            clstypeaccouchement varclstypeaccouchement = new clstypeaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT typeaccouchement.id,typeaccouchement.designation,typeaccouchement.prix FROM typeaccouchement
            INNER JOIN accouchement ON typeaccouchement.id=accouchement.id_typeaccouchement
            WHERE accouchement.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypeaccouchement;
        }

        public List<clstypeaccouchement> getAllClstypeaccouchement(string criteria)
        {
            List<clstypeaccouchement> lstclstypeaccouchement = new List<clstypeaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM typeaccouchement  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypeaccouchement varclstypeaccouchement = null;
                        while (dr.Read())
                        {

                            varclstypeaccouchement = new clstypeaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            lstclstypeaccouchement.Add(varclstypeaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypeaccouchement;
        }

        public List<clstypeaccouchement> getAllClstypeaccouchementPaiement(int id_malade)
        {
            List<clstypeaccouchement> lstcclstypeaccouchement = new List<clstypeaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT typeaccouchement.id, dossieraccouchement.id AS iddossieraccouchement,typeaccouchement.designation,typeaccouchement.prix FROM typeaccouchement 
                    INNER JOIN dossieraccouchement ON typeaccouchement.id=dossieraccouchement.id_typeaccouchement 
                    INNER JOIN malade ON malade.id=dossieraccouchement.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossieraccouchement.etatpaiement='Non cloturé non payé' OR dossieraccouchement.etatpaiement='Cloturé non payé') ORDER BY typeaccouchement.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstypeaccouchement varclstypeaccouchement = null;
                        while (dr.Read())
                        {
                            varclstypeaccouchement = new clstypeaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["iddossieraccouchement"].ToString().Trim().Equals("")) varclstypeaccouchement.Id_de_dossieraccouchement = int.Parse(dr["iddossieraccouchement"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            varclstypeaccouchement.DesignationComplete = varclstypeaccouchement.Designation + "=>" + varclstypeaccouchement.Prix + " $US";
                            lstcclstypeaccouchement.Add(varclstypeaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstcclstypeaccouchement;
        }

        public List<clstypeaccouchement> getAllClstypeaccouchement()
        {
            List<clstypeaccouchement> lstclstypeaccouchement = new List<clstypeaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typeaccouchement ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypeaccouchement varclstypeaccouchement = null;
                        while (dr.Read())
                        {

                            varclstypeaccouchement = new clstypeaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclstypeaccouchement.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclstypeaccouchement.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            lstclstypeaccouchement.Add(varclstypeaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypeaccouchement;
        }

        public int insertClstypeaccouchement(clstypeaccouchement varclstypeaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO typeaccouchement ( designation,prix ) VALUES (@designation,@prix  )");
                    if (varclstypeaccouchement.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstypeaccouchement.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclstypeaccouchement.Prix));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstypeaccouchement(clstypeaccouchement varclstypeaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE typeaccouchement  SET designation=@designation,prix=@prix  WHERE 1=1  AND id=@id ");
                    if (varclstypeaccouchement.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstypeaccouchement.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclstypeaccouchement.Prix));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypeaccouchement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstypeaccouchement(clstypeaccouchement varclstypeaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM typeaccouchement  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypeaccouchement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTYPEACCOUCHEMENT
        #region  CLSACCOUCHEMENT
        public clsaccouchement getClsaccouchement(object intid)
        {
            clsaccouchement varclsaccouchement = new clsaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM accouchement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsaccouchement;
        }

        public clsaccouchement getClsaccouchement1(int intid)
        {
            clsaccouchement varclsaccouchement = new clsaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM accouchement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsaccouchement;
        }

        public List<clsaccouchement> getAllClsaccouchement(string criteria)
        {
            List<clsaccouchement> lstclsaccouchement = new List<clsaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM accouchement  WHERE 1=1";
                    sql += "  OR   lieu LIKE '%" + criteria + "%'";
                    sql += "  OR   traitement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsaccouchement varclsaccouchement = null;
                        while (dr.Read())
                        {

                            varclsaccouchement = new clsaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            lstclsaccouchement.Add(varclsaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsaccouchement;
        }

        public List<clsaccouchement> getAllClsaccouchement2(int criteria)
        {
            List<clsaccouchement> lstclsaccouchement = new List<clsaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT *  FROM accouchement 
                    INNER JOIN maladegrosse ON maladegrosse.id=accouchement.id_maladegrosse
                    INNER JOIN malade ON malade.id=maladegrosse.id_malade WHERE accouchement.id_maladegrosse=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaccouchement varclsaccouchement = null;
                        while (dr.Read())
                        {
                            varclsaccouchement = new clsaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            lstclsaccouchement.Add(varclsaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsaccouchement;
        }

        public List<clsaccouchement> getAllClsaccouchement4(int criteria)
        {
            List<clsaccouchement> lstclsaccouchement = new List<clsaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM accouchement  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaccouchement varclsaccouchement = null;
                        while (dr.Read())
                        {
                            varclsaccouchement = new clsaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            lstclsaccouchement.Add(varclsaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsaccouchement;
        }

        public List<clsaccouchement> getAllClsaccouchement()
        {
            List<clsaccouchement> lstclsaccouchement = new List<clsaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM accouchement ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsaccouchement varclsaccouchement = null;
                        while (dr.Read())
                        {

                            varclsaccouchement = new clsaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaccouchement.Id = int.Parse(dr["id"].ToString());
                            varclsaccouchement.Lieu = dr["lieu"].ToString();
                            varclsaccouchement.Traitement = dr["traitement"].ToString();
                            varclsaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["bcg"].ToString().Trim().Equals("")) varclsaccouchement.Bcg = int.Parse(dr["bcg"].ToString());
                            if (!dr["vat"].ToString().Trim().Equals("")) varclsaccouchement.Vat = int.Parse(dr["vat"].ToString());
                            if (!dr["degree"].ToString().Trim().Equals("")) varclsaccouchement.Degree = int.Parse(dr["degree"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsaccouchement.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            lstclsaccouchement.Add(varclsaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsaccouchement;
        }

        public int insertClsaccouchement(clsaccouchement varclsaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO accouchement ( lieu,traitement,bcg,vat,degree,date,id_maladegrosse,id_typeaccouchement,etatpaiement ) VALUES (@lieu,@traitement,@bcg,@vat,@degree,@date,@id_maladegrosse,@id_typeaccouchement,@etatpaiement  )");
                    if (varclsaccouchement.Lieu != null) cmd.Parameters.Add(getParameter(cmd, "@lieu", DbType.String, 100, varclsaccouchement.Lieu));
                    else cmd.Parameters.Add(getParameter(cmd, "@lieu", DbType.String, 100, DBNull.Value));
                    if (varclsaccouchement.Traitement != null) cmd.Parameters.Add(getParameter(cmd, "@traitement", DbType.String, 100, varclsaccouchement.Traitement));
                    else cmd.Parameters.Add(getParameter(cmd, "@traitement", DbType.String, 100, DBNull.Value));
                    if (varclsaccouchement.Traitement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsaccouchement.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    if (varclsaccouchement.Bcg.HasValue) cmd.Parameters.Add(getParameter(cmd, "@bcg", DbType.Int32, 4, varclsaccouchement.Bcg));
                    else cmd.Parameters.Add(getParameter(cmd, "@bcg", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Vat.HasValue) cmd.Parameters.Add(getParameter(cmd, "@vat", DbType.Int32, 4, varclsaccouchement.Vat));
                    else cmd.Parameters.Add(getParameter(cmd, "@vat", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Degree.HasValue) cmd.Parameters.Add(getParameter(cmd, "@degree", DbType.Int32, 4, varclsaccouchement.Degree));
                    else cmd.Parameters.Add(getParameter(cmd, "@degree", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsaccouchement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsaccouchement.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeaccouchement", DbType.Int32, 4, varclsaccouchement.Id_typeaccouchement));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsaccouchement(clsaccouchement varclsaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE accouchement  SET lieu=@lieu,traitement=@traitement,bcg=@bcg,vat=@vat,degree=@degree,date=@date,id_maladegrosse=@id_maladegrosse,id_typeaccouchement=@id_typeaccouchement,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsaccouchement.Lieu != null) cmd.Parameters.Add(getParameter(cmd, "@lieu", DbType.String, 100, varclsaccouchement.Lieu));
                    else cmd.Parameters.Add(getParameter(cmd, "@lieu", DbType.String, 100, DBNull.Value));
                    if (varclsaccouchement.Traitement != null) cmd.Parameters.Add(getParameter(cmd, "@traitement", DbType.String, 100, varclsaccouchement.Traitement));
                    else cmd.Parameters.Add(getParameter(cmd, "@traitement", DbType.String, 100, DBNull.Value));
                    if (varclsaccouchement.Traitement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsaccouchement.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    if (varclsaccouchement.Bcg.HasValue) cmd.Parameters.Add(getParameter(cmd, "@bcg", DbType.Int32, 4, varclsaccouchement.Bcg));
                    else cmd.Parameters.Add(getParameter(cmd, "@bcg", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Vat.HasValue) cmd.Parameters.Add(getParameter(cmd, "@vat", DbType.Int32, 4, varclsaccouchement.Vat));
                    else cmd.Parameters.Add(getParameter(cmd, "@vat", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Degree.HasValue) cmd.Parameters.Add(getParameter(cmd, "@degree", DbType.Int32, 4, varclsaccouchement.Degree));
                    else cmd.Parameters.Add(getParameter(cmd, "@degree", DbType.Int32, 4, DBNull.Value));
                    if (varclsaccouchement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsaccouchement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsaccouchement.Id_maladegrosse));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeaccouchement", DbType.Int32, 4, varclsaccouchement.Id_typeaccouchement));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaccouchement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        public int updateClsaccouchement(int ? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {

                        cmd.CommandText = "UPDATE accouchement SET etatpaiement='Non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                        i = cmd.ExecuteNonQuery();
                        conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsaccouchement(clsaccouchement varclsaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM accouchement  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaccouchement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSACCOUCHEMENT
        #region  CLSCONSELLINGETTESTRAPIDE
        public clsconsellingettestrapide getClsconsellingettestrapide(object intid)
        {
            clsconsellingettestrapide varclsconsellingettestrapide = new clsconsellingettestrapide();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consellingettestrapide WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id = int.Parse(dr["id"].ToString());
                            varclsconsellingettestrapide.Rvtregine = dr["rvtregine"].ToString();
                            if (!dr["datedebutttt"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebutttt = DateTime.Parse(dr["datedebutttt"].ToString());
                            if (!dr["datedebuttravail"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebuttravail = DateTime.Parse(dr["datedebuttravail"].ToString());
                            if (!dr["heure"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Heure = DateTime.Parse(dr["heure"].ToString());
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsellingettestrapide;
        }

        public List<clsconsellingettestrapide> getAllClsconsellingettestrapide(string criteria)
        {
            List<clsconsellingettestrapide> lstclsconsellingettestrapide = new List<clsconsellingettestrapide>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consellingettestrapide  WHERE 1=1";
                    sql += "  OR   rvtregine LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsellingettestrapide varclsconsellingettestrapide = null;
                        while (dr.Read())
                        {

                            varclsconsellingettestrapide = new clsconsellingettestrapide();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id = int.Parse(dr["id"].ToString());
                            varclsconsellingettestrapide.Rvtregine = dr["rvtregine"].ToString();
                            if (!dr["datedebutttt"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebutttt = DateTime.Parse(dr["datedebutttt"].ToString());
                            if (!dr["datedebuttravail"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebuttravail = DateTime.Parse(dr["datedebuttravail"].ToString());
                            if (!dr["heure"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Heure = DateTime.Parse(dr["heure"].ToString());
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            lstclsconsellingettestrapide.Add(varclsconsellingettestrapide);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsellingettestrapide;
        }

        public List<clsconsellingettestrapide> getAllClsconsellingettestrapide1(int criteria)
        {
            List<clsconsellingettestrapide> lstclsconsellingettestrapide = new List<clsconsellingettestrapide>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consellingettestrapide  WHERE id_consultationprenatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsellingettestrapide varclsconsellingettestrapide = null;
                        while (dr.Read())
                        {
                            varclsconsellingettestrapide = new clsconsellingettestrapide();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id = int.Parse(dr["id"].ToString());
                            varclsconsellingettestrapide.Rvtregine = dr["rvtregine"].ToString();
                            if (!dr["datedebutttt"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebutttt = DateTime.Parse(dr["datedebutttt"].ToString());
                            if (!dr["datedebuttravail"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebuttravail = DateTime.Parse(dr["datedebuttravail"].ToString());
                            if (!dr["heure"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Heure = DateTime.Parse(dr["heure"].ToString());
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            lstclsconsellingettestrapide.Add(varclsconsellingettestrapide);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsellingettestrapide;
        }

        public clsconsellingettestrapide getAllClsconsellingettestrapide2(int intid)
        {
            clsconsellingettestrapide varclsconsellingettestrapide = new clsconsellingettestrapide();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consellingettestrapide WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id = int.Parse(dr["id"].ToString());
                            varclsconsellingettestrapide.Rvtregine = dr["rvtregine"].ToString();
                            if (!dr["datedebutttt"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebutttt = DateTime.Parse(dr["datedebutttt"].ToString());
                            if (!dr["datedebuttravail"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebuttravail = DateTime.Parse(dr["datedebuttravail"].ToString());
                            if (!dr["heure"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Heure = DateTime.Parse(dr["heure"].ToString());
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsellingettestrapide;
        }

        public List<clsconsellingettestrapide> getAllClsconsellingettestrapide()
        {
            List<clsconsellingettestrapide> lstclsconsellingettestrapide = new List<clsconsellingettestrapide>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consellingettestrapide ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsellingettestrapide varclsconsellingettestrapide = null;
                        while (dr.Read())
                        {

                            varclsconsellingettestrapide = new clsconsellingettestrapide();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id = int.Parse(dr["id"].ToString());
                            varclsconsellingettestrapide.Rvtregine = dr["rvtregine"].ToString();
                            if (!dr["datedebutttt"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebutttt = DateTime.Parse(dr["datedebutttt"].ToString());
                            if (!dr["datedebuttravail"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Datedebuttravail = DateTime.Parse(dr["datedebuttravail"].ToString());
                            if (!dr["heure"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Heure = DateTime.Parse(dr["heure"].ToString());
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsconsellingettestrapide.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            lstclsconsellingettestrapide.Add(varclsconsellingettestrapide);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsellingettestrapide;
        }

        public int insertClsconsellingettestrapide(clsconsellingettestrapide varclsconsellingettestrapide)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO consellingettestrapide ( rvtregine,datedebutttt,datedebuttravail,heure,id_consultationPrenatal ) VALUES (@rvtregine,@datedebutttt,@datedebuttravail,@heure,@id_consultationPrenatal  )");
                    if (varclsconsellingettestrapide.Rvtregine != null) cmd.Parameters.Add(getParameter(cmd, "@rvtregine", DbType.String, 100, varclsconsellingettestrapide.Rvtregine));
                    else cmd.Parameters.Add(getParameter(cmd, "@rvtregine", DbType.String, 100, DBNull.Value));
                    if (varclsconsellingettestrapide.Datedebutttt.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebutttt", DbType.DateTime, 8, varclsconsellingettestrapide.Datedebutttt));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebutttt", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsellingettestrapide.Datedebuttravail.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebuttravail", DbType.DateTime, 8, varclsconsellingettestrapide.Datedebuttravail));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebuttravail", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsellingettestrapide.Heure.HasValue) cmd.Parameters.Add(getParameter(cmd, "@heure", DbType.DateTime, 8, varclsconsellingettestrapide.Heure));
                    else cmd.Parameters.Add(getParameter(cmd, "@heure", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationPrenatal", DbType.Int32, 4, varclsconsellingettestrapide.Id_consultationprenatal));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsellingettestrapide(clsconsellingettestrapide varclsconsellingettestrapide)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE consellingettestrapide  SET rvtregine=@rvtregine,datedebutttt=@datedebutttt,datedebuttravail=@datedebuttravail,heure=@heure,id_consultationPrenatal=@id_consultationPrenatal  WHERE 1=1  AND id=@id ");
                    if (varclsconsellingettestrapide.Rvtregine != null) cmd.Parameters.Add(getParameter(cmd, "@rvtregine", DbType.String, 100, varclsconsellingettestrapide.Rvtregine));
                    else cmd.Parameters.Add(getParameter(cmd, "@rvtregine", DbType.String, 100, DBNull.Value));
                    if (varclsconsellingettestrapide.Datedebutttt.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebutttt", DbType.DateTime, 8, varclsconsellingettestrapide.Datedebutttt));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebutttt", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsellingettestrapide.Datedebuttravail.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedebuttravail", DbType.DateTime, 8, varclsconsellingettestrapide.Datedebuttravail));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedebuttravail", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsellingettestrapide.Heure.HasValue) cmd.Parameters.Add(getParameter(cmd, "@heure", DbType.DateTime, 8, varclsconsellingettestrapide.Heure));
                    else cmd.Parameters.Add(getParameter(cmd, "@heure", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationPrenatal", DbType.Int32, 4, varclsconsellingettestrapide.Id_consultationprenatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsellingettestrapide.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsconsellingettestrapide(clsconsellingettestrapide varclsconsellingettestrapide)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM consellingettestrapide  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsellingettestrapide.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCONSELLINGETTESTRAPIDE
        #region  CLSTYPESYSTEME
        public clstypesysteme getClstypesysteme(object intid)
        {
            clstypesysteme varclstypesysteme = new clstypesysteme();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typesysteme WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstypesysteme.Id = int.Parse(dr["id"].ToString());
                            varclstypesysteme.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypesysteme;
        }

        public List<clstypesysteme> getAllClstypesysteme(string criteria)
        {
            List<clstypesysteme> lstclstypesysteme = new List<clstypesysteme>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM typesysteme  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypesysteme varclstypesysteme = null;
                        while (dr.Read())
                        {

                            varclstypesysteme = new clstypesysteme();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypesysteme.Id = int.Parse(dr["id"].ToString());
                            varclstypesysteme.Designation = dr["designation"].ToString();
                            lstclstypesysteme.Add(varclstypesysteme);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypesysteme;
        }

        public List<clstypesysteme> getAllClstypesysteme()
        {
            List<clstypesysteme> lstclstypesysteme = new List<clstypesysteme>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typesysteme ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypesysteme varclstypesysteme = null;
                        while (dr.Read())
                        {

                            varclstypesysteme = new clstypesysteme();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypesysteme.Id = int.Parse(dr["id"].ToString());
                            varclstypesysteme.Designation = dr["designation"].ToString();
                            lstclstypesysteme.Add(varclstypesysteme);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypesysteme;
        }

        public int insertClstypesysteme(clstypesysteme varclstypesysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO typesysteme ( designation ) VALUES (@designation  )");
                    if (varclstypesysteme.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstypesysteme.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstypesysteme(clstypesysteme varclstypesysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE typesysteme  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclstypesysteme.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstypesysteme.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypesysteme.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstypesysteme(clstypesysteme varclstypesysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM typesysteme  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypesysteme.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTYPESYSTEME
        #region  CLSMOUVEMENTSYSTEME
        public clsmouvementsysteme getClsmouvementsysteme(object intid)
        {
            clsmouvementsysteme varclsmouvementsysteme = new clsmouvementsysteme();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementsysteme WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id = int.Parse(dr["id"].ToString());
                            varclsmouvementsysteme.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            if (!dr["id_typeSysteme"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_typesysteme = int.Parse(dr["id_typeSysteme"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementsysteme;
        }

        public List<clsmouvementsysteme> getAllClsmouvementsysteme(string criteria)
        {
            List<clsmouvementsysteme> lstclsmouvementsysteme = new List<clsmouvementsysteme>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementsysteme  WHERE 1=1";
                    sql += "  OR   commentaire LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementsysteme varclsmouvementsysteme = null;
                        while (dr.Read())
                        {

                            varclsmouvementsysteme = new clsmouvementsysteme();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id = int.Parse(dr["id"].ToString());
                            varclsmouvementsysteme.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            if (!dr["id_typeSysteme"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_typesysteme = int.Parse(dr["id_typeSysteme"].ToString());
                            lstclsmouvementsysteme.Add(varclsmouvementsysteme);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementsysteme;
        }

        public List<clsmouvementsysteme> getAllClsmouvementsysteme()
        {
            List<clsmouvementsysteme> lstclsmouvementsysteme = new List<clsmouvementsysteme>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementsysteme ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementsysteme varclsmouvementsysteme = null;
                        while (dr.Read())
                        {

                            varclsmouvementsysteme = new clsmouvementsysteme();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id = int.Parse(dr["id"].ToString());
                            varclsmouvementsysteme.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_consultationPrenatal"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_consultationprenatal = int.Parse(dr["id_consultationPrenatal"].ToString());
                            if (!dr["id_typeSysteme"].ToString().Trim().Equals("")) varclsmouvementsysteme.Id_typesysteme = int.Parse(dr["id_typeSysteme"].ToString());
                            lstclsmouvementsysteme.Add(varclsmouvementsysteme);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementsysteme;
        }

        public int insertClsmouvementsysteme(clsmouvementsysteme varclsmouvementsysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mouvementsysteme ( commentaire,id_consultationPrenatal,id_typeSysteme ) VALUES (@commentaire,@id_consultationPrenatal,@id_typeSysteme  )");
                    if (varclsmouvementsysteme.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 1000, varclsmouvementsysteme.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 1000, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationPrenatal", DbType.Int32, 4, varclsmouvementsysteme.Id_consultationprenatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeSysteme", DbType.Int32, 4, varclsmouvementsysteme.Id_typesysteme));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmouvementsysteme(clsmouvementsysteme varclsmouvementsysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mouvementsysteme  SET commentaire=@commentaire,id_consultationPrenatal=@id_consultationPrenatal,id_typeSysteme=@id_typeSysteme  WHERE 1=1  AND id=@id ");
                    if (varclsmouvementsysteme.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 1000, varclsmouvementsysteme.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 1000, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationPrenatal", DbType.Int32, 4, varclsmouvementsysteme.Id_consultationprenatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeSysteme", DbType.Int32, 4, varclsmouvementsysteme.Id_typesysteme));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementsysteme.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmouvementsysteme(clsmouvementsysteme varclsmouvementsysteme)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementsysteme  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementsysteme.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMOUVEMENTSYSTEME
        #region  CLSENFANT
        public List<clsenfant> getAllClsenfant1(int criteria)
        {
            List<clsenfant> lstclsenfant = new List<clsenfant>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,enfant.id AS idEnf,enfant.id_maladegrosse,enfant.malformation,enfant.miseAusienDansHeurQuiSuitAccouchement,enfant.pc,enfant.poid,enfant.senn,enfant.soinsDuCordo,enfant.taille FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne 
                    INNER JOIN maladegrosse ON malade.id=maladegrosse.id_malade
                    INNER JOIN accouchement ON maladegrosse.id=accouchement.id_maladegrosse 
                    INNER JOIN enfant ON maladegrosse.id=enfant.id_maladegrosse
                    WHERE maladegrosse.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsenfant varclsenfant = null;
                        while (dr.Read())
                        {
                            varclsenfant = new clsenfant();
                            //Enfant
                            if (!dr["idEnf"].ToString().Trim().Equals("")) varclsenfant.Id = int.Parse(dr["idEnf"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsenfant.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsenfant.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsenfant.Taille = double.Parse(dr["taille"].ToString());
                            varclsenfant.Senn = dr["senn"].ToString();
                            varclsenfant.Soinsducordo = dr["soinsDuCordo"].ToString();
                            if (!dr["miseAusienDansHeurQuiSuitAccouchement"].ToString().Trim().Equals("")) varclsenfant.Miseausiendansheurquisuitaccouchement = bool.Parse(dr["miseAusienDansHeurQuiSuitAccouchement"].ToString());
                            if (!dr["pc"].ToString().Trim().Equals("")) varclsenfant.Pc = int.Parse(dr["pc"].ToString());
                            varclsenfant.Malformation = dr["malformation"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsenfant.IdPers = int.Parse(dr["id"].ToString());
                            varclsenfant.Nom = dr["nom"].ToString();
                            varclsenfant.Postnom = dr["postnom"].ToString();
                            varclsenfant.Prenom = dr["prenom"].ToString();
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            varclsenfant.Etatcivil = dr["etatcivil"].ToString();
                            varclsenfant.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsenfant.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsenfant.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsenfant.Photo = (Byte[])dr["photo"];
                            lstclsenfant.Add(varclsenfant);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsenfant;
        }

        public List<clsenfant> getAllClsenfant2(int criteria)
        {
            List<clsenfant> lstclsenfant = new List<clsenfant>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,enfant.id AS idEnf,enfant.id_maladegrosse,enfant.id_maladegrosse,enfant.malformation,enfant.miseAusienDansHeurQuiSuitAccouchement,enfant.pc,enfant.poid,enfant.senn,enfant.soinsDuCordo,enfant.taille FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne 
                    INNER JOIN maladegrosse ON malade.id=maladegrosse.id_malade
                    INNER JOIN accouchement ON maladegrosse.id=accouchement.id_maladegrosse 
                    INNER JOIN enfant ON maladegrosse.id=enfant.id_maladegrosse
                    WHERE maladegrosse.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsenfant varclsenfant = null;
                        while (dr.Read())
                        {
                            varclsenfant = new clsenfant();
                            //Enfant
                            if (!dr["idEnf"].ToString().Trim().Equals("")) varclsenfant.Id = int.Parse(dr["idEnf"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsenfant.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsenfant.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsenfant.Taille = double.Parse(dr["taille"].ToString());
                            varclsenfant.Senn = dr["senn"].ToString();
                            varclsenfant.Soinsducordo = dr["soinsDuCordo"].ToString();
                            if (!dr["miseAusienDansHeurQuiSuitAccouchement"].ToString().Trim().Equals("")) varclsenfant.Miseausiendansheurquisuitaccouchement = bool.Parse(dr["miseAusienDansHeurQuiSuitAccouchement"].ToString());
                            if (!dr["pc"].ToString().Trim().Equals("")) varclsenfant.Pc = int.Parse(dr["pc"].ToString());
                            varclsenfant.Malformation = dr["malformation"].ToString();
                           
                            //Personne   
                            if (!dr["id"].ToString().Trim().Equals("")) varclsenfant.IdPers = int.Parse(dr["id"].ToString());
                            varclsenfant.Nom = dr["nom"].ToString();
                            varclsenfant.Postnom = dr["postnom"].ToString();
                            varclsenfant.Prenom = dr["prenom"].ToString();
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            varclsenfant.Etatcivil = dr["etatcivil"].ToString();
                            varclsenfant.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsenfant.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsenfant.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsenfant.Photo = (Byte[])dr["photo"];
                            lstclsenfant.Add(varclsenfant);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsenfant;
        }

        public clsenfant getClsenfant(object intid)
        {
            clsenfant varclsenfant = new clsenfant();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,enfant.id AS idEnf,enfant.id_maladegrosse,enfant.malformation,enfant.miseAusienDansHeurQuiSuitAccouchement,enfant.pc,enfant.poid,enfant.senn,enfant.soinsDuCordo,enfant.taille FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne 
                    INNER JOIN maladegrosse ON malade.id=maladegrosse.id_malade
                    INNER JOIN accouchement ON maladegrosse.id=accouchement.id_maladegrosse 
                    INNER JOIN enfant ON maladegrosse.id=enfant.id_maladegrosse
                    WHERE maladegrosse.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Enfant
                            if (!dr["idEnf"].ToString().Trim().Equals("")) varclsenfant.Id = int.Parse(dr["idEnf"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsenfant.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsenfant.Poid = double.Parse(dr["poid"].ToString());
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsenfant.Taille = double.Parse(dr["taille"].ToString());
                            varclsenfant.Senn = dr["senn"].ToString();
                            varclsenfant.Soinsducordo = dr["soinsDuCordo"].ToString();
                            if (!dr["miseAusienDansHeurQuiSuitAccouchement"].ToString().Trim().Equals("")) varclsenfant.Miseausiendansheurquisuitaccouchement = bool.Parse(dr["miseAusienDansHeurQuiSuitAccouchement"].ToString());
                            if (!dr["pc"].ToString().Trim().Equals("")) varclsenfant.Pc = int.Parse(dr["pc"].ToString());
                            varclsenfant.Malformation = dr["malformation"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsenfant.IdPers = int.Parse(dr["id"].ToString());
                            varclsenfant.Nom = dr["nom"].ToString();
                            varclsenfant.Postnom = dr["postnom"].ToString();
                            varclsenfant.Prenom = dr["prenom"].ToString();
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            varclsenfant.Etatcivil = dr["etatcivil"].ToString();
                            varclsenfant.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsenfant.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsenfant.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsenfant.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsenfant;
        }

        public List<clsenfant> getAllClsenfant(string criteria)
        {
            List<clsenfant> lstclsenfant = new List<clsenfant>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,enfant.id AS idEnf,enfant.id_maladegrosse,enfant.malformation,enfant.miseAusienDansHeurQuiSuitAccouchement,enfant.pc,enfant.poid,enfant.senn,enfant.soinsDuCordo,enfant.taille FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne 
                    INNER JOIN maladegrosse ON malade.id=maladegrosse.id_malade
                    INNER JOIN accouchement ON maladegrosse.id=accouchement.id_maladegrosse 
                    INNER JOIN enfant ON maladegrosse.id=enfant.id_maladegrosse  WHERE 1=1";
                    sql += "  OR   enfant.senn LIKE '%" + criteria + "%'";
                    sql += "  OR   enfant.soinsDuCordo LIKE '%" + criteria + "%'";
                    sql += "  OR   ennfant.malformation LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsenfant varclsenfant = null;
                        while (dr.Read())
                        {
                            varclsenfant = new clsenfant();
                            //Enfant
                            if (!dr["idEnf"].ToString().Trim().Equals("")) varclsenfant.Id = int.Parse(dr["idEnf"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsenfant.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsenfant.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsenfant.Taille = double.Parse(dr["taille"].ToString());
                            varclsenfant.Senn = dr["senn"].ToString();
                            varclsenfant.Soinsducordo = dr["soinsDuCordo"].ToString();
                            if (!dr["miseAusienDansHeurQuiSuitAccouchement"].ToString().Trim().Equals("")) varclsenfant.Miseausiendansheurquisuitaccouchement = bool.Parse(dr["miseAusienDansHeurQuiSuitAccouchement"].ToString());
                            if (!dr["pc"].ToString().Trim().Equals("")) varclsenfant.Pc = int.Parse(dr["pc"].ToString());
                            varclsenfant.Malformation = dr["malformation"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsenfant.IdPers = int.Parse(dr["id"].ToString());
                            varclsenfant.Nom = dr["nom"].ToString();
                            varclsenfant.Postnom = dr["postnom"].ToString();
                            varclsenfant.Prenom = dr["prenom"].ToString();
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            varclsenfant.Etatcivil = dr["etatcivil"].ToString();
                            varclsenfant.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsenfant.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsenfant.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsenfant.Photo = (Byte[])dr["photo"];
                            lstclsenfant.Add(varclsenfant);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsenfant;
        }

        public List<clsenfant> getAllClsenfant()
        {
            List<clsenfant> lstclsenfant = new List<clsenfant>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,enfant.id AS idEnf,enfant.id_maladegrosse,enfant.malformation,enfant.miseAusienDansHeurQuiSuitAccouchement,enfant.pc,enfant.poid,enfant.senn,enfant.soinsDuCordo,enfant.taille FROM personne
                    INNER JOIN malade ON personne.id=malade.id_personne 
                    INNER JOIN maladegrosse ON malade.id=maladegrosse.id_malade
                    INNER JOIN accouchement ON maladegrosse.id=accouchement.id_maladegrosse 
                    INNER JOIN enfant ON maladegrosse.id=enfant.id_maladegrosse");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsenfant varclsenfant = null;
                        while (dr.Read())
                        {
                            varclsenfant = new clsenfant();
                            //Enfant
                            if (!dr["idEnf"].ToString().Trim().Equals("")) varclsenfant.Id = int.Parse(dr["idEnf"].ToString());
                            if (!dr["id_maladegrosse"].ToString().Trim().Equals("")) varclsenfant.Id_maladegrosse = int.Parse(dr["id_maladegrosse"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsenfant.Poid = double.Parse(dr["poid"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsenfant.Taille = double.Parse(dr["taille"].ToString());
                            varclsenfant.Senn = dr["senn"].ToString();
                            varclsenfant.Soinsducordo = dr["soinsDuCordo"].ToString();
                            if (!dr["miseAusienDansHeurQuiSuitAccouchement"].ToString().Trim().Equals("")) varclsenfant.Miseausiendansheurquisuitaccouchement = bool.Parse(dr["miseAusienDansHeurQuiSuitAccouchement"].ToString());
                            if (!dr["pc"].ToString().Trim().Equals("")) varclsenfant.Pc = int.Parse(dr["pc"].ToString());
                            varclsenfant.Malformation = dr["malformation"].ToString();
                            
                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsenfant.IdPers = int.Parse(dr["id"].ToString());
                            varclsenfant.Nom = dr["nom"].ToString();
                            varclsenfant.Postnom = dr["postnom"].ToString();
                            varclsenfant.Prenom = dr["prenom"].ToString();
                            varclsenfant.Sexe = dr["sexe"].ToString();
                            varclsenfant.Etatcivil = dr["etatcivil"].ToString();
                            varclsenfant.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsenfant.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsenfant.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsenfant.Photo = (Byte[])dr["photo"];
                            lstclsenfant.Add(varclsenfant);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsenfant;
        }

        public int insertClsenfant(clsenfant varclsenfant)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO enfant ( id_maladegrosse,poid,taille,senn,soinsDuCordo,miseAusienDansHeurQuiSuitAccouchement,pc,malformation ) VALUES (@id_maladegrosse,@poid,@taille,@senn,@soinsDuCordo,@miseAusienDansHeurQuiSuitAccouchement,@pc,@malformation  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsenfant.Id_maladegrosse));
                    if (varclsenfant.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsenfant.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsenfant.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Senn != null) cmd.Parameters.Add(getParameter(cmd, "@senn", DbType.String, 200, varclsenfant.Senn));
                    else cmd.Parameters.Add(getParameter(cmd, "@senn", DbType.String, 200, DBNull.Value));
                    if (varclsenfant.Soinsducordo != null) cmd.Parameters.Add(getParameter(cmd, "@soinsDuCordo", DbType.String, 200, varclsenfant.Soinsducordo));
                    else cmd.Parameters.Add(getParameter(cmd, "@soinsDuCordo", DbType.String, 200, DBNull.Value));
                    if (varclsenfant.Miseausiendansheurquisuitaccouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@miseAusienDansHeurQuiSuitAccouchement", DbType.Boolean, 2, varclsenfant.Miseausiendansheurquisuitaccouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@miseAusienDansHeurQuiSuitAccouchement", DbType.Boolean, 2, DBNull.Value));
                    if (varclsenfant.Pc.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pc", DbType.Int32, 4, varclsenfant.Pc));
                    else cmd.Parameters.Add(getParameter(cmd, "@pc", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Malformation != null) cmd.Parameters.Add(getParameter(cmd, "@malformation", DbType.String, 20, varclsenfant.Malformation));
                    else cmd.Parameters.Add(getParameter(cmd, "@malformation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsenfant(clsenfant varclsenfant)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE enfant  SET id_maladegrosse=@id_maladegrosse,poid=@poid,taille=@taille,senn=@senn,soinsDuCordo=@soinsDuCordo,miseAusienDansHeurQuiSuitAccouchement=@miseAusienDansHeurQuiSuitAccouchement,pc=@pc,malformation=@malformation,id_accouchement=@id_accouchement  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladegrosse", DbType.Int32, 4, varclsenfant.Id_maladegrosse));
                    if (varclsenfant.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsenfant.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsenfant.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Senn != null) cmd.Parameters.Add(getParameter(cmd, "@senn", DbType.String, 200, varclsenfant.Senn));
                    else cmd.Parameters.Add(getParameter(cmd, "@senn", DbType.String, 200, DBNull.Value));
                    if (varclsenfant.Soinsducordo != null) cmd.Parameters.Add(getParameter(cmd, "@soinsDuCordo", DbType.String, 200, varclsenfant.Soinsducordo));
                    else cmd.Parameters.Add(getParameter(cmd, "@soinsDuCordo", DbType.String, 200, DBNull.Value));
                    if (varclsenfant.Miseausiendansheurquisuitaccouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@miseAusienDansHeurQuiSuitAccouchement", DbType.Boolean, 2, varclsenfant.Miseausiendansheurquisuitaccouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@miseAusienDansHeurQuiSuitAccouchement", DbType.Boolean, 2, DBNull.Value));
                    if (varclsenfant.Pc.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pc", DbType.Int32, 4, varclsenfant.Pc));
                    else cmd.Parameters.Add(getParameter(cmd, "@pc", DbType.Int32, 4, DBNull.Value));
                    if (varclsenfant.Malformation != null) cmd.Parameters.Add(getParameter(cmd, "@malformation", DbType.String, 20, varclsenfant.Malformation));
                    else cmd.Parameters.Add(getParameter(cmd, "@malformation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsenfant.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsenfant(clsenfant varclsenfant)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM enfant  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsenfant.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSENFANT
        #region  CLSEXAMENGYNECOOBSETRICAL
        public clsexamengynecoobsetrical getClsexamengynecoobsetrical(object intid)
        {
            clsexamengynecoobsetrical varclsexamengynecoobsetrical = new clsexamengynecoobsetrical();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM examengynecoobsetrical WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id = int.Parse(dr["id"].ToString());
                            if (!dr["hu"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Hu = int.Parse(dr["hu"].ToString());
                            if (!dr["presentation"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Presentation = int.Parse(dr["presentation"].ToString());
                            if (!dr["bcf"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Bcf = int.Parse(dr["bcf"].ToString());
                            varclsexamengynecoobsetrical.Contractionuterine = dr["contractionuterine"].ToString();
                            varclsexamengynecoobsetrical.Mfa = dr["mfa"].ToString();
                            varclsexamengynecoobsetrical.Exauspeculum = dr["exauspeculum"].ToString();
                            varclsexamengynecoobsetrical.Colaspect = dr["colaspect"].ToString();
                            if (!dr["tvcolefface"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcolefface = int.Parse(dr["tvcolefface"].ToString());
                            if (!dr["tvcoldilate"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcoldilate = int.Parse(dr["tvcoldilate"].ToString());
                            varclsexamengynecoobsetrical.Pochedeeaux = dr["pochedeeaux"].ToString();
                            if (!dr["dateheureruptrurecole"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Dateheureruptrurecole = DateTime.Parse(dr["dateheureruptrurecole"].ToString());
                            varclsexamengynecoobsetrical.Aspectduliquide = dr["aspectduliquide"].ToString();
                            varclsexamengynecoobsetrical.Degreengagement = dr["degreengagement"].ToString();
                            varclsexamengynecoobsetrical.Appreciationdubassin = dr["appreciationdubassin"].ToString();
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsexamengynecoobsetrical;
        }

        public List<clsexamengynecoobsetrical> getAllClsexamengynecoobsetrical(string criteria)
        {
            List<clsexamengynecoobsetrical> lstclsexamengynecoobsetrical = new List<clsexamengynecoobsetrical>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM examengynecoobsetrical  WHERE 1=1";
                    sql += "  OR   contractionuterine LIKE '%" + criteria + "%'";
                    sql += "  OR   mfa LIKE '%" + criteria + "%'";
                    sql += "  OR   exauspeculum LIKE '%" + criteria + "%'";
                    sql += "  OR   colaspect LIKE '%" + criteria + "%'";
                    sql += "  OR   pochedeeaux LIKE '%" + criteria + "%'";
                    sql += "  OR   aspectduliquide LIKE '%" + criteria + "%'";
                    sql += "  OR   degreengagement LIKE '%" + criteria + "%'";
                    sql += "  OR   appreciationdubassin LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsexamengynecoobsetrical varclsexamengynecoobsetrical = null;
                        while (dr.Read())
                        {

                            varclsexamengynecoobsetrical = new clsexamengynecoobsetrical();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id = int.Parse(dr["id"].ToString());
                            if (!dr["hu"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Hu = int.Parse(dr["hu"].ToString());
                            if (!dr["presentation"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Presentation = int.Parse(dr["presentation"].ToString());
                            if (!dr["bcf"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Bcf = int.Parse(dr["bcf"].ToString());
                            varclsexamengynecoobsetrical.Contractionuterine = dr["contractionuterine"].ToString();
                            varclsexamengynecoobsetrical.Mfa = dr["mfa"].ToString();
                            varclsexamengynecoobsetrical.Exauspeculum = dr["exauspeculum"].ToString();
                            varclsexamengynecoobsetrical.Colaspect = dr["colaspect"].ToString();
                            if (!dr["tvcolefface"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcolefface = int.Parse(dr["tvcolefface"].ToString());
                            if (!dr["tvcoldilate"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcoldilate = int.Parse(dr["tvcoldilate"].ToString());
                            varclsexamengynecoobsetrical.Pochedeeaux = dr["pochedeeaux"].ToString();
                            if (!dr["dateheureruptrurecole"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Dateheureruptrurecole = DateTime.Parse(dr["dateheureruptrurecole"].ToString());
                            varclsexamengynecoobsetrical.Aspectduliquide = dr["aspectduliquide"].ToString();
                            varclsexamengynecoobsetrical.Degreengagement = dr["degreengagement"].ToString();
                            varclsexamengynecoobsetrical.Appreciationdubassin = dr["appreciationdubassin"].ToString();
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsexamengynecoobsetrical.Add(varclsexamengynecoobsetrical);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamengynecoobsetrical;
        }

        public List<clsexamengynecoobsetrical> getAllClsexamengynecoobsetrical1(int criteria)
        {
            List<clsexamengynecoobsetrical> lstclsexamengynecoobsetrical = new List<clsexamengynecoobsetrical>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM examengynecoobsetrical  WHERE id_consultationprenatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsexamengynecoobsetrical varclsexamengynecoobsetrical = null;
                        while (dr.Read())
                        {
                            varclsexamengynecoobsetrical = new clsexamengynecoobsetrical();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id = int.Parse(dr["id"].ToString());
                            if (!dr["hu"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Hu = int.Parse(dr["hu"].ToString());
                            if (!dr["presentation"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Presentation = int.Parse(dr["presentation"].ToString());
                            if (!dr["bcf"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Bcf = int.Parse(dr["bcf"].ToString());
                            varclsexamengynecoobsetrical.Contractionuterine = dr["contractionuterine"].ToString();
                            varclsexamengynecoobsetrical.Mfa = dr["mfa"].ToString();
                            varclsexamengynecoobsetrical.Exauspeculum = dr["exauspeculum"].ToString();
                            varclsexamengynecoobsetrical.Colaspect = dr["colaspect"].ToString();
                            if (!dr["tvcolefface"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcolefface = int.Parse(dr["tvcolefface"].ToString());
                            if (!dr["tvcoldilate"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcoldilate = int.Parse(dr["tvcoldilate"].ToString());
                            varclsexamengynecoobsetrical.Pochedeeaux = dr["pochedeeaux"].ToString();
                            if (!dr["dateheureruptrurecole"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Dateheureruptrurecole = DateTime.Parse(dr["dateheureruptrurecole"].ToString());
                            varclsexamengynecoobsetrical.Aspectduliquide = dr["aspectduliquide"].ToString();
                            varclsexamengynecoobsetrical.Degreengagement = dr["degreengagement"].ToString();
                            varclsexamengynecoobsetrical.Appreciationdubassin = dr["appreciationdubassin"].ToString();
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsexamengynecoobsetrical.Add(varclsexamengynecoobsetrical);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamengynecoobsetrical;
        }

        public clsexamengynecoobsetrical getAllClsexamengynecoobsetrical2(int intid)
        {
            clsexamengynecoobsetrical varclsexamengynecoobsetrical = new clsexamengynecoobsetrical();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM examengynecoobsetrical WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id = int.Parse(dr["id"].ToString());
                            if (!dr["hu"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Hu = int.Parse(dr["hu"].ToString());
                            if (!dr["presentation"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Presentation = int.Parse(dr["presentation"].ToString());
                            if (!dr["bcf"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Bcf = int.Parse(dr["bcf"].ToString());
                            varclsexamengynecoobsetrical.Contractionuterine = dr["contractionuterine"].ToString();
                            varclsexamengynecoobsetrical.Mfa = dr["mfa"].ToString();
                            varclsexamengynecoobsetrical.Exauspeculum = dr["exauspeculum"].ToString();
                            varclsexamengynecoobsetrical.Colaspect = dr["colaspect"].ToString();
                            if (!dr["tvcolefface"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcolefface = int.Parse(dr["tvcolefface"].ToString());
                            if (!dr["tvcoldilate"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcoldilate = int.Parse(dr["tvcoldilate"].ToString());
                            varclsexamengynecoobsetrical.Pochedeeaux = dr["pochedeeaux"].ToString();
                            if (!dr["dateheureruptrurecole"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Dateheureruptrurecole = DateTime.Parse(dr["dateheureruptrurecole"].ToString());
                            varclsexamengynecoobsetrical.Aspectduliquide = dr["aspectduliquide"].ToString();
                            varclsexamengynecoobsetrical.Degreengagement = dr["degreengagement"].ToString();
                            varclsexamengynecoobsetrical.Appreciationdubassin = dr["appreciationdubassin"].ToString();
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsexamengynecoobsetrical;
        }

        public List<clsexamengynecoobsetrical> getAllClsexamengynecoobsetrical()
        {
            List<clsexamengynecoobsetrical> lstclsexamengynecoobsetrical = new List<clsexamengynecoobsetrical>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM examengynecoobsetrical ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsexamengynecoobsetrical varclsexamengynecoobsetrical = null;
                        while (dr.Read())
                        {

                            varclsexamengynecoobsetrical = new clsexamengynecoobsetrical();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id = int.Parse(dr["id"].ToString());
                            if (!dr["hu"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Hu = int.Parse(dr["hu"].ToString());
                            if (!dr["presentation"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Presentation = int.Parse(dr["presentation"].ToString());
                            if (!dr["bcf"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Bcf = int.Parse(dr["bcf"].ToString());
                            varclsexamengynecoobsetrical.Contractionuterine = dr["contractionuterine"].ToString();
                            varclsexamengynecoobsetrical.Mfa = dr["mfa"].ToString();
                            varclsexamengynecoobsetrical.Exauspeculum = dr["exauspeculum"].ToString();
                            varclsexamengynecoobsetrical.Colaspect = dr["colaspect"].ToString();
                            if (!dr["tvcolefface"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcolefface = int.Parse(dr["tvcolefface"].ToString());
                            if (!dr["tvcoldilate"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Tvcoldilate = int.Parse(dr["tvcoldilate"].ToString());
                            varclsexamengynecoobsetrical.Pochedeeaux = dr["pochedeeaux"].ToString();
                            if (!dr["dateheureruptrurecole"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Dateheureruptrurecole = DateTime.Parse(dr["dateheureruptrurecole"].ToString());
                            varclsexamengynecoobsetrical.Aspectduliquide = dr["aspectduliquide"].ToString();
                            varclsexamengynecoobsetrical.Degreengagement = dr["degreengagement"].ToString();
                            varclsexamengynecoobsetrical.Appreciationdubassin = dr["appreciationdubassin"].ToString();
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsexamengynecoobsetrical.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsexamengynecoobsetrical.Add(varclsexamengynecoobsetrical);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamengynecoobsetrical;
        }

        public int insertClsexamengynecoobsetrical(clsexamengynecoobsetrical varclsexamengynecoobsetrical)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string value1 = "", value2 = "", value3 = "", value4 = "", value5 = "", value6 = "";
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Exauspeculum)) value1 = "Si pertes des eaux";
                    else value1 = varclsexamengynecoobsetrical.Exauspeculum;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Colaspect)) value2 = "Ancien soin";
                    else value2 = varclsexamengynecoobsetrical.Colaspect;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Pochedeeaux)) value3 = "Rompue";
                    else value3 = varclsexamengynecoobsetrical.Pochedeeaux;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Aspectduliquide)) value4 = "Clairex";
                    else value4 = varclsexamengynecoobsetrical.Aspectduliquide;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Degreengagement)) value5 = "haut";
                    else value5 = varclsexamengynecoobsetrical.Degreengagement;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Appreciationdubassin)) value6 = "bon";
                    else value6 = varclsexamengynecoobsetrical.Appreciationdubassin;

                    cmd.CommandText = string.Format("INSERT INTO examengynecoobsetrical ( hu,presentation,bcf,contractionuterine,mfa,exauspeculum,colaspect,tvcolefface,tvcoldilate,pochedeeaux,dateheureruptrurecole,aspectduliquide,degreengagement,appreciationdubassin,id_consultationprenatal ) VALUES (@hu,@presentation,@bcf,@contractionuterine,@mfa,@exauspeculum,@colaspect,@tvcolefface,@tvcoldilate,@pochedeeaux,@dateheureruptrurecole,@aspectduliquide,@degreengagement,@appreciationdubassin,@id_consultationprenatal  )");
                    if (varclsexamengynecoobsetrical.Hu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@hu", DbType.Int32, 4, varclsexamengynecoobsetrical.Hu));
                    else cmd.Parameters.Add(getParameter(cmd, "@hu", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Presentation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@presentation", DbType.Int32, 4, varclsexamengynecoobsetrical.Presentation));
                    else cmd.Parameters.Add(getParameter(cmd, "@presentation", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Bcf.HasValue) cmd.Parameters.Add(getParameter(cmd, "@bcf", DbType.Int32, 4, varclsexamengynecoobsetrical.Bcf));
                    else cmd.Parameters.Add(getParameter(cmd, "@bcf", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Contractionuterine != null) cmd.Parameters.Add(getParameter(cmd, "@contractionuterine", DbType.String, 100, varclsexamengynecoobsetrical.Contractionuterine));
                    else cmd.Parameters.Add(getParameter(cmd, "@contractionuterine", DbType.String, 100, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Mfa != null) cmd.Parameters.Add(getParameter(cmd, "@mfa", DbType.String, 100, varclsexamengynecoobsetrical.Mfa));
                    else cmd.Parameters.Add(getParameter(cmd, "@mfa", DbType.String, 100, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Exauspeculum != null) cmd.Parameters.Add(getParameter(cmd, "@exauspeculum", DbType.String, 100, value1));
                    else cmd.Parameters.Add(getParameter(cmd, "@exauspeculum", DbType.String, 100, "Si pertes des eaux"));
                    if (varclsexamengynecoobsetrical.Colaspect != null) cmd.Parameters.Add(getParameter(cmd, "@colaspect", DbType.String, 100, value2));
                    else cmd.Parameters.Add(getParameter(cmd, "@colaspect", DbType.String, 100, "Ancien soin"));
                    if (varclsexamengynecoobsetrical.Tvcolefface.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tvcolefface", DbType.Int32, 4, varclsexamengynecoobsetrical.Tvcolefface));
                    else cmd.Parameters.Add(getParameter(cmd, "@tvcolefface", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Tvcoldilate.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tvcoldilate", DbType.Int32, 4, varclsexamengynecoobsetrical.Tvcoldilate));
                    else cmd.Parameters.Add(getParameter(cmd, "@tvcoldilate", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Pochedeeaux != null) cmd.Parameters.Add(getParameter(cmd, "@pochedeeaux", DbType.String, 100, value3));
                    else cmd.Parameters.Add(getParameter(cmd, "@pochedeeaux", DbType.String, 100, "Rompue"));
                    if (varclsexamengynecoobsetrical.Dateheureruptrurecole.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateheureruptrurecole", DbType.DateTime, 8, varclsexamengynecoobsetrical.Dateheureruptrurecole));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateheureruptrurecole", DbType.DateTime, 8, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Aspectduliquide != null) cmd.Parameters.Add(getParameter(cmd, "@aspectduliquide", DbType.String, 100, value4));
                    else cmd.Parameters.Add(getParameter(cmd, "@aspectduliquide", DbType.String, 100, "Clairex"));
                    if (varclsexamengynecoobsetrical.Degreengagement != null) cmd.Parameters.Add(getParameter(cmd, "@degreengagement", DbType.String, 100, value5));
                    else cmd.Parameters.Add(getParameter(cmd, "@degreengagement", DbType.String, 100, "haut"));
                    if (varclsexamengynecoobsetrical.Appreciationdubassin != null) cmd.Parameters.Add(getParameter(cmd, "@appreciationdubassin", DbType.String, 100, value6));
                    else cmd.Parameters.Add(getParameter(cmd, "@appreciationdubassin", DbType.String, 100, "bon"));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationprenatal", DbType.Int32, 4, varclsexamengynecoobsetrical.Id_consultationprenatal));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsexamengynecoobsetrical(clsexamengynecoobsetrical varclsexamengynecoobsetrical)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string value1 = "", value2 = "", value3 = "", value4 = "", value5 = "", value6 = "";
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Exauspeculum)) value1 = "Si pertes des eaux";
                    else value1 = varclsexamengynecoobsetrical.Exauspeculum;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Colaspect)) value2 = "Ancien soin";
                    else value2 = varclsexamengynecoobsetrical.Colaspect;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Pochedeeaux)) value3 = "Rompue";
                    else value3 = varclsexamengynecoobsetrical.Pochedeeaux;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Aspectduliquide)) value4 = "Clairex";
                    else value4 = varclsexamengynecoobsetrical.Aspectduliquide;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Degreengagement)) value5 = "haut";
                    else value5 = varclsexamengynecoobsetrical.Degreengagement;
                    if (string.IsNullOrEmpty(varclsexamengynecoobsetrical.Appreciationdubassin)) value6 = "bon";
                    else value6 = varclsexamengynecoobsetrical.Appreciationdubassin;

                    cmd.CommandText = string.Format("UPDATE examengynecoobsetrical  SET hu=@hu,presentation=@presentation,bcf=@bcf,contractionuterine=@contractionuterine,mfa=@mfa,exauspeculum=@exauspeculum,colaspect=@colaspect,tvcolefface=@tvcolefface,tvcoldilate=@tvcoldilate,pochedeeaux=@pochedeeaux,dateheureruptrurecole=@dateheureruptrurecole,aspectduliquide=@aspectduliquide,degreengagement=@degreengagement,appreciationdubassin=@appreciationdubassin,id_consultationprenatal=@id_consultationprenatal  WHERE 1=1  AND id=@id ");
                    if (varclsexamengynecoobsetrical.Hu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@hu", DbType.Int32, 4, varclsexamengynecoobsetrical.Hu));
                    else cmd.Parameters.Add(getParameter(cmd, "@hu", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Presentation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@presentation", DbType.Int32, 4, varclsexamengynecoobsetrical.Presentation));
                    else cmd.Parameters.Add(getParameter(cmd, "@presentation", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Bcf.HasValue) cmd.Parameters.Add(getParameter(cmd, "@bcf", DbType.Int32, 4, varclsexamengynecoobsetrical.Bcf));
                    else cmd.Parameters.Add(getParameter(cmd, "@bcf", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Contractionuterine != null) cmd.Parameters.Add(getParameter(cmd, "@contractionuterine", DbType.String, 100, varclsexamengynecoobsetrical.Contractionuterine));
                    else cmd.Parameters.Add(getParameter(cmd, "@contractionuterine", DbType.String, 100, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Mfa != null) cmd.Parameters.Add(getParameter(cmd, "@mfa", DbType.String, 100, varclsexamengynecoobsetrical.Mfa));
                    else cmd.Parameters.Add(getParameter(cmd, "@mfa", DbType.String, 100, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Exauspeculum != null) cmd.Parameters.Add(getParameter(cmd, "@exauspeculum", DbType.String, 100, value1));
                    else cmd.Parameters.Add(getParameter(cmd, "@exauspeculum", DbType.String, 100, "Si pertes des eaux"));
                    if (varclsexamengynecoobsetrical.Colaspect != null) cmd.Parameters.Add(getParameter(cmd, "@colaspect", DbType.String, 100, value2));
                    else cmd.Parameters.Add(getParameter(cmd, "@colaspect", DbType.String, 100, "Ancien soin"));
                    if (varclsexamengynecoobsetrical.Tvcolefface.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tvcolefface", DbType.Int32, 4, varclsexamengynecoobsetrical.Tvcolefface));
                    else cmd.Parameters.Add(getParameter(cmd, "@tvcolefface", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Tvcoldilate.HasValue) cmd.Parameters.Add(getParameter(cmd, "@tvcoldilate", DbType.Int32, 4, varclsexamengynecoobsetrical.Tvcoldilate));
                    else cmd.Parameters.Add(getParameter(cmd, "@tvcoldilate", DbType.Int32, 4, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Pochedeeaux != null) cmd.Parameters.Add(getParameter(cmd, "@pochedeeaux", DbType.String, 100, value3));
                    else cmd.Parameters.Add(getParameter(cmd, "@pochedeeaux", DbType.String, 100, "Rompue"));
                    if (varclsexamengynecoobsetrical.Dateheureruptrurecole.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateheureruptrurecole", DbType.DateTime, 8, varclsexamengynecoobsetrical.Dateheureruptrurecole));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateheureruptrurecole", DbType.DateTime, 8, DBNull.Value));
                    if (varclsexamengynecoobsetrical.Aspectduliquide != null) cmd.Parameters.Add(getParameter(cmd, "@aspectduliquide", DbType.String, 100, value4));
                    else cmd.Parameters.Add(getParameter(cmd, "@aspectduliquide", DbType.String, 100, "Clairex"));
                    if (varclsexamengynecoobsetrical.Degreengagement != null) cmd.Parameters.Add(getParameter(cmd, "@degreengagement", DbType.String, 100, value5));
                    else cmd.Parameters.Add(getParameter(cmd, "@degreengagement", DbType.String, 100, "haut"));
                    if (varclsexamengynecoobsetrical.Appreciationdubassin != null) cmd.Parameters.Add(getParameter(cmd, "@appreciationdubassin", DbType.String, 100, value6));
                    else cmd.Parameters.Add(getParameter(cmd, "@appreciationdubassin", DbType.String, 100, "bon"));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationprenatal", DbType.Int32, 4, varclsexamengynecoobsetrical.Id_consultationprenatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsexamengynecoobsetrical.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsexamengynecoobsetrical(clsexamengynecoobsetrical varclsexamengynecoobsetrical)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM examengynecoobsetrical  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsexamengynecoobsetrical.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSEXAMENGYNECOOBSETRICAL
        #region  CLSENTECEDENTMEDICAUXOBSETRICAUX
        public clsentecedentmedicauxobsetricaux getClsentecedentmedicauxobsetricaux(object intid)
        {
            clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux = new clsentecedentmedicauxobsetricaux();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM entecedentmedicauxobsetricaux WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id = int.Parse(dr["id"].ToString());
                            if (!dr["nombreenfantvivant"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantvivant = int.Parse(dr["nombreenfantvivant"].ToString());
                            if (!dr["nombreenfantmort"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmort = int.Parse(dr["nombreenfantmort"].ToString());
                            if (!dr["nombreenfantmordnee"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee = int.Parse(dr["nombreenfantmordnee"].ToString());
                            if (!dr["mortavant7jour"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Mortavant7jour = int.Parse(dr["mortavant7jour"].ToString());
                            if (!dr["datedernieraccouchement"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Datedernieraccouchement = DateTime.Parse(dr["datedernieraccouchement"].ToString());
                            if (!dr["eutocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Eutocine = int.Parse(dr["eutocine"].ToString());
                            if (!dr["dynstocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Dynstocine = int.Parse(dr["dynstocine"].ToString());
                            if (!dr["nbrebebepoidssuperieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4 = int.Parse(dr["nbrebebepoidssuperieura4"].ToString());
                            if (!dr["nbrebebepoidsinferieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4 = int.Parse(dr["nbrebebepoidsinferieura4"].ToString());
                            if (!dr["nbregrossessemultiple"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple = int.Parse(dr["nbregrossessemultiple"].ToString());
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsentecedentmedicauxobsetricaux;
        }

        public List<clsentecedentmedicauxobsetricaux> getAllClsentecedentmedicauxobsetricaux(string criteria)
        {
            List<clsentecedentmedicauxobsetricaux> lstclsentecedentmedicauxobsetricaux = new List<clsentecedentmedicauxobsetricaux>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM entecedentmedicauxobsetricaux  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux = null;
                        while (dr.Read())
                        {

                            varclsentecedentmedicauxobsetricaux = new clsentecedentmedicauxobsetricaux();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id = int.Parse(dr["id"].ToString());
                            if (!dr["nombreenfantvivant"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantvivant = int.Parse(dr["nombreenfantvivant"].ToString());
                            if (!dr["nombreenfantmort"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmort = int.Parse(dr["nombreenfantmort"].ToString());
                            if (!dr["nombreenfantmordnee"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee = int.Parse(dr["nombreenfantmordnee"].ToString());
                            if (!dr["mortavant7jour"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Mortavant7jour = int.Parse(dr["mortavant7jour"].ToString());
                            if (!dr["datedernieraccouchement"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Datedernieraccouchement = DateTime.Parse(dr["datedernieraccouchement"].ToString());
                            if (!dr["eutocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Eutocine = int.Parse(dr["eutocine"].ToString());
                            if (!dr["dynstocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Dynstocine = int.Parse(dr["dynstocine"].ToString());
                            if (!dr["nbrebebepoidssuperieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4 = int.Parse(dr["nbrebebepoidssuperieura4"].ToString());
                            if (!dr["nbrebebepoidsinferieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4 = int.Parse(dr["nbrebebepoidsinferieura4"].ToString());
                            if (!dr["nbregrossessemultiple"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple = int.Parse(dr["nbregrossessemultiple"].ToString());
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsentecedentmedicauxobsetricaux.Add(varclsentecedentmedicauxobsetricaux);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsentecedentmedicauxobsetricaux;
        }

        public List<clsentecedentmedicauxobsetricaux> getAllClsentecedentmedicauxobsetricaux1(int criteria)
        {
            List<clsentecedentmedicauxobsetricaux> lstclsentecedentmedicauxobsetricaux = new List<clsentecedentmedicauxobsetricaux>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM entecedentmedicauxobsetricaux  WHERE id_consultationprenatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux = null;
                        while (dr.Read())
                        {
                            varclsentecedentmedicauxobsetricaux = new clsentecedentmedicauxobsetricaux();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id = int.Parse(dr["id"].ToString());
                            if (!dr["nombreenfantvivant"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantvivant = int.Parse(dr["nombreenfantvivant"].ToString());
                            if (!dr["nombreenfantmort"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmort = int.Parse(dr["nombreenfantmort"].ToString());
                            if (!dr["nombreenfantmordnee"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee = int.Parse(dr["nombreenfantmordnee"].ToString());
                            if (!dr["mortavant7jour"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Mortavant7jour = int.Parse(dr["mortavant7jour"].ToString());
                            if (!dr["datedernieraccouchement"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Datedernieraccouchement = DateTime.Parse(dr["datedernieraccouchement"].ToString());
                            if (!dr["eutocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Eutocine = int.Parse(dr["eutocine"].ToString());
                            if (!dr["dynstocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Dynstocine = int.Parse(dr["dynstocine"].ToString());
                            if (!dr["nbrebebepoidssuperieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4 = int.Parse(dr["nbrebebepoidssuperieura4"].ToString());
                            if (!dr["nbrebebepoidsinferieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4 = int.Parse(dr["nbrebebepoidsinferieura4"].ToString());
                            if (!dr["nbregrossessemultiple"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple = int.Parse(dr["nbregrossessemultiple"].ToString());
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsentecedentmedicauxobsetricaux.Add(varclsentecedentmedicauxobsetricaux);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsentecedentmedicauxobsetricaux;
        }

        public clsentecedentmedicauxobsetricaux getAllClsentecedentmedicauxobsetricaux2(int intid)
        {
            clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux = new clsentecedentmedicauxobsetricaux();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM entecedentmedicauxobsetricaux WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id = int.Parse(dr["id"].ToString());
                            if (!dr["nombreenfantvivant"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantvivant = int.Parse(dr["nombreenfantvivant"].ToString());
                            if (!dr["nombreenfantmort"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmort = int.Parse(dr["nombreenfantmort"].ToString());
                            if (!dr["nombreenfantmordnee"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee = int.Parse(dr["nombreenfantmordnee"].ToString());
                            if (!dr["mortavant7jour"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Mortavant7jour = int.Parse(dr["mortavant7jour"].ToString());
                            if (!dr["datedernieraccouchement"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Datedernieraccouchement = DateTime.Parse(dr["datedernieraccouchement"].ToString());
                            if (!dr["eutocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Eutocine = int.Parse(dr["eutocine"].ToString());
                            if (!dr["dynstocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Dynstocine = int.Parse(dr["dynstocine"].ToString());
                            if (!dr["nbrebebepoidssuperieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4 = int.Parse(dr["nbrebebepoidssuperieura4"].ToString());
                            if (!dr["nbrebebepoidsinferieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4 = int.Parse(dr["nbrebebepoidsinferieura4"].ToString());
                            if (!dr["nbregrossessemultiple"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple = int.Parse(dr["nbregrossessemultiple"].ToString());
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsentecedentmedicauxobsetricaux;
        }

        public List<clsentecedentmedicauxobsetricaux> getAllClsentecedentmedicauxobsetricaux()
        {
            List<clsentecedentmedicauxobsetricaux> lstclsentecedentmedicauxobsetricaux = new List<clsentecedentmedicauxobsetricaux>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM entecedentmedicauxobsetricaux ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux = null;
                        while (dr.Read())
                        {

                            varclsentecedentmedicauxobsetricaux = new clsentecedentmedicauxobsetricaux();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id = int.Parse(dr["id"].ToString());
                            if (!dr["nombreenfantvivant"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantvivant = int.Parse(dr["nombreenfantvivant"].ToString());
                            if (!dr["nombreenfantmort"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmort = int.Parse(dr["nombreenfantmort"].ToString());
                            if (!dr["nombreenfantmordnee"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee = int.Parse(dr["nombreenfantmordnee"].ToString());
                            if (!dr["mortavant7jour"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Mortavant7jour = int.Parse(dr["mortavant7jour"].ToString());
                            if (!dr["datedernieraccouchement"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Datedernieraccouchement = DateTime.Parse(dr["datedernieraccouchement"].ToString());
                            if (!dr["eutocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Eutocine = int.Parse(dr["eutocine"].ToString());
                            if (!dr["dynstocine"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Dynstocine = int.Parse(dr["dynstocine"].ToString());
                            if (!dr["nbrebebepoidssuperieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4 = int.Parse(dr["nbrebebepoidssuperieura4"].ToString());
                            if (!dr["nbrebebepoidsinferieura4"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4 = int.Parse(dr["nbrebebepoidsinferieura4"].ToString());
                            if (!dr["nbregrossessemultiple"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple = int.Parse(dr["nbregrossessemultiple"].ToString());
                            if (!dr["id_consultationprenatal"].ToString().Trim().Equals("")) varclsentecedentmedicauxobsetricaux.Id_consultationprenatal = int.Parse(dr["id_consultationprenatal"].ToString());
                            lstclsentecedentmedicauxobsetricaux.Add(varclsentecedentmedicauxobsetricaux);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsentecedentmedicauxobsetricaux;
        }

        public int insertClsentecedentmedicauxobsetricaux(clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO entecedentmedicauxobsetricaux ( nombreenfantvivant,nombreenfantmort,nombreenfantmordnee,mortavant7jour,datedernieraccouchement,eutocine,dynstocine,nbrebebepoidssuperieura4,nbrebebepoidsinferieura4,nbregrossessemultiple,id_consultationprenatal ) VALUES (@nombreenfantvivant,@nombreenfantmort,@nombreenfantmordnee,@mortavant7jour,@datedernieraccouchement,@eutocine,@dynstocine,@nbrebebepoidssuperieura4,@nbrebebepoidsinferieura4,@nbregrossessemultiple,@id_consultationprenatal  )");
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantvivant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantvivant", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantvivant));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantvivant", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantmort.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmort", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantmort));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmort", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmordnee", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmordnee", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Mortavant7jour.HasValue) cmd.Parameters.Add(getParameter(cmd, "@mortavant7jour", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Mortavant7jour));
                    else cmd.Parameters.Add(getParameter(cmd, "@mortavant7jour", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Datedernieraccouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedernieraccouchement", DbType.DateTime, 8, varclsentecedentmedicauxobsetricaux.Datedernieraccouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedernieraccouchement", DbType.DateTime, 8, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Eutocine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@eutocine", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Eutocine));
                    else cmd.Parameters.Add(getParameter(cmd, "@eutocine", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Dynstocine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dynstocine", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Dynstocine));
                    else cmd.Parameters.Add(getParameter(cmd, "@dynstocine", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidssuperieura4", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidssuperieura4", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidsinferieura4", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidsinferieura4", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbregrossessemultiple", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbregrossessemultiple", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationprenatal", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Id_consultationprenatal));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsentecedentmedicauxobsetricaux(clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE entecedentmedicauxobsetricaux  SET nombreenfantvivant=@nombreenfantvivant,nombreenfantmort=@nombreenfantmort,nombreenfantmordnee=@nombreenfantmordnee,mortavant7jour=@mortavant7jour,datedernieraccouchement=@datedernieraccouchement,eutocine=@eutocine,dynstocine=@dynstocine,nbrebebepoidssuperieura4=@nbrebebepoidssuperieura4,nbrebebepoidsinferieura4=@nbrebebepoidsinferieura4,nbregrossessemultiple=@nbregrossessemultiple,id_consultationprenatal=@id_consultationprenatal  WHERE 1=1  AND id=@id ");
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantvivant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantvivant", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantvivant));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantvivant", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantmort.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmort", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantmort));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmort", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmordnee", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nombreenfantmordnee));
                    else cmd.Parameters.Add(getParameter(cmd, "@nombreenfantmordnee", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Mortavant7jour.HasValue) cmd.Parameters.Add(getParameter(cmd, "@mortavant7jour", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Mortavant7jour));
                    else cmd.Parameters.Add(getParameter(cmd, "@mortavant7jour", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Datedernieraccouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datedernieraccouchement", DbType.DateTime, 8, varclsentecedentmedicauxobsetricaux.Datedernieraccouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@datedernieraccouchement", DbType.DateTime, 8, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Eutocine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@eutocine", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Eutocine));
                    else cmd.Parameters.Add(getParameter(cmd, "@eutocine", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Dynstocine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dynstocine", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Dynstocine));
                    else cmd.Parameters.Add(getParameter(cmd, "@dynstocine", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidssuperieura4", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbrebebepoidssuperieura4));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidssuperieura4", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidsinferieura4", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbrebebepoidsinferieura4));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbrebebepoidsinferieura4", DbType.Int32, 4, DBNull.Value));
                    if (varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple.HasValue) cmd.Parameters.Add(getParameter(cmd, "@nbregrossessemultiple", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Nbregrossessemultiple));
                    else cmd.Parameters.Add(getParameter(cmd, "@nbregrossessemultiple", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationprenatal", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Id_consultationprenatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsentecedentmedicauxobsetricaux(clsentecedentmedicauxobsetricaux varclsentecedentmedicauxobsetricaux)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM entecedentmedicauxobsetricaux  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsentecedentmedicauxobsetricaux.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSENTECEDENTMEDICAUXOBSETRICAUX
        #region  CLSSUIVICROISSANCE
        public clssuivicroissance getClssuivicroissance(object intid)
        {
            clssuivicroissance varclssuivicroissance = new clssuivicroissance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM suivicroissance WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssuivicroissance;
        }

        public List<clssuivicroissance> getAllClssuivicroissance(string criteria)
        {
            List<clssuivicroissance> lstclssuivicroissance = new List<clssuivicroissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM suivicroissance  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clssuivicroissance varclssuivicroissance = null;
                        while (dr.Read())
                        {
                            varclssuivicroissance = new clssuivicroissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclssuivicroissance.Add(varclssuivicroissance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssuivicroissance;
        }

        public List<clssuivicroissance> getAllClssuivicroissance1(int criteria)
        {
            List<clssuivicroissance> lstclssuivicroissance = new List<clssuivicroissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM suivicroissance  WHERE id_maladeenconsultationpostnatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssuivicroissance varclssuivicroissance = null;
                        while (dr.Read())
                        {
                            varclssuivicroissance = new clssuivicroissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclssuivicroissance.Add(varclssuivicroissance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssuivicroissance;
        }

        public List<clssuivicroissance> getAllClssuivicroissance2(int criteria)
        {
            List<clssuivicroissance> lstclssuivicroissance = new List<clssuivicroissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM suivicroissance  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssuivicroissance varclssuivicroissance = null;
                        while (dr.Read())
                        {
                            varclssuivicroissance = new clssuivicroissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclssuivicroissance.Add(varclssuivicroissance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssuivicroissance;
        }

        public clssuivicroissance getClssuivicroissance3(object intid)
        {
            clssuivicroissance varclssuivicroissance = new clssuivicroissance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT suivicroissance.* FROM suivicroissance
            INNER JOIN consultation_fiche ON suivicroissance.id=consultation_fiche.id_suivicroissance
            WHERE consultation_fiche.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssuivicroissance;
        }

        public List<clssuivicroissance> getAllClssuivicroissance()
        {
            List<clssuivicroissance> lstclssuivicroissance = new List<clssuivicroissance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM suivicroissance ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clssuivicroissance varclssuivicroissance = null;
                        while (dr.Read())
                        {

                            varclssuivicroissance = new clssuivicroissance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssuivicroissance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["mois"].ToString().Trim().Equals("")) varclssuivicroissance.Mois = int.Parse(dr["mois"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclssuivicroissance.Poid = int.Parse(dr["poid"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclssuivicroissance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclssuivicroissance.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclssuivicroissance.Add(varclssuivicroissance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssuivicroissance;
        }

        public int insertClssuivicroissance(clssuivicroissance varclssuivicroissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO suivicroissance ( mois,poid,date,id_maladeenconsultationpostnatal ) VALUES (@mois,@poid,@date,@id_maladeenconsultationpostnatal  )");
                    if (varclssuivicroissance.Mois.HasValue) cmd.Parameters.Add(getParameter(cmd, "@mois", DbType.Int32, 4, varclssuivicroissance.Mois));
                    else cmd.Parameters.Add(getParameter(cmd, "@mois", DbType.Int32, 4, DBNull.Value));
                    if (varclssuivicroissance.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, varclssuivicroissance.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, DBNull.Value));
                    if (varclssuivicroissance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclssuivicroissance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclssuivicroissance.Id_maladeenconsultationpostnatal));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClssuivicroissance(clssuivicroissance varclssuivicroissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE suivicroissance  SET mois=@mois,poid=@poid,date=@date,id_maladeenconsultationpostnatal=@id_maladeenconsultationpostnatal  WHERE 1=1  AND id=@id ");
                    if (varclssuivicroissance.Mois.HasValue) cmd.Parameters.Add(getParameter(cmd, "@mois", DbType.Int32, 4, varclssuivicroissance.Mois));
                    else cmd.Parameters.Add(getParameter(cmd, "@mois", DbType.Int32, 4, DBNull.Value));
                    if (varclssuivicroissance.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, varclssuivicroissance.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Int32, 4, DBNull.Value));
                    if (varclssuivicroissance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclssuivicroissance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclssuivicroissance.Id_maladeenconsultationpostnatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssuivicroissance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClssuivicroissance(clssuivicroissance varclssuivicroissance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM suivicroissance  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssuivicroissance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSSUIVICROISSANCE
        #region  CLSRENDEZVOUS
        public clsrendezvous getClsrendezvous(object intid)
        {
            clsrendezvous varclsrendezvous = new clsrendezvous();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM rendezvous WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsrendezvous;
        }

        public List<clsrendezvous> getAllClsrendezvous(string criteria)
        {
            List<clsrendezvous> lstclsrendezvous = new List<clsrendezvous>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM rendezvous  WHERE 1=1";
                    sql += "  OR   observation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsrendezvous varclsrendezvous = null;
                        while (dr.Read())
                        {

                            varclsrendezvous = new clsrendezvous();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclsrendezvous.Add(varclsrendezvous);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsrendezvous;
        }

        public List<clsrendezvous> getAllClsrendezvous1(int criteria)
        {
            List<clsrendezvous> lstclsrendezvous = new List<clsrendezvous>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM rendezvous  WHERE id_maladeenconsultationpostnatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsrendezvous varclsrendezvous = null;
                        while (dr.Read())
                        {
                            varclsrendezvous = new clsrendezvous();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclsrendezvous.Add(varclsrendezvous);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsrendezvous;
        }

        public List<clshospitalisation> getAllClshospitalisation1(int criteria)
        {
            List<clshospitalisation> lstclshospitalisation = new List<clshospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM hospitalisation  WHERE id_malade=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clshospitalisation varclshospitalisation = null;
                        while (dr.Read())
                        {
                            varclshospitalisation = new clshospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclshospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["datedebut"].ToString().Trim().Equals("")) varclshospitalisation.Datedebut = DateTime.Parse(dr["datedebut"].ToString());
                            if (!dr["datefin"].ToString().Trim().Equals("")) varclshospitalisation.Datefin = DateTime.Parse(dr["datefin"].ToString());
                            if (!dr["id_chambre"].ToString().Trim().Equals("")) varclshospitalisation.Id_chambre = int.Parse(dr["id_chambre"].ToString());
                            lstclshospitalisation.Add(varclshospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclshospitalisation;
        }

        public List<clsrendezvous> getAllClsrendezvous2(int criteria)
        {
            List<clsrendezvous> lstclsrendezvous = new List<clsrendezvous>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM rendezvous  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsrendezvous varclsrendezvous = null;
                        if (dr.Read())
                        {
                            varclsrendezvous = new clsrendezvous();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclsrendezvous.Add(varclsrendezvous);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsrendezvous;
        }

        public clsrendezvous getClsrendezvous3(int intid)
        {
            clsrendezvous varclsrendezvous = new clsrendezvous();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT rendezvous.id,rendezvous.date,rendezvous.observation,rendezvous.id_maladeenconsultationpostnatal FROM rendezvous
            INNER JOIN consultation_fiche ON rendezvous.id=consultation_fiche.id_rendezvous
            WHERE consultation_fiche.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsrendezvous;
        }

        public List<clsrendezvous> getAllClsrendezvous()
        {
            List<clsrendezvous> lstclsrendezvous = new List<clsrendezvous>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM rendezvous ORDER BY date ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsrendezvous varclsrendezvous = null;
                        while (dr.Read())
                        {

                            varclsrendezvous = new clsrendezvous();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsrendezvous.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsrendezvous.Date = DateTime.Parse(dr["date"].ToString());
                            varclsrendezvous.Observation = dr["observation"].ToString();
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsrendezvous.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            lstclsrendezvous.Add(varclsrendezvous);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsrendezvous;
        }

        public int insertClsrendezvous(clsrendezvous varclsrendezvous)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO rendezvous ( date,observation,id_maladeenconsultationpostnatal ) VALUES (@date,@observation,@id_maladeenconsultationpostnatal  )");
                    if (varclsrendezvous.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsrendezvous.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsrendezvous.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 50, varclsrendezvous.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 50, DBNull.Value));
                    if (varclsrendezvous.Id_maladeenconsultationpostnatal.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclsrendezvous.Id_maladeenconsultationpostnatal));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsrendezvous(clsrendezvous varclsrendezvous)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE rendezvous  SET date=@date,observation=@observation,id_maladeenconsultationpostnatal=@id_maladeenconsultationpostnatal  WHERE 1=1  AND id=@id ");
                    if (varclsrendezvous.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsrendezvous.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsrendezvous.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 50, varclsrendezvous.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 50, DBNull.Value));
                    if (varclsrendezvous.Id_maladeenconsultationpostnatal.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclsrendezvous.Id_maladeenconsultationpostnatal));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsrendezvous.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsrendezvous(clsrendezvous varclsrendezvous)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM rendezvous  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsrendezvous.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSRENDEZVOUS
        #region  CLSVITAMINE
        public clsvitamine getClsvitamine(object intid)
        {
            clsvitamine varclsvitamine = new clsvitamine();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vitamine WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsvitamine.Id = int.Parse(dr["id"].ToString());
                            varclsvitamine.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvitamine;
        }

        public List<clsvitamine> getAllClsvitamine(string criteria)
        {
            List<clsvitamine> lstclsvitamine = new List<clsvitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM vitamine  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvitamine varclsvitamine = null;
                        while (dr.Read())
                        {

                            varclsvitamine = new clsvitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvitamine.Id = int.Parse(dr["id"].ToString());
                            varclsvitamine.Designation = dr["designation"].ToString();
                            lstclsvitamine.Add(varclsvitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvitamine;
        }

        public List<clsvitamine> getAllClsvitamine()
        {
            List<clsvitamine> lstclsvitamine = new List<clsvitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vitamine ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvitamine varclsvitamine = null;
                        while (dr.Read())
                        {

                            varclsvitamine = new clsvitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvitamine.Id = int.Parse(dr["id"].ToString());
                            varclsvitamine.Designation = dr["designation"].ToString();
                            lstclsvitamine.Add(varclsvitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvitamine;
        }

        public clsvitamine getAllClsvitamine1(int criteria)
        {
            clsvitamine varclsvitamine = new clsvitamine();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT vitamine.id,vitamine.designation FROM vitamine
            INNER JOIN prise_vitamine ON vitamine.id=prise_vitamine.id_vitamine
            WHERE prise_vitamine.id={0}", criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvitamine.Id = int.Parse(dr["id"].ToString());
                            varclsvitamine.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvitamine;
        }

        public int insertClsvitamine(clsvitamine varclsvitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO vitamine ( designation ) VALUES (@designation  )");
                    if (varclsvitamine.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsvitamine.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsvitamine(clsvitamine varclsvitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE vitamine  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsvitamine.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsvitamine.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvitamine.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsvitamine(clsvitamine varclsvitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM vitamine  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvitamine.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSVITAMINE
        #region  CLSPERIODEVACCINATION
        public clsperiodevaccination getClsperiodevaccination(object intid)
        {
            clsperiodevaccination varclsperiodevaccination = new clsperiodevaccination();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM periodevaccination WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiodevaccination.Id = int.Parse(dr["id"].ToString());
                            varclsperiodevaccination.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsperiodevaccination;
        }

        public List<clsperiodevaccination> getAllClsperiodevaccination(string criteria)
        {
            List<clsperiodevaccination> lstclsperiodevaccination = new List<clsperiodevaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM periodevaccination  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsperiodevaccination varclsperiodevaccination = null;
                        while (dr.Read())
                        {

                            varclsperiodevaccination = new clsperiodevaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiodevaccination.Id = int.Parse(dr["id"].ToString());
                            varclsperiodevaccination.Designation = dr["designation"].ToString();
                            lstclsperiodevaccination.Add(varclsperiodevaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsperiodevaccination;
        }

        public List<clsperiodevaccination> getAllClsperiodevaccination()
        {
            List<clsperiodevaccination> lstclsperiodevaccination = new List<clsperiodevaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM periodevaccination ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsperiodevaccination varclsperiodevaccination = null;
                        while (dr.Read())
                        {

                            varclsperiodevaccination = new clsperiodevaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiodevaccination.Id = int.Parse(dr["id"].ToString());
                            varclsperiodevaccination.Designation = dr["designation"].ToString();
                            lstclsperiodevaccination.Add(varclsperiodevaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsperiodevaccination;
        }

        public clsperiodevaccination getAllClsperiodevaccination1(int criteria)
        {
            clsperiodevaccination varclsperiodevaccination = new clsperiodevaccination();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT periodevaccination.id,periodevaccination.designation FROM periodevaccination
            INNER JOIN vaccination ON periodevaccination.id=vaccination.id_periodevaccination
            WHERE vaccination.id={0}", criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiodevaccination.Id = int.Parse(dr["id"].ToString());
                            varclsperiodevaccination.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsperiodevaccination;
        }

        public int insertClsperiodevaccination(clsperiodevaccination varclsperiodevaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO periodevaccination ( designation ) VALUES (@designation  )");
                    if (varclsperiodevaccination.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsperiodevaccination.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsperiodevaccination(clsperiodevaccination varclsperiodevaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE periodevaccination  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsperiodevaccination.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsperiodevaccination.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsperiodevaccination.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsperiodevaccination(clsperiodevaccination varclsperiodevaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM periodevaccination  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsperiodevaccination.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPERIODEVACCINATION
        #region  CLSVACCIN
        public clsvaccin getClsvaccin(object intid)
        {
            clsvaccin varclsvaccin = new clsvaccin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vaccin WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccin.Id = int.Parse(dr["id"].ToString());
                            varclsvaccin.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvaccin;
        }

        public List<clsvaccin> getAllClsvaccin(string criteria)
        {
            List<clsvaccin> lstclsvaccin = new List<clsvaccin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM vaccin  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvaccin varclsvaccin = null;
                        while (dr.Read())
                        {

                            varclsvaccin = new clsvaccin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccin.Id = int.Parse(dr["id"].ToString());
                            varclsvaccin.Designation = dr["designation"].ToString();
                            lstclsvaccin.Add(varclsvaccin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccin;
        }

        public List<clsvaccin> getAllClsvaccin()
        {
            List<clsvaccin> lstclsvaccin = new List<clsvaccin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vaccin ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvaccin varclsvaccin = null;
                        while (dr.Read())
                        {

                            varclsvaccin = new clsvaccin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccin.Id = int.Parse(dr["id"].ToString());
                            varclsvaccin.Designation = dr["designation"].ToString();
                            lstclsvaccin.Add(varclsvaccin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccin;
        }

        public clsvaccin getAllClsvaccin1(int criteria)
        {
            clsvaccin varclsvaccin = new clsvaccin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT vaccin.id,vaccin.designation FROM vaccin
            INNER JOIN vaccination ON vaccin.id=vaccination.id_vaccin
            WHERE vaccination.id={0}", criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccin.Id = int.Parse(dr["id"].ToString());
                            varclsvaccin.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvaccin;
        }

        public int insertClsvaccin(clsvaccin varclsvaccin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO vaccin ( designation ) VALUES (@designation  )");
                    if (varclsvaccin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsvaccin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsvaccin(clsvaccin varclsvaccin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE vaccin  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsvaccin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsvaccin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvaccin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsvaccin(clsvaccin varclsvaccin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM vaccin  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvaccin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSVACCIN
        #region  CLSVACCINATION
        public clsvaccination getClsvaccination(object intid)
        {
            clsvaccination varclsvaccination = new clsvaccination();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vaccination WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvaccination;
        }

        public List<clsvaccination> getAllClsvaccination(string criteria)
        {
            List<clsvaccination> lstclsvaccination = new List<clsvaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM vaccination  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvaccination varclsvaccination = null;
                        while (dr.Read())
                        {

                            varclsvaccination = new clsvaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                            lstclsvaccination.Add(varclsvaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccination;
        }

        public List<clsvaccination> getAllClsvaccination1(int criteria)
        {
            List<clsvaccination> lstclsvaccination = new List<clsvaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM vaccination  WHERE id_maladeenconsultationpostnatal=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsvaccination varclsvaccination = null;
                        while (dr.Read())
                        {
                            varclsvaccination = new clsvaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                            lstclsvaccination.Add(varclsvaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccination;
        }

        public List<clsvaccination> getAllClsvaccination3(int criteria)
        {
            List<clsvaccination> lstclsvaccination = new List<clsvaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM vaccination  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsvaccination varclsvaccination = null;
                        while (dr.Read())
                        {
                            varclsvaccination = new clsvaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                            lstclsvaccination.Add(varclsvaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccination;
        }

        public clsvaccination getAllClsvaccination2(int intid)
        {
            clsvaccination varclsvaccination = new clsvaccination();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vaccination WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvaccination;
        }

        public clsvaccination getAllClsvaccination4(int intid)
        {
            clsvaccination varclsvaccination = new clsvaccination();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT vaccination.* FROM vaccination
            INNER JOIN consultation_fiche ON vaccination.id=consultation_fiche.id_vaccination
            WHERE consultation_fiche.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsvaccination;
        }

        public List<clsvaccination> getAllClsvaccination()
        {
            List<clsvaccination> lstclsvaccination = new List<clsvaccination>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM vaccination ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsvaccination varclsvaccination = null;
                        while (dr.Read())
                        {

                            varclsvaccination = new clsvaccination();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsvaccination.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsvaccination.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_maladeenconsultationpostnatal"].ToString().Trim().Equals("")) varclsvaccination.Id_maladeenconsultationpostnatal = int.Parse(dr["id_maladeenconsultationpostnatal"].ToString());
                            if (!dr["id_periodevaccination"].ToString().Trim().Equals("")) varclsvaccination.Id_periodevaccination = int.Parse(dr["id_periodevaccination"].ToString());
                            if (!dr["id_prise_vitamine"].ToString().Trim().Equals("")) varclsvaccination.Id_prise_vitamine = int.Parse(dr["id_prise_vitamine"].ToString());
                            if (!dr["id_vaccin"].ToString().Trim().Equals("")) varclsvaccination.Id_vaccin = int.Parse(dr["id_vaccin"].ToString());
                            lstclsvaccination.Add(varclsvaccination);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsvaccination;
        }

        public int insertClsvaccination(clsvaccination varclsvaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO vaccination ( date,id_maladeenconsultationpostnatal,id_periodevaccination,id_prise_vitamine,id_vaccin ) VALUES (@date,@id_maladeenconsultationpostnatal,@id_periodevaccination,@id_prise_vitamine,@id_vaccin  )");
                    if (varclsvaccination.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsvaccination.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclsvaccination.Id_maladeenconsultationpostnatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id_periodevaccination", DbType.Int32, 4, varclsvaccination.Id_periodevaccination));
                    if (varclsvaccination.Id_prise_vitamine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_prise_vitamine", DbType.Int32, 4, varclsvaccination.Id_prise_vitamine));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_prise_vitamine", DbType.Int32, 4, DBNull.Value));
                    if (varclsvaccination.Id_vaccin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vaccin", DbType.Int32, 4, varclsvaccination.Id_vaccin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vaccin", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsvaccination(clsvaccination varclsvaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE vaccination  SET date=@date,id_maladeenconsultationpostnatal=@id_maladeenconsultationpostnatal,id_periodevaccination=@id_periodevaccination,id_prise_vitamine=@id_prise_vitamine,id_vaccin=@id_vaccin  WHERE 1=1  AND id=@id ");
                    if (varclsvaccination.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsvaccination.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladeenconsultationpostnatal", DbType.Int32, 4, varclsvaccination.Id_maladeenconsultationpostnatal));
                    cmd.Parameters.Add(getParameter(cmd, "@id_periodevaccination", DbType.Int32, 4, varclsvaccination.Id_periodevaccination));
                    if (varclsvaccination.Id_prise_vitamine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_prise_vitamine", DbType.Int32, 4, varclsvaccination.Id_prise_vitamine));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_prise_vitamine", DbType.Int32, 4, DBNull.Value));
                    if (varclsvaccination.Id_vaccin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vaccin", DbType.Int32, 4, varclsvaccination.Id_vaccin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vaccin", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvaccination.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsvaccination(clsvaccination varclsvaccination)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM vaccination  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsvaccination.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSVACCINATION
        #region  CLSTYPEEXAMEN
        public clstypeexamen getClstypeexamen(object intid)
        {
            clstypeexamen varclstypeexamen = new clstypeexamen();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typeexamen WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeexamen.Id = int.Parse(dr["id"].ToString());
                            varclstypeexamen.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypeexamen;
        }

        public List<clstypeexamen> getAllClstypeexamen(string criteria)
        {
            List<clstypeexamen> lstclstypeexamen = new List<clstypeexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM typeexamen  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypeexamen varclstypeexamen = null;
                        while (dr.Read())
                        {

                            varclstypeexamen = new clstypeexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeexamen.Id = int.Parse(dr["id"].ToString());
                            varclstypeexamen.Designation = dr["designation"].ToString();
                            lstclstypeexamen.Add(varclstypeexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypeexamen;
        }

        public List<clstypeexamen> getAllClstypeexamen1(int criteria)
        {
            List<clstypeexamen> lstclstypeexamen = new List<clstypeexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT typeexamen.id,typeexamen.designation FROM typeexamen 
             INNER JOIN examen ON typeexamen.id=examen.id_typeexamen 
             INNER JOIN passationexamen ON examen.id=passationexamen.id_examen
             INNER JOIN malade ON malade.id=passationexamen.id_malade WHERE malade.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstypeexamen varclstypeexamen = null;
                        while (dr.Read())
                        {
                            varclstypeexamen = new clstypeexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeexamen.Id = int.Parse(dr["id"].ToString());
                            varclstypeexamen.Designation = dr["designation"].ToString();
                            lstclstypeexamen.Add(varclstypeexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypeexamen;
        }

        public List<clstypeexamen> getAllClstypeexamen()
        {
            List<clstypeexamen> lstclstypeexamen = new List<clstypeexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM typeexamen ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstypeexamen varclstypeexamen = null;
                        while (dr.Read())
                        {

                            varclstypeexamen = new clstypeexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeexamen.Id = int.Parse(dr["id"].ToString());
                            varclstypeexamen.Designation = dr["designation"].ToString();
                            lstclstypeexamen.Add(varclstypeexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstypeexamen;
        }

        public clstypeexamen getClstypeexamen1(object intid)
        {
            clstypeexamen varclstypeexamen = new clstypeexamen();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT typeexamen.id,typeexamen.designation FROM typeexamen 
             INNER JOIN examen ON typeexamen.id=examen.id_typeexamen WHERE examen.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstypeexamen.Id = int.Parse(dr["id"].ToString());
                            varclstypeexamen.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstypeexamen;
        }

        public int insertClstypeexamen(clstypeexamen varclstypeexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO typeexamen ( designation ) VALUES (@designation  )");
                    if (varclstypeexamen.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclstypeexamen.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstypeexamen(clstypeexamen varclstypeexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE typeexamen  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclstypeexamen.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclstypeexamen.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypeexamen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstypeexamen(clstypeexamen varclstypeexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM typeexamen  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstypeexamen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTYPEEXAMEN
        #region  CLSMALADIE
        public clsmaladie getClsmaladie(object intid)
        {
            clsmaladie varclsmaladie = new clsmaladie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsmaladie.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladie;
        }

        public int getClsmaladie1(string designation)
        {
            int idMaladie = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT id FROM maladie WHERE designation=@designation";
                    cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, designation));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read()) idMaladie = int.Parse(dr["id"].ToString());
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return idMaladie;
        }

        public List<clsmaladie> getAllClsmaladie(string criteria)
        {
            List<clsmaladie> lstclsmaladie = new List<clsmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladie varclsmaladie = null;
                        while (dr.Read())
                        {

                            varclsmaladie = new clsmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsmaladie.Designation = dr["designation"].ToString();
                            lstclsmaladie.Add(varclsmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie;
        }

        public List<clsmaladie> getAllClsmaladie1(int criteria)
        {
            List<clsmaladie> lstclsmaladie = new List<clsmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT maladie.id,maladie.designation FROM maladie  
             INNER JOIN passationexamen ON maladie.id=passationexamen.id_maladie 
             INNER JOIN malade ON malade.id=passationexamen.id_malade WHERE malade.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladie varclsmaladie = null;
                        while (dr.Read())
                        {
                            varclsmaladie = new clsmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsmaladie.Designation = dr["designation"].ToString();
                            lstclsmaladie.Add(varclsmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie;
        }

        public List<clsmaladie> getAllClsmaladie2(int criteria)
        {
            List<clsmaladie> lstclsmaladie = new List<clsmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladie  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladie varclsmaladie = null;
                        while (dr.Read())
                        {
                            varclsmaladie = new clsmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsmaladie.Designation = dr["designation"].ToString();
                            lstclsmaladie.Add(varclsmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie;
        }

        public List<clsmaladie> getAllClsmaladie()
        {
            List<clsmaladie> lstclsmaladie = new List<clsmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladie varclsmaladie = null;
                        while (dr.Read())
                        {

                            varclsmaladie = new clsmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsmaladie.Designation = dr["designation"].ToString();
                            lstclsmaladie.Add(varclsmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladie;
        }

        public int insertClsmaladie(clsmaladie varclsmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO maladie ( designation ) VALUES (@designation  )");
                    if (varclsmaladie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsmaladie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmaladie(clsmaladie varclsmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE maladie  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsmaladie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsmaladie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmaladie(clsmaladie varclsmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM maladie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMALADIE
        #region  CLSEXAMEN
        public clsexamen getClsexamen(object intid)
        {
            clsexamen varclsexamen = new clsexamen();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM examen WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsexamen;
        }

        public clsexamen getClsexamen1(int intid)
        {
            clsexamen varclsexamen = new clsexamen();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT *FROM examen  INNER JOIN operation_laboratoire
                    ON examen.id=operation_laboratoire.id_examen WHERE operation_laboratoire.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsexamen;
        }

        public List<clsexamen> getAllClsexamen(string criteria)
        {
            List<clsexamen> lstclsexamen = new List<clsexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM examen  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsexamen varclsexamen = null;
                        while (dr.Read())
                        {

                            varclsexamen = new clsexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                            lstclsexamen.Add(varclsexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamen;
        }

        public List<clsexamen> getAllClsexamen1(int criteria)
        {
            List<clsexamen> lstclsexamen = new List<clsexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT * FROM examen  id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsexamen varclsexamen = null;
                        while (dr.Read())
                        {
                            varclsexamen = new clsexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                            lstclsexamen.Add(varclsexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamen;
        }

        public List<clsexamen> getAllClsexamen2(int criteria)
        {
            List<clsexamen> lstclsexamen = new List<clsexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT * FROM examen WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsexamen varclsexamen = null;
                        while (dr.Read())
                        {
                            varclsexamen = new clsexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                            lstclsexamen.Add(varclsexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamen;
        }

        public List<clsexamen> getAllClsexamen()
        {
            List<clsexamen> lstclsexamen = new List<clsexamen>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM examen ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsexamen varclsexamen = null;
                        while (dr.Read())
                        {

                            varclsexamen = new clsexamen();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsexamen.Id = int.Parse(dr["id"].ToString());
                            varclsexamen.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsexamen.Prix = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["id_typeexamen"].ToString().Trim().Equals("")) varclsexamen.Id_typeexamen = int.Parse(dr["id_typeexamen"].ToString());
                            lstclsexamen.Add(varclsexamen);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsexamen;
        }

        public int insertClsexamen(clsexamen varclsexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO examen ( designation,prix,id_typeexamen ) VALUES (@designation,@prix,@id_typeexamen  )");
                    if (varclsexamen.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsexamen.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsexamen.Prix));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeexamen", DbType.Int32, 4, varclsexamen.Id_typeexamen));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsexamen(clsexamen varclsexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE examen  SET designation=@designation,prix=@prix,id_typeexamen=@id_typeexamen  WHERE 1=1  AND id=@id ");
                    if (varclsexamen.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsexamen.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsexamen.Prix));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeexamen", DbType.Int32, 4, varclsexamen.Id_typeexamen));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsexamen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsexamen(clsexamen varclsexamen)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM examen  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsexamen.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSEXAMEN
        #region  CLSFOURNISSEUR
        public string generatenumerofournisseur()
        {
            string numero = "";
            int temp = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT count(id) AS nbrligne FROM fournisseur");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (int.Parse(dr["nbrligne"].ToString()) == 0) numero = "FSR1-" + DateTime.Today.Year.ToString().Substring(2, 2);
                            else
                            {
                                temp = int.Parse(dr["nbrligne"].ToString()) + 1;
                                numero = "FSR" + temp + "-" + DateTime.Today.Year.ToString().Substring(2, 2);
                            }
                        }
                        else numero = "FSR1-" + DateTime.Today.Year.ToString().Substring(2, 2);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return numero;
        }

        public DataTable getAllClsfournisseur1()
        {
            DataTable lstclsfournisseur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.adresse,personne.datenaissance,personne.telephone,personne.photo,fournisseur.id AS idFrss,fournisseur.id_personne,fournisseur.numero FROM personne
                    INNER JOIN fournisseur
                    ON personne.id=fournisseur.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsfournisseur.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfournisseur;
        }

        public DataTable getAllClsfournisseur1(int id_fournisseur)
        {
            DataTable lstclsfournisseur = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.adresse,personne.datenaissance,personne.telephone,personne.photo,fournisseur.id AS idFrss,fournisseur.id_personne,fournisseur.numero FROM personne
                    INNER JOIN fournisseur
                    ON personne.id=fournisseur.id_personne where fournisseur.id=" + id_fournisseur);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsfournisseur.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfournisseur;
        }

        public clsfournisseur getClsfournisseur(object intid)
        {
            clsfournisseur varclsfournisseur = new clsfournisseur();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,fournisseur.id AS idFrss,fournisseur.id_personne,fournisseur.numero FROM personne
                    INNER JOIN fournisseur
                    ON personne.id=fournisseur.id_personne WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Fournisseur
                            if (!dr["idFrss"].ToString().Trim().Equals("")) varclsfournisseur.Id = int.Parse(dr["idFrs"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsfournisseur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsfournisseur.Numero = dr["numero"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfournisseur.IdPers = int.Parse(dr["id"].ToString());
                            varclsfournisseur.Nom = dr["nom"].ToString();
                            varclsfournisseur.Postnom = dr["postnom"].ToString();
                            varclsfournisseur.Prenom = dr["prenom"].ToString();
                            varclsfournisseur.Sexe = dr["sexe"].ToString();
                            varclsfournisseur.Etatcivil = dr["etatcivil"].ToString();
                            varclsfournisseur.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsfournisseur.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsfournisseur.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsfournisseur.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfournisseur;
        }

        public List<clsfournisseur> getAllClsfournisseur(string criteria)
        {
            List<clsfournisseur> lstclsfournisseur = new List<clsfournisseur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,fournisseur.id AS idFrss,fournisseur.id_personne,fournisseur.numero FROM personne
                    INNER JOIN fournisseur
                    ON personne.id=fournisseur.id_personne  WHERE 1=1";
                    sql += "  OR   fournisseur.numero LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfournisseur varclsfournisseur = null;
                        while (dr.Read())
                        {
                            varclsfournisseur = new clsfournisseur();
                            //Fournisseur
                            if (!dr["idFrss"].ToString().Trim().Equals("")) varclsfournisseur.Id = int.Parse(dr["idFrss"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsfournisseur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsfournisseur.Numero = dr["numero"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfournisseur.IdPers = int.Parse(dr["id"].ToString());
                            varclsfournisseur.Nom = dr["nom"].ToString();
                            varclsfournisseur.Postnom = dr["postnom"].ToString();
                            varclsfournisseur.Prenom = dr["prenom"].ToString();
                            varclsfournisseur.Sexe = dr["sexe"].ToString();
                            varclsfournisseur.Etatcivil = dr["etatcivil"].ToString();
                            varclsfournisseur.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsfournisseur.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsfournisseur.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsfournisseur.Photo = (Byte[])dr["photo"];
                            lstclsfournisseur.Add(varclsfournisseur);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfournisseur;
        }

        public List<clsfournisseur> getAllClsfournisseur()
        {
            List<clsfournisseur> lstclsfournisseur = new List<clsfournisseur>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,fournisseur.id AS idFrss,fournisseur.id_personne,fournisseur.numero FROM personne
                    INNER JOIN fournisseur
                    ON personne.id=fournisseur.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfournisseur varclsfournisseur = null;
                        while (dr.Read())
                        {
                            varclsfournisseur = new clsfournisseur();
                            //Fournisseur
                            if (!dr["idFrss"].ToString().Trim().Equals("")) varclsfournisseur.Id = int.Parse(dr["idFrss"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsfournisseur.Id_personne = int.Parse(dr["id_personne"].ToString());
                            varclsfournisseur.Numero = dr["numero"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfournisseur.IdPers = int.Parse(dr["id"].ToString());
                            varclsfournisseur.Nom = dr["nom"].ToString();
                            varclsfournisseur.Postnom = dr["postnom"].ToString();
                            varclsfournisseur.Prenom = dr["prenom"].ToString();
                            varclsfournisseur.Sexe = dr["sexe"].ToString();
                            varclsfournisseur.Etatcivil = dr["etatcivil"].ToString();
                            varclsfournisseur.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsfournisseur.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsfournisseur.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsfournisseur.Photo = (Byte[])dr["photo"];
                            lstclsfournisseur.Add(varclsfournisseur);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfournisseur;
        }

        public int insertClsfournisseur(clsfournisseur varclsfournisseur)
        {
            int i = 0;
            try
            {
                varclsfournisseur.Id_personne = clsDoTraitement.Identifiant_Personne;
                string numero = generatenumerofournisseur();
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {                    
                    cmd.CommandText = string.Format("INSERT INTO fournisseur ( id_personne,numero ) VALUES (@id_personne,@numero  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsfournisseur.Id_personne));
                    if (varclsfournisseur.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, numero));
                    i = cmd.ExecuteNonQuery();

                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = string.Format("SELECT @@IDENTITY AS id_inserted FROM fournisseur");
                        IDataReader rd = cmd1.ExecuteReader();
                        if (rd.Read()) clsDoTraitement.Identifiant_Fournisseur = Convert.ToInt32(rd["id_inserted"]);
                        rd.Close();
                        conn.Close();
                    }
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsfournisseur(clsfournisseur varclsfournisseur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fournisseur  SET id_personne=@id_personne,numero=@numero  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsfournisseur.Id_personne));
                    if (varclsfournisseur.Numero != null) cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, varclsfournisseur.Numero));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfournisseur.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsfournisseur(clsfournisseur varclsfournisseur)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM fournisseur  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfournisseur.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSFOURNISSEUR
        #region  CLSARTICLE
        public clsarticle getClsarticleFiche(object intid)
        {
            clsarticle varclsarticle = new clsarticle();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsarticle;
        }

        public clsarticle getClsarticleFicheSeul(object intid)
        {
            clsarticle varclsarticle = new clsarticle();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article WHERE id={0} AND fiche_supplementaire=1", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsarticle;
        }

        public clsarticle getClsarticle(object intid)
        {
            clsarticle varclsarticle = new clsarticle();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article WHERE id={0} AND WHERE fiche_supplementaire=0", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()),2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()),2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsarticle;
        }

        public List<clsarticle> getAllClsarticleFiche(string criteria)
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM article  WHERE 1=1";
                    sql += "  OR   desination LIKE '%" + criteria + "%'";
                    sql += "  OR   caracteristique LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public List<clsarticle> getAllClsarticle(string criteria)
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM article  WHERE 1=1 AND WHERE fiche_supplementaire=0";
                    sql += "  OR   desination LIKE '%" + criteria + "%'";
                    sql += "  OR   caracteristique LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public List<clsarticle> getAllClsarticleFicheSeul(string criteria)
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM article  WHERE 1=1 AND fiche_supplementaire=1";
                    sql += "  OR   desination LIKE '%" + criteria + "%'";
                    sql += "  OR   caracteristique LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()),2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()),2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public List<clsarticle> getAllClsarticleFiche()
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article ORDER BY desination ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString().Trim();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public List<clsarticle> getAllClsarticle()
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article WHERE fiche_supplementaire=0 ORDER BY desination ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString().Trim();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()), 2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()), 2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public List<clsarticle> getAllClsarticleFicheSeul()
        {
            List<clsarticle> lstclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM article WHERE fiche_supplementaire=1 ORDER BY desination ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsarticle = null;
                        while (dr.Read())
                        {
                            varclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsarticle.Id = int.Parse(dr["id"].ToString());
                            varclsarticle.Desination = dr["desination"].ToString().Trim();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()),2);
                            varclsarticle.Caracteristique = dr["caracteristique"].ToString();
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsarticle.Stock = Math.Round(double.Parse(dr["stock"].ToString()),2);
                            if (!dr["stock_alert"].ToString().Trim().Equals("")) varclsarticle.Stock_alert = int.Parse(dr["stock_alert"].ToString());
                            varclsarticle.Fiche_supplementaire = bool.Parse(dr["fiche_supplementaire"].ToString());
                            lstclsarticle.Add(varclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle;
        }

        public int insertClsarticle(clsarticle varclsarticle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO article ( desination,pu,caracteristique,stock,stock_alert,fiche_supplementaire ) VALUES (@desination,@pu,@caracteristique,@stock,@stock_alert,@fiche_supplementaire  )");
                    if (varclsarticle.Desination != null) cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, varclsarticle.Desination));
                    else cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, DBNull.Value));
                    if (varclsarticle.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, varclsarticle.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, DBNull.Value));
                    if (varclsarticle.Caracteristique != null) cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, varclsarticle.Caracteristique));
                    else cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, DBNull.Value));
                    if (varclsarticle.Stock.HasValue) cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, varclsarticle.Stock));
                    else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_alert", DbType.Int32, 4, varclsarticle.Stock_alert));
                    cmd.Parameters.Add(getParameter(cmd, "@fiche_supplementaire", DbType.Boolean, 2, varclsarticle.Fiche_supplementaire));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsarticle(clsarticle varclsarticle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE article  SET desination=@desination,pu=@pu,caracteristique=@caracteristique,stock=@stock,stock_alert=@stock_alert,fiche_supplementaire=@fiche_supplementaire  WHERE 1=1  AND id=@id ");
                    if (varclsarticle.Desination != null) cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, varclsarticle.Desination));
                    else cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, DBNull.Value));
                    if (varclsarticle.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, varclsarticle.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, DBNull.Value));
                    if (varclsarticle.Caracteristique != null) cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, varclsarticle.Caracteristique));
                    else cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, DBNull.Value));
                    if (varclsarticle.Stock.HasValue) cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, varclsarticle.Stock));
                    else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_alert", DbType.Int32, 4, varclsarticle.Stock_alert));
                    cmd.Parameters.Add(getParameter(cmd, "@fiche_supplementaire", DbType.Boolean, 2, varclsarticle.Fiche_supplementaire));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsarticle.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsarticle(clsarticle varclsarticle)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsarticle.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSARTICLE 
        #region  CLSSTOCK
        public clsstock getClsstock(object intid)
        {
            clsstock varclsstock = new clsstock();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM stock WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsstock.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsstock.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsstock.Valeur = int.Parse(dr["valeur"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsstock;
        }

        public List<clsstock> getAllClsstock(string criteria)
        {
            List<clsstock> lstclsstock = new List<clsstock>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM stock  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsstock varclsstock = null;
                        while (dr.Read())
                        {

                            varclsstock = new clsstock();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsstock.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsstock.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsstock.Valeur = int.Parse(dr["valeur"].ToString());
                            lstclsstock.Add(varclsstock);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsstock;
        }

        public List<clsstock> getAllClsstock()
        {
            List<clsstock> lstclsstock = new List<clsstock>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM stock ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsstock varclsstock = null;
                        while (dr.Read())
                        {

                            varclsstock = new clsstock();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsstock.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsstock.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["valeur"].ToString().Trim().Equals("")) varclsstock.Valeur = int.Parse(dr["valeur"].ToString());
                            lstclsstock.Add(varclsstock);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsstock;
        }

        public int insertClsstock(clsstock varclsstock)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO stock ( id,id_article,valeur ) VALUES (@id,@id_article,@valeur  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsstock.Id));
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclsstock.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsstock.Valeur));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsstock(clsstock varclsstock)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE stock  SET id_article=@id_article,valeur=@valeur  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclsstock.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@valeur", DbType.Int32, 4, varclsstock.Valeur));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsstock.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsstock(clsstock varclsstock)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM stock  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsstock.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSSTOCK 
        #region  CLSSORTIE
        public clssortie getClssortieCaisse(object intid)
        {
            clssortie varclssortie = new clssortie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE sortie.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssortie;
        }

        public clssortie getClssortie(object intid)
        {
            clssortie varclssortie = new clssortie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE sortie.id={0} AND article.fiche_supplementaire=0", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssortie;
        }

        public List<string> getAllMonthStk()
        {
            List<string> lstclssortie = new List<string>();
            List<string> lstclssortie2 = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT DISTINCT (CONVERT(VARCHAR(20),MONTH(livraison.date)) + '/' + CONVERT(VARCHAR(20),YEAR(livraison.date))) AS moisE FROM livraison 
                                 UNION 
                                 SELECT DISTINCT (CONVERT(VARCHAR(20),MONTH(sortie.date)) + '/' + CONVERT(VARCHAR(20),YEAR(sortie.date))) AS moisS FROM sortie";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            if (!Convert.ToString(dr["moisE"]).Trim().Equals(""))
                            {
                                lstclssortie.Add(Convert.ToString(dr["moisE"]).ToString());
                            }
                            else if (!Convert.ToString(dr["moisS"]).Trim().Equals(""))
                            {
                                lstclssortie.Add(Convert.ToString(dr["moisS"]).ToString());
                            }
                        }    
                    }
                }
               conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortieCaisse(string criteria)
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT sortie.*,article.desination  FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortie(string criteria)
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT sortie.*,article.desination  FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE 1=1 AND article.fiche_supplementaire=0";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortieFicheSeul( int id_malade)
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination  FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE article.fiche_supplementaire=1 AND sortie.id_malade=" + id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortie()
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE article.fiche_supplementaire=0");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortieCaisse()
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination FROM sortie INNER JOIN article on article.id=sortie.id_article");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortie2(string date_jour)
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination  FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE convert(date,sortie.date,100)='" + date_jour.ToString() + "' AND article.fiche_supplementaire=0");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortie> getAllClssortie2Caisse(string date_jour)
        {
            List<clssortie> lstclssortie = new List<clssortie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortie.*,article.desination  FROM sortie INNER JOIN article on article.id=sortie.id_article WHERE convert(date,sortie.date,100)='" + date_jour.ToString() + "'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortie varclssortie = null;
                        while (dr.Read())
                        {
                            varclssortie = new clssortie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortie.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Designation = dr["desination"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public DataTable getAllClssortie_Service()
        {
            DataTable lstclssortie = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT sortie.id,article.desination,service.designation AS nom_service,sortie.date,sortie.quantinte,sortie.montant,sortie.etatpaiement,sortie.stock_in  FROM sortie 
                    INNER JOIN article ON article.id=sortie.id_article 
                    INNER JOIN service ON service.id=sortie.id_service WHERE article.fiche_supplementaire=0 ORDER BY sortie.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclssortie.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public DataTable getAllClssortie_ServiceCaisse()
        {
            DataTable lstclssortie = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT sortie.id,article.desination,service.designation AS nom_service,sortie.date,sortie.quantinte,sortie.montant,sortie.etatpaiement,sortie.stock_in  FROM sortie 
                    INNER JOIN article ON article.id=sortie.id_article 
                    INNER JOIN service ON service.id=sortie.id_service ORDER BY sortie.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclssortie.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public DataTable getAllClssortie_Service(string date_jour)
        {
            DataTable lstclssortie = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT sortie.id,article.desination,service.designation AS nom_service,sortie.date,sortie.quantinte,sortie.montant,sortie.etatpaiement,sortie.stock_in  FROM sortie 
                    INNER JOIN article ON article.id=sortie.id_article 
                    INNER JOIN service ON service.id=sortie.id_service WHERE convert(date,sortie.date,100)='" + date_jour.ToString() + "' ORDER BY sortie.id ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclssortie.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clsarticle> getAllClsmedicamenttarifpaiement(int id_malade)
        {
            List<clsarticle> lstclsclsarticle = new List<clsarticle>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT sortie.id AS idSortie,article.id,article.desination,article.pu,article.caracteristique,article.stock,sortie.quantinte,sortie.montant FROM article 
                    INNER JOIN sortie ON article.id=sortie.id_article
                    INNER JOIN malade ON malade.id=sortie.id_malade 
                    WHERE malade.id=" + id_malade + " AND (sortie.etatpaiement='Non payé') ORDER BY article.desination ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle varclsclsarticle = null;
                        while (dr.Read())
                        {
                            varclsclsarticle = new clsarticle();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsclsarticle.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idSortie"].ToString().Trim().Equals("")) varclsclsarticle.Id_de_sortie = int.Parse(dr["idSortie"].ToString());
                            varclsclsarticle.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsclsarticle.Pu = Math.Round(double.Parse(dr["pu"].ToString()),2);
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsclsarticle.Quantite_de_sortie = double.Parse(dr["quantinte"].ToString());
                            varclsclsarticle.DesignationComplete = double.Parse(dr["quantinte"].ToString()) + "=>" + varclsclsarticle.Desination + "=>" + varclsclsarticle.Pu + " $US";
                            if (!dr["stock"].ToString().Trim().Equals("")) varclsclsarticle.Stock = double.Parse(dr["stock"].ToString());
                            lstclsclsarticle.Add(varclsclsarticle);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsclsarticle;
        }

        public int insertClssortie(clssortie varclssortie)
        {
            int i = 0, i1 = 0;
            double stock = 0, tmp = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //Traitement de la valeur du stock à insérer dans sortie
                tmp = recalculateStock(varclssortie.Id_article, conn, transaction);
                if (varclssortie.Quantinte < tmp) stock = tmp - (double)varclssortie.Quantinte;

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortie.Date.HasValue) { }
                    else date = varclssortie.Date;

                    cmd.CommandText = string.Format("INSERT INTO sortie ( id_article,id_service,id_malade,date,quantinte,montant,etatpaiement,sortiemalade,stock_in ) VALUES (@id_article,@id_service,@id_malade,@date,@quantinte,@montant,@etatpaiement,@sortiemalade,@stock_in)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclssortie.Id_article));
                    if (varclssortie.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclssortie.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssortie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    dateMAJSortie = date;
                    if (varclssortie.Quantinte.HasValue)
                    {
                        if (varclssortie.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclssortie.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide");//cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    //if (varclssortie.Montant.HasValue) 
                    cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclssortie.Montant));
                    //else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, 0));
                    if (varclssortie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Parameters.Add(getParameter(cmd, "@sortiemalade", DbType.Boolean, 2, varclssortie.Sortiemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_in", DbType.Int32, 4, stock));

                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                    //Recuperation du dernier id du paiement insere
                    using (IDbCommand cmd21 = conn.CreateCommand())
                    {
                        cmd21.CommandText = "SELECT @@IDENTITY AS lastIdInserted FROM sortie ";
                        cmd21.Transaction = transaction;
                        IDataReader dri = cmd21.ExecuteReader();
                        id_Sortie_art = -1;
                        if (dri.Read()) id_Sortie_art = int.Parse(dri["lastIdInserted"].ToString());
                        dri.Close();
                    }
                    //Recuperation du last id inséré
                    using (IDbCommand cmd0 = conn.CreateCommand())
                    {
                        cmd0.CommandText = string.Format("SELECT @@identity AS lastId FROM article");
                        cmd0.Transaction = transaction;
                        IDataReader rd0 = cmd0.ExecuteReader();
                        if (rd0.Read()) clsDoTraitement.id_sortie_medicaments = Convert.ToInt32(rd0["lastId"].ToString());
                        rd0.Dispose();
                    }

                    //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'artcle choisi
                    //Mis a jour du Stock de l'article dont on a add la livraison
                    //double temp = recalculateStock(varclssortie.Id_article, conn, transaction);
                    if (varclssortie.Quantinte > tmp) throw new Exception("Vous ne pouvez retirer plus que ce qui est disponible en stock");
                    else
                    {
                        //stock = temp - (double)varclssortie.Quantinte;
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                            //if (varclsarticle.Stock.HasValue) 
                            cmd1.Parameters.Add(getParameter(cmd1, "@stock", DbType.Single, 4, stock));
                            //else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                            cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclssortie.Id_article));
                            cmd1.Transaction = transaction;
                            i1 = cmd1.ExecuteNonQuery();
                            transaction.Commit();
                        }
                    }
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de l'enregistrement, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int insertClssortieFiche(clssortie varclssortie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortie.Date.HasValue) { }
                    else date = varclssortie.Date;

                    cmd.CommandText = string.Format("INSERT INTO sortie ( id_article,id_service,id_malade,date,quantinte,montant,etatpaiement,sortiemalade,stock_in ) VALUES (@id_article,@id_service,@id_malade,@date,@quantinte,@montant,@etatpaiement,@sortiemalade,@stock_in)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclssortie.Id_article));
                    if (varclssortie.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclssortie.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssortie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclssortie.Quantinte));//cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclssortie.Montant));
                    if (varclssortie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Parameters.Add(getParameter(cmd, "@sortiemalade", DbType.Boolean, 2, varclssortie.Sortiemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_in", DbType.Int32, 4, 0));

                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClssortie(clssortie varclssortie)
        {
            int i = 0, i1 = 0;
            double stock = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //Recuperation de la valeur du stock à update dans stock
                double tmp = recalculateStock(varclssortie.Id_article, conn, transaction);
                stock = tmp + clsDoTraitement.oldValueStockModifie - (double)varclssortie.Quantinte;

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortie.Date.HasValue) { }
                    else date = varclssortie.Date;

                    cmd.CommandText = string.Format("UPDATE sortie  SET id_article=@id_article,id_service=@id_service,date=@date,quantinte=@quantinte,montant=@montant,etatpaiement=@etatpaiement,sortiemalade=@sortiemalade,stock_in=@stock_in  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclssortie.Id_article));
                    if (varclssortie.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclssortie.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssortie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    dateMAJSortie = date;
                    if (varclssortie.Quantinte.HasValue)
                    {
                        if (varclssortie.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclssortie.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide");//cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    //if (varclssortie.Montant.HasValue) 
                    cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclssortie.Montant));
                    //else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, 0));
                    if (varclssortie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Parameters.Add(getParameter(cmd, "@sortiemalade", DbType.Boolean, 2, varclssortie.Sortiemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_in", DbType.Int32, 4, stock));

                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssortie.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();

                    //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'artcle choisi
                    //Mis a jour du Stock de l'article sorti
                    //double temp = recalculateStock(varclssortie.Id_article, conn, transaction);
                    //stock = temp + clsDoTraitement.oldValueStockModifie - (double)varclssortie.Quantinte;
                    if (stock < 0) throw new Exception("Modification invalide pour la quantité entré par rapport à celle en stock");
                    else
                    {
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                            //if (varclsarticle.Stock.HasValue) 
                            cmd1.Parameters.Add(getParameter(cmd1, "@stock", DbType.Single, 4, stock));
                            //else cmd.Parameters.Add(getParameter(cmd, "@stock", DbType.Single, 4, 0));
                            cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclssortie.Id_article));
                            cmd1.Transaction = transaction;
                            i1 = cmd1.ExecuteNonQuery();
                            transaction.Commit();
                        }
                    }
                    clsDoTraitement.oldValueStockModifie = 0;
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la modification, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClssortieFiche(clssortie varclssortie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortie.Date.HasValue) { }
                    else date = varclssortie.Date;

                    cmd.CommandText = string.Format("UPDATE sortie  SET id_article=@id_article,id_service=@id_service,date=@date,quantinte=@quantinte,montant=@montant,etatpaiement=@etatpaiement,sortiemalade=@sortiemalade,stock_in=@stock_in  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 4, varclssortie.Id_article));
                    if (varclssortie.Id_service.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, varclssortie.Id_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_service", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclssortie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclssortie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclssortie.Quantinte));
                    cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclssortie.Montant));
                    if (varclssortie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Parameters.Add(getParameter(cmd, "@sortiemalade", DbType.Boolean, 2, varclssortie.Sortiemalade));
                    cmd.Parameters.Add(getParameter(cmd, "@stock_in", DbType.Int32, 4, 0));

                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssortie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClssortie(int ? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "UPDATE sortie SET etatpaiement='Non payé' WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch(Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClssortie(clssortie varclssortie)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0; ;
            int id_sortie = varclssortie.Id;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_sortie=@id) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id_sortie));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_sortie=@id ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, id_sortie));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }
                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM sortiecancel  WHERE  1=1  AND id_sortie=@id ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Int32, 4, id_sortie));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM sortie  WHERE  1=1  AND id=@id ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id", DbType.Int32, 4, id_sortie));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la suppression, veuillez réessayez svp, " + exc.Message);
                }
            }
            return i3;
        }

        #endregion CLSSORTIE 
        #region  CLSSORTIECANCEL

        public List<clssortiecancel> getAllClssortiecancel(int id_malade,string date_sortie)
        {
            List<clssortiecancel> lstclssortie = new List<clssortiecancel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortiecancel.*,sortie.stock_in FROM sortiecancel INNER JOIN sortie ON sortie.id=sortiecancel.id_sortie WHERE sortiecancel.id_malade=" + id_malade + " AND sortiecancel.date='" + date_sortie + "'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortiecancel varclssortiecancel = null;
                        while (dr.Read())
                        {
                            varclssortiecancel = new clssortiecancel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortiecancel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclssortiecancel.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortiecancel.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortiecancel.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortiecancel.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortiecancel.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortiecancel.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortiecancel.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortiecancel.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortiecancel.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortiecancel.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortiecancel.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortiecancel.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortiecancel);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public List<clssortiecancel> getAllClssortiecancelforNull()
        {
            List<clssortiecancel> lstclssortie = new List<clssortiecancel>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT sortiecancel.*,sortie.stock_in FROM sortiecancel INNER JOIN sortie ON sortie.id=sortiecancel.id_sortie WHERE sortiecancel.id=-1");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortiecancel varclssortiecancel = null;
                        if (dr.Read())
                        {
                            varclssortiecancel = new clssortiecancel();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortiecancel.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclssortiecancel.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortiecancel.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortiecancel.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortiecancel.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortiecancel.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortiecancel.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortiecancel.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortiecancel.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["stock_in"].ToString().Trim().Equals("")) varclssortiecancel.Stock_in = int.Parse(dr["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortiecancel.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortiecancel.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortiecancel.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                            lstclssortie.Add(varclssortiecancel);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortie;
        }

        public void validateRetourArticle(int id_sortie)
        {
            double stock = 0;
            int qteReelesortie = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                if (conn.State != ConnectionState.Open) conn.Open();
                //Recuperation Data pour table sortie
                clssortie varclssortie = null;
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM sortie WHERE id=" + id_sortie);
                    cmd.Transaction = transaction;
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        varclssortie = new clssortie();
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclssortie.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_service"].ToString().Trim().Equals("")) varclssortie.Id_service = int.Parse(dr["id_service"].ToString());
                            else varclssortie.Id_service = null;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortie.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclssortie.Sortiemalade = bool.Parse(dr["sortiemalade"].ToString());
                        }
                    }
                }
                clssortiecancel varclssortiecancel = null;
                //Recuperation Data pour table sortiecancel
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT sortiecancel.*,sortie.stock_in FROM sortiecancel INNER JOIN sortie ON sortie.id=sortiecancel.id_sortie WHERE sortiecancel.id_sortie=" + id_sortie);
                    cmd1.Transaction = transaction;
                    using (IDataReader dr1 = cmd1.ExecuteReader())
                    {
                        varclssortiecancel = new clssortiecancel();
                        if (dr1.Read())
                        {
                            if (!dr1["id"].ToString().Trim().Equals("")) varclssortiecancel.Id = int.Parse(dr1["id"].ToString());
                            if (!dr1["id_article"].ToString().Trim().Equals("")) varclssortiecancel.Id_article = int.Parse(dr1["id_article"].ToString());
                            if (!dr1["id_sortie"].ToString().Trim().Equals("")) varclssortiecancel.Id_sortie = int.Parse(dr1["id_sortie"].ToString());
                            if (!dr1["id_service"].ToString().Trim().Equals("")) varclssortiecancel.Id_service = int.Parse(dr1["id_service"].ToString());
                            else varclssortiecancel.Id_service = null;
                            if (!dr1["id_malade"].ToString().Trim().Equals("")) varclssortiecancel.Id_malade = int.Parse(dr1["id_malade"].ToString());
                            else varclssortiecancel.Id_malade = null;
                            if (!dr1["date"].ToString().Trim().Equals("")) varclssortiecancel.Date = DateTime.Parse(dr1["date"].ToString());
                            if (!dr1["quantinte"].ToString().Trim().Equals("")) varclssortiecancel.Quantinte = int.Parse(dr1["quantinte"].ToString());
                            if (!dr1["stock_in"].ToString().Trim().Equals("")) varclssortiecancel.Stock_in = int.Parse(dr1["stock_in"].ToString());
                            //if (!dr["montant"].ToString().Trim().Equals("")) 
                            varclssortiecancel.Montant = Math.Round(double.Parse(dr1["montant"].ToString()), 2);
                            varclssortiecancel.Etatpaiement = dr1["etatpaiement"].ToString();
                            varclssortiecancel.Sortiemalade = bool.Parse(dr1["sortiemalade"].ToString());
                        }
                    }

                    //On effectue des comparaison pour savoir si la modification peut être validée ou non
                    if (varclssortie.Etatpaiement.Equals("Payé"))
                    {
                        #region Retour pour le cas de payement de l'article effectué
                        throw new Exception("un article déjà payé ne peut être retourné en stock car la sortie à déjà été validée");
                        #endregion
                    }
                    else if (varclssortie.Etatpaiement.Equals("Non payé"))
                    {
                        #region Retour pour le cas de non payement de l'article
                        if (varclssortiecancel.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else if (varclssortiecancel.Quantinte > 0)
                        {
                            //La quantite que l'on veut retourner est supérieure à celle qu'on a retirer
                            if (clsDoTraitement.quantinteretour > varclssortiecancel.Quantinte)
                            {
                                throw new Exception("vous ne pouvez pas retourner une quantité de médicament supérieure à celle qui a été prise");
                            }
                            //La quantite que l'on veut retourner est inférieure à celle qu'on a retirer alors on effectue MAJ du stock et on update
                            else if (clsDoTraitement.quantinteretour < varclssortiecancel.Quantinte)
                            {
                                //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'article choisi
                                //Mis a jour du Stock de l'article sorti
                                if (clsDoTraitement.quantinteretour > 0)
                                {
                                    qteReelesortie = (int)varclssortiecancel.Quantinte - (int)clsDoTraitement.quantinteretour;
                                    double temp = recalculateStock(varclssortiecancel.Id_article, conn, transaction);
                                    //stock = temp + qteReelesortie;
                                    stock = temp + (int)clsDoTraitement.quantinteretour;
                                    
                                    //Mis à jour du stock
                                    using (IDbCommand cmd2 = conn.CreateCommand())
                                    {
                                        cmd2.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                                        cmd2.Parameters.Add(getParameter(cmd2, "@stock", DbType.Single, 4, stock));
                                        cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Int32, 4, varclssortie.Id_article));
                                        cmd2.Transaction = transaction;
                                        cmd2.ExecuteNonQuery();
                                    }

                                    //Mis à jour de la quantité dans la table sortie ainsi que de la nouvelle valeur en stock pour la sortie concernée
                                    using (IDbCommand cmd4 = conn.CreateCommand())
                                    {
                                        cmd4.CommandText = string.Format("UPDATE sortie SET quantinte=@quantinte,stock_in=@stock_in WHERE id=" + varclssortiecancel.Id_sortie);
                                        cmd4.Parameters.Add(getParameter(cmd4, "@quantinte", DbType.Single, 4, qteReelesortie));
                                        cmd4.Parameters.Add(getParameter(cmd4, "@stock_in", DbType.Single, 4, stock));
                                        cmd4.Transaction = transaction;
                                        cmd4.ExecuteNonQuery();
                                        transaction.Commit();
                                    }

                                    //Mis à jour de la quantité dans la table sortiecancel (Boulot du trigger que nous avons créé)
                                    //using (IDbCommand cmd3 = conn.CreateCommand())
                                    //{
                                    //    cmd3.CommandText = string.Format("UPDATE sortiecancel SET quantinte=@quantinte  WHERE id_sortie=" + varclssortiecancel.Id_sortie);
                                    //    cmd3.Parameters.Add(getParameter(cmd3, "@quantinte", DbType.Single, 4, qteReelesortie));
                                    //    cmd3.Transaction = transaction;
                                    //    cmd3.ExecuteNonQuery();
                                    //}
                                }
                                else throw new Exception("La quantité à retourner est invalide");
                            }
                            //La quantite que l'on veut retourner est égale à celle qu'on a retirer alors on supprime la sortie dans les deux tables en restituant le stock
                            else if (clsDoTraitement.quantinteretour == varclssortiecancel.Quantinte)
                            {
                                //Recuperation de l'ancienne valeur en stock et settage de la nouvelle valeur pour l'artcle choisi
                                //Mis a jour du Stock de l'article sorti
                                if (clsDoTraitement.quantinteretour > 0)
                                {
                                    qteReelesortie = (int)varclssortiecancel.Quantinte - (int)clsDoTraitement.quantinteretour;
                                    double temp = recalculateStock(varclssortiecancel.Id_article, conn, transaction);
                                    //stock = temp + qteReelesortie;
                                    stock = temp + (int)clsDoTraitement.quantinteretour;

                                    //Mis à jour du stock
                                    using (IDbCommand cmd5 = conn.CreateCommand())
                                    {
                                        cmd5.CommandText = string.Format("UPDATE article  SET stock=@stock  WHERE id=@id ");
                                        cmd5.Parameters.Add(getParameter(cmd5, "@stock", DbType.Single, 4, stock));
                                        cmd5.Parameters.Add(getParameter(cmd5, "@id", DbType.Int32, 4, varclssortie.Id_article));
                                        cmd5.Transaction = transaction;
                                        cmd5.ExecuteNonQuery();
                                    }

                                    //Suppression de l'enregistrement de la table sortiecancel car l'ensemble d'articls a été retournée (Table sortiecancel)
                                    //Pour la table sortie, le trigger fera son boulot
                                    using (IDbCommand cmd7 = conn.CreateCommand())
                                    {
                                        cmd7.CommandText = string.Format("DELETE FROM sortiecancel WHERE id_sortie=" + varclssortiecancel.Id_sortie);
                                        cmd7.Transaction = transaction;
                                        cmd7.ExecuteNonQuery();
                                        transaction.Commit();
                                    }

                                    //Suppression de l'enregistrement de la sortie car l'ensemble d'articls a été retournée (Tablesortiecancel) [Boulot du trigger que nous avons créé sur la table sortie]
                                    //using (IDbCommand cmd6 = conn.CreateCommand())
                                    //{
                                    //    cmd6.CommandText = string.Format("DELETE FROM sortiecancel WHERE id_sortie=" + varclssortiecancel.Id_sortie);
                                    //    cmd6.Transaction = transaction;
                                    //    cmd6.ExecuteNonQuery();
                                    //}
                                }
                                else throw new Exception("La quantité à retourner est invalide");
                            }
                        }
                        #endregion
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la modification, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
        }

        #endregion CLSSORTIECANCEL 
        #region  CLSFONCTION
        public clsfonction getClsfonction(object intid)
        {
            clsfonction varclsfonction = new clsfonction();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fonction WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfonction;
        }

        public List<clsfonction> getAllClsfonction(string criteria)
        {
            List<clsfonction> lstclsfonction = new List<clsfonction>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM fonction  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfonction varclsfonction = null;
                        while (dr.Read())
                        {

                            varclsfonction = new clsfonction();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                            lstclsfonction.Add(varclsfonction);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfonction;
        }

        public List<clsfonction> getAllClsfonction()
        {
            List<clsfonction> lstclsfonction = new List<clsfonction>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fonction ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfonction varclsfonction = null;
                        while (dr.Read())
                        {

                            varclsfonction = new clsfonction();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfonction.Id = int.Parse(dr["id"].ToString());
                            varclsfonction.Designation = dr["designation"].ToString();
                            lstclsfonction.Add(varclsfonction);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfonction;
        }

        public int insertClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO fonction ( designation ) VALUES (@designation  )");
                    if (varclsfonction.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsfonction.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fonction  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsfonction.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsfonction.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfonction.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsfonction(clsfonction varclsfonction)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM fonction  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsfonction.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSFONCTION
        #region  CLSMEDICAMENT
        public clsmedicament getClsmedicament(object intid)
        {
            clsmedicament varclsmedicament = new clsmedicament();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM medicament WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmedicament.Id = int.Parse(dr["id"].ToString());
                            varclsmedicament.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsmedicament.Pu = double.Parse(dr["pu"].ToString());
                            varclsmedicament.Caracteristique = dr["caracteristique"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmedicament;
        }

        public List<clsmedicament> getAllClsmedicament(string criteria)
        {
            List<clsmedicament> lstclsmedicament = new List<clsmedicament>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM medicament  WHERE 1=1";
                    sql += "  OR   desination LIKE '%" + criteria + "%'";
                    sql += "  OR   caracteristique LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmedicament varclsmedicament = null;
                        while (dr.Read())
                        {

                            varclsmedicament = new clsmedicament();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmedicament.Id = int.Parse(dr["id"].ToString());
                            varclsmedicament.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsmedicament.Pu = double.Parse(dr["pu"].ToString());
                            varclsmedicament.Caracteristique = dr["caracteristique"].ToString();
                            lstclsmedicament.Add(varclsmedicament);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmedicament;
        }

        public List<clsmedicament> getAllClsmedicament1(int criteria)
        {
            List<clsmedicament> lstclsmedicament = new List<clsmedicament>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM medicament  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmedicament varclsmedicament = null;
                        while (dr.Read())
                        {
                            varclsmedicament = new clsmedicament();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmedicament.Id = int.Parse(dr["id"].ToString());
                            varclsmedicament.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsmedicament.Pu = double.Parse(dr["pu"].ToString());
                            varclsmedicament.Caracteristique = dr["caracteristique"].ToString();
                            lstclsmedicament.Add(varclsmedicament);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmedicament;
        }

        public List<clsmedicament> getAllClsmedicament()
        {
            List<clsmedicament> lstclsmedicament = new List<clsmedicament>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM medicament ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmedicament varclsmedicament = null;
                        while (dr.Read())
                        {

                            varclsmedicament = new clsmedicament();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmedicament.Id = int.Parse(dr["id"].ToString());
                            varclsmedicament.Desination = dr["desination"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsmedicament.Pu = double.Parse(dr["pu"].ToString());
                            varclsmedicament.Caracteristique = dr["caracteristique"].ToString();
                            lstclsmedicament.Add(varclsmedicament);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmedicament;
        }

        public int insertClsmedicament(clsmedicament varclsmedicament)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO medicament ( desination,pu,caracteristique ) VALUES (@desination,@pu,@caracteristique  )");
                    if (varclsmedicament.Desination != null) cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, varclsmedicament.Desination));
                    else cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, DBNull.Value));
                    if (varclsmedicament.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, varclsmedicament.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, DBNull.Value));
                    if (varclsmedicament.Caracteristique != null) cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, varclsmedicament.Caracteristique));
                    else cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmedicament(clsmedicament varclsmedicament)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE medicament  SET desination=@desination,pu=@pu,caracteristique=@caracteristique  WHERE 1=1  AND id=@id ");
                    if (varclsmedicament.Desination != null) cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, varclsmedicament.Desination));
                    else cmd.Parameters.Add(getParameter(cmd, "@desination", DbType.String, 100, DBNull.Value));
                    if (varclsmedicament.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, varclsmedicament.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 4, DBNull.Value));
                    if (varclsmedicament.Caracteristique != null) cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, varclsmedicament.Caracteristique));
                    else cmd.Parameters.Add(getParameter(cmd, "@caracteristique", DbType.String, 200, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmedicament.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmedicament(clsmedicament varclsmedicament)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM medicament  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmedicament.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMEDICAMENT
        #region  CLSPERIODE
        public clsperiode getClsperiode(object intid)
        {
            clsperiode varclsperiode = new clsperiode();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM periode WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiode.Id = int.Parse(dr["id"].ToString());
                            varclsperiode.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsperiode;
        }

        public clsperiode getAllClsperiode1(int intid)
        {
            clsperiode varclsperiode = new clsperiode();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT periode.id,periode.designation FROM periode
                    INNER JOIN prise_vitamine ON periode.id=prise_vitamine.id_periode
                    WHERE prise_vitamine.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiode.Id = int.Parse(dr["id"].ToString());
                            varclsperiode.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsperiode;
        }

        public List<clsperiode> getAllClsperiode(string criteria)
        {
            List<clsperiode> lstclsperiode = new List<clsperiode>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM periode  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsperiode varclsperiode = null;
                        while (dr.Read())
                        {

                            varclsperiode = new clsperiode();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiode.Id = int.Parse(dr["id"].ToString());
                            varclsperiode.Designation = dr["designation"].ToString();
                            lstclsperiode.Add(varclsperiode);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsperiode;
        }

        public List<clsperiode> getAllClsperiode()
        {
            List<clsperiode> lstclsperiode = new List<clsperiode>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM periode ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsperiode varclsperiode = null;
                        while (dr.Read())
                        {

                            varclsperiode = new clsperiode();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsperiode.Id = int.Parse(dr["id"].ToString());
                            varclsperiode.Designation = dr["designation"].ToString();
                            lstclsperiode.Add(varclsperiode);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsperiode;
        }

        public int insertClsperiode(clsperiode varclsperiode)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO periode ( designation ) VALUES (@designation  )");
                    if (varclsperiode.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsperiode.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsperiode(clsperiode varclsperiode)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE periode  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsperiode.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsperiode.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsperiode.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsperiode(clsperiode varclsperiode)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM periode  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsperiode.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPERIODE
        #region  CLSPRISE_VITAMINE
        public clsprise_vitamine getClsprise_vitamine(object intid)
        {
            clsprise_vitamine varclsprise_vitamine = new clsprise_vitamine();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM prise_vitamine WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsprise_vitamine;
        }

        public clsprise_vitamine getClsprise_vitamine3(int intid)
        {
            clsprise_vitamine varclsprise_vitamine = new clsprise_vitamine();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT prise_vitamine.id_periode,prise_vitamine.id_malade,prise_vitamine.id_vitamine FROM prise_vitamine
             INNER JOIN vaccination ON prise_vitamine.id=vaccination.id_periodevaccination
             WHERE vaccination.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsprise_vitamine;
        }

        public List<clsprise_vitamine> getAllClsprise_vitamine(string criteria)
        {
            List<clsprise_vitamine> lstclsprise_vitamine = new List<clsprise_vitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM prise_vitamine  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsprise_vitamine varclsprise_vitamine = null;
                        while (dr.Read())
                        {

                            varclsprise_vitamine = new clsprise_vitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                            lstclsprise_vitamine.Add(varclsprise_vitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprise_vitamine;
        }

        public List<clsprise_vitamine> getAllClsprise_vitamine1(int criteria)
        {
            List<clsprise_vitamine> lstclsprise_vitamine = new List<clsprise_vitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM prise_vitamine  WHERE id_malade=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprise_vitamine varclsprise_vitamine = null;
                        while (dr.Read())
                        {
                            varclsprise_vitamine = new clsprise_vitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                            lstclsprise_vitamine.Add(varclsprise_vitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprise_vitamine;
        }

        public List<clsprise_vitamine> getAllClsprise_vitamine4(int criteria)
        {
            List<clsprise_vitamine> lstclsprise_vitamine = new List<clsprise_vitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM prise_vitamine  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprise_vitamine varclsprise_vitamine = null;
                        while (dr.Read())
                        {
                            varclsprise_vitamine = new clsprise_vitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                            lstclsprise_vitamine.Add(varclsprise_vitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprise_vitamine;
        }

        public List<clsprise_vitamine> getAllClsprise_vitamine()
        {
            List<clsprise_vitamine> lstclsprise_vitamine = new List<clsprise_vitamine>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM prise_vitamine ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsprise_vitamine varclsprise_vitamine = null;
                        while (dr.Read())
                        {

                            varclsprise_vitamine = new clsprise_vitamine();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprise_vitamine.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_periode"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_periode = int.Parse(dr["id_periode"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_vitamine"].ToString().Trim().Equals("")) varclsprise_vitamine.Id_vitamine = int.Parse(dr["id_vitamine"].ToString());
                            if (!dr["date_operation"].ToString().Trim().Equals("")) varclsprise_vitamine.Date_operation = DateTime.Parse(dr["date_operation"].ToString());
                            lstclsprise_vitamine.Add(varclsprise_vitamine);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprise_vitamine;
        }

        public int insertClsprise_vitamine(clsprise_vitamine varclsprise_vitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO prise_vitamine ( id_periode,id_malade,id_vitamine,date_operation ) VALUES (@id_periode,@id_malade,@id_vitamine,@date_operation  )");
                    if (varclsprise_vitamine.Id_periode.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_periode", DbType.Int32, 4, varclsprise_vitamine.Id_periode));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_periode", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsprise_vitamine.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Id_vitamine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vitamine", DbType.Int32, 4, varclsprise_vitamine.Id_vitamine));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vitamine", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Date_operation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_operation", DbType.DateTime, 8, varclsprise_vitamine.Date_operation));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_operation", DbType.DateTime, 8, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsprise_vitamine(clsprise_vitamine varclsprise_vitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE prise_vitamine  SET id_periode=@id_periode,id_malade=@id_malade,id_vitamine=@id_vitamine,date_operation=@date_operation  WHERE 1=1  AND id=@id ");
                    if (varclsprise_vitamine.Id_periode.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_periode", DbType.Int32, 4, varclsprise_vitamine.Id_periode));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_periode", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsprise_vitamine.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Id_vitamine.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vitamine", DbType.Int32, 4, varclsprise_vitamine.Id_vitamine));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vitamine", DbType.Int32, 4, DBNull.Value));
                    if (varclsprise_vitamine.Date_operation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_operation", DbType.DateTime, 8, varclsprise_vitamine.Date_operation));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_operation", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprise_vitamine.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsprise_vitamine(clsprise_vitamine varclsprise_vitamine)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM prise_vitamine  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprise_vitamine.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPRISE_VITAMINE
        #region  CLSATTENTION_SPECIALE
        public clsattention_speciale getClsattention_speciale(object intid)
        {
            clsattention_speciale varclsattention_speciale = new clsattention_speciale();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM attention_speciale WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsattention_speciale;
        }

        public List<clsattention_speciale> getAllClsattention_speciale(string criteria)
        {
            List<clsattention_speciale> lstclsattention_speciale = new List<clsattention_speciale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM attention_speciale  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsattention_speciale varclsattention_speciale = null;
                        while (dr.Read())
                        {
                            varclsattention_speciale = new clsattention_speciale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsattention_speciale.Add(varclsattention_speciale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention_speciale;
        }

        public List<clsattention_speciale> getAllClsattention_speciale1(int criteria)
        {
            List<clsattention_speciale> lstclsattention_speciale = new List<clsattention_speciale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM attention_speciale  WHERE id_malade=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsattention_speciale varclsattention_speciale = null;
                        while (dr.Read())
                        {
                            varclsattention_speciale = new clsattention_speciale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsattention_speciale.Add(varclsattention_speciale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention_speciale;
        }

        public clsattention_speciale getAllClsattention_speciale2(int intid)
        {
            clsattention_speciale varclsattention_speciale = new clsattention_speciale();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM attention_speciale WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsattention_speciale;
        }

        public List<clsattention_speciale> getAllClsattention_speciale3(int criteria)
        {
            List<clsattention_speciale> lstclsattention_speciale = new List<clsattention_speciale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM attention_speciale  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsattention_speciale varclsattention_speciale = null;
                        while (dr.Read())
                        {
                            varclsattention_speciale = new clsattention_speciale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsattention_speciale.Add(varclsattention_speciale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention_speciale;
        }

        public List<clsattention_speciale> getAllClsattention_speciale()
        {
            List<clsattention_speciale> lstclsattention_speciale = new List<clsattention_speciale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM attention_speciale ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsattention_speciale varclsattention_speciale = null;
                        while (dr.Read())
                        {

                            varclsattention_speciale = new clsattention_speciale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention_speciale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsattention_speciale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_attention"].ToString().Trim().Equals("")) varclsattention_speciale.Id_attention = int.Parse(dr["id_attention"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsattention_speciale.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsattention_speciale.Add(varclsattention_speciale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention_speciale;
        }

        public int insertClsattention_speciale(clsattention_speciale varclsattention_speciale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO attention_speciale ( id_malade,id_attention,dort_sous_moust ) VALUES (@id_malade,@id_attention,@dort_sous_moust  )");
                    if (varclsattention_speciale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsattention_speciale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsattention_speciale.Id_attention.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_attention", DbType.Int32, 4, varclsattention_speciale.Id_attention));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_attention", DbType.Int32, 4, DBNull.Value));
                    if (varclsattention_speciale.Dort_sous_moust.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, varclsattention_speciale.Dort_sous_moust));
                    else cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsattention_speciale(clsattention_speciale varclsattention_speciale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE attention_speciale  SET id_malade=@id_malade,id_attention=@id_attention,dort_sous_moust=@dort_sous_moust  WHERE 1=1  AND id=@id ");
                    if (varclsattention_speciale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsattention_speciale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsattention_speciale.Id_attention.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_attention", DbType.Int32, 4, varclsattention_speciale.Id_attention));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_attention", DbType.Int32, 4, DBNull.Value));
                    if (varclsattention_speciale.Dort_sous_moust.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, varclsattention_speciale.Dort_sous_moust));
                    else cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsattention_speciale.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsattention_speciale(clsattention_speciale varclsattention_speciale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM attention_speciale  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsattention_speciale.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSATTENTION_SPECIALE
        #region  CLSCONSULTATION_FICHE
        public clsconsultation_fiche getClsconsultation_fiche(object intid)
        {
            clsconsultation_fiche varclsconsultation_fiche = new clsconsultation_fiche();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultation_fiche WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultation_fiche;
        }

        public List<clsconsultation_fiche> getAllClsconsultation_fiche(string criteria)
        {
            List<clsconsultation_fiche> lstclsconsultation_fiche = new List<clsconsultation_fiche>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultation_fiche  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultation_fiche varclsconsultation_fiche = null;
                        while (dr.Read())
                        {

                            varclsconsultation_fiche = new clsconsultation_fiche();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsconsultation_fiche.Add(varclsconsultation_fiche);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation_fiche;
        }

        public List<clsconsultation_fiche> getAllClsconsultation_fiche1(int criteria)
        {
            List<clsconsultation_fiche> lstclsconsultation_fiche = new List<clsconsultation_fiche>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultation_fiche  WHERE id_malade=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultation_fiche varclsconsultation_fiche = null;
                        while (dr.Read())
                        {

                            varclsconsultation_fiche = new clsconsultation_fiche();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsconsultation_fiche.Add(varclsconsultation_fiche);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation_fiche;
        }

        public clsconsultation_fiche getAllClsconsultation_fiche2(int intid)
        {
            clsconsultation_fiche varclsconsultation_fiche = new clsconsultation_fiche();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultation_fiche WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultation_fiche;
        }

        public List<clsconsultation_fiche> getAllClsconsultation_fiche3(int criteria)
        {
            List<clsconsultation_fiche> lstclsconsultation_fiche = new List<clsconsultation_fiche>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultation_fiche  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultation_fiche varclsconsultation_fiche = null;
                        while (dr.Read())
                        {

                            varclsconsultation_fiche = new clsconsultation_fiche();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsconsultation_fiche.Add(varclsconsultation_fiche);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation_fiche;
        }

        public List<clsconsultation_fiche> getAllClsconsultation_fiche()
        {
            List<clsconsultation_fiche> lstclsconsultation_fiche = new List<clsconsultation_fiche>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultation_fiche ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultation_fiche varclsconsultation_fiche = null;
                        while (dr.Read())
                        {

                            varclsconsultation_fiche = new clsconsultation_fiche();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_rendezvous"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_rendezvous = int.Parse(dr["id_rendezvous"].ToString());
                            if (!dr["id_suivicroissance"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_suivicroissance = int.Parse(dr["id_suivicroissance"].ToString());
                            if (!dr["id_vaccination"].ToString().Trim().Equals("")) varclsconsultation_fiche.Id_vaccination = int.Parse(dr["id_vaccination"].ToString());
                            if (!dr["date_consultaion"].ToString().Trim().Equals("")) varclsconsultation_fiche.Date_consultaion = DateTime.Parse(dr["date_consultaion"].ToString());
                            if (!dr["dort_sous_moust"].ToString().Trim().Equals("")) varclsconsultation_fiche.Dort_sous_moust = bool.Parse(dr["dort_sous_moust"].ToString());
                            lstclsconsultation_fiche.Add(varclsconsultation_fiche);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation_fiche;
        }

        public int insertClsconsultation_fiche(clsconsultation_fiche varclsconsultation_fiche)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO consultation_fiche ( id_malade,id_rendezvous,id_suivicroissance,id_vaccination,date_consultaion,dort_sous_moust ) VALUES (@id_malade,@id_rendezvous,@id_suivicroissance,@id_vaccination,@date_consultaion,@dort_sous_moust  )");
                    if (varclsconsultation_fiche.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsconsultation_fiche.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_rendezvous.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_rendezvous", DbType.Int32, 4, varclsconsultation_fiche.Id_rendezvous));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_rendezvous", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_suivicroissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_suivicroissance", DbType.Int32, 4, varclsconsultation_fiche.Id_suivicroissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_suivicroissance", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_vaccination.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vaccination", DbType.Int32, 4, varclsconsultation_fiche.Id_vaccination));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vaccination", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Date_consultaion.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_consultaion", DbType.DateTime, 8, varclsconsultation_fiche.Date_consultaion));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_consultaion", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsultation_fiche.Dort_sous_moust.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, varclsconsultation_fiche.Dort_sous_moust));
                    else cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultation_fiche(clsconsultation_fiche varclsconsultation_fiche)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE consultation_fiche  SET id_malade=@id_malade,id_rendezvous=@id_rendezvous,id_suivicroissance=@id_suivicroissance,id_vaccination=@id_vaccination,date_consultaion=@date_consultaion,dort_sous_moust=@dort_sous_moust  WHERE 1=1  AND id=@id ");
                    if (varclsconsultation_fiche.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsconsultation_fiche.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_rendezvous.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_rendezvous", DbType.Int32, 4, varclsconsultation_fiche.Id_rendezvous));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_rendezvous", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_suivicroissance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_suivicroissance", DbType.Int32, 4, varclsconsultation_fiche.Id_suivicroissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_suivicroissance", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Id_vaccination.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_vaccination", DbType.Int32, 4, varclsconsultation_fiche.Id_vaccination));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_vaccination", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation_fiche.Date_consultaion.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_consultaion", DbType.DateTime, 8, varclsconsultation_fiche.Date_consultaion));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_consultaion", DbType.DateTime, 8, DBNull.Value));
                    if (varclsconsultation_fiche.Dort_sous_moust.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, varclsconsultation_fiche.Dort_sous_moust));
                    else cmd.Parameters.Add(getParameter(cmd, "@dort_sous_moust", DbType.Boolean, 2, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsultation_fiche.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsconsultation_fiche(clsconsultation_fiche varclsconsultation_fiche)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM consultation_fiche  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsultation_fiche.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCONSULTATION_FICHE
        #region  CLSATTENTION
        public clsattention getClsattention(object intid)
        {
            clsattention varclsattention = new clsattention();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM attention WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention.Id = int.Parse(dr["id"].ToString());
                            varclsattention.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsattention;
        }

        public clsattention getAllClsattention1(int intid)
        {
            clsattention varclsattention = new clsattention();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT attention.id,attention.designation FROM attention
            INNER JOIN attention_speciale ON attention.id=attention_speciale.id_attention
            WHERE attention_speciale.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention.Id = int.Parse(dr["id"].ToString());
                            varclsattention.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsattention;
        }

        public List<clsattention> getAllClsattention(string criteria)
        {
            List<clsattention> lstclsattention = new List<clsattention>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM attention  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsattention varclsattention = null;
                        while (dr.Read())
                        {

                            varclsattention = new clsattention();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention.Id = int.Parse(dr["id"].ToString());
                            varclsattention.Designation = dr["designation"].ToString();
                            lstclsattention.Add(varclsattention);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention;
        }

        public List<clsattention> getAllClsattention()
        {
            List<clsattention> lstclsattention = new List<clsattention>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM attention ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsattention varclsattention = null;
                        while (dr.Read())
                        {

                            varclsattention = new clsattention();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsattention.Id = int.Parse(dr["id"].ToString());
                            varclsattention.Designation = dr["designation"].ToString();
                            lstclsattention.Add(varclsattention);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsattention;
        }

        public int insertClsattention(clsattention varclsattention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO attention ( designation ) VALUES (@designation  )");
                    if (varclsattention.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsattention.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsattention(clsattention varclsattention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE attention  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsattention.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsattention.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsattention.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsattention(clsattention varclsattention)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM attention  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsattention.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSATTENTION

        //Eléments ajoutés
        #region  CLSTARIFPRECONSULTATION
        public clstarifpreconsultation getClstarifpreconsultation(object intid)
        {
            clstarifpreconsultation varclstarifpreconsultation = new clstarifpreconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifpreconsultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifpreconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifpreconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifpreconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifpreconsultation;
        }

        public List<clstarifpreconsultation> getAllClspreconsultationtarifpaiement(int id_malade)
        {
            List<clstarifpreconsultation> lstclstarifpreconsultation = new List<clstarifpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossierpreconsultation.id AS idDossierPrecons,dossierpreconsultation.cumul AS montant2,tarifpreconsultation.id,tarifpreconsultation.designation,tarifpreconsultation.montant AS montant FROM tarifpreconsultation 
                    INNER JOIN dossierpreconsultation ON tarifpreconsultation.id=dossierpreconsultation.id_tarifpreconsultation 
                    INNER JOIN malade ON malade.id=dossierpreconsultation.id_malade 
                    INNER JOIN personne ON personne.id=malade.id_personne 
                    WHERE malade.id=" + id_malade + " AND (dossierpreconsultation.etatpaiement='Fiche non payée') ORDER BY tarifpreconsultation.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifpreconsultation varclstarifpreconsultation = null;
                        while (dr.Read())
                        {
                            varclstarifpreconsultation = new clstarifpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierPrecons"].ToString().Trim().Equals("")) varclstarifpreconsultation.Id_de_dossierpreconsultation = int.Parse(dr["idDossierPrecons"].ToString());
                            varclstarifpreconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifpreconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclstarifpreconsultation.DesignationConplete = varclstarifpreconsultation.Designation + "=>" + varclstarifpreconsultation.Montant + " $US";
                            lstclstarifpreconsultation.Add(varclstarifpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifpreconsultation;
        }

        public List<clstarifpreconsultation> getAllClstarifpreconsultation(string criteria)
        {
            List<clstarifpreconsultation> lstclstarifpreconsultation = new List<clstarifpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifpreconsultation  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifpreconsultation varclstarifpreconsultation = null;
                        while (dr.Read())
                        {

                            varclstarifpreconsultation = new clstarifpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifpreconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifpreconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifpreconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifpreconsultation.Add(varclstarifpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifpreconsultation;
        }

        public List<clstarifpreconsultation> getAllClstarifpreconsultation()
        {
            List<clstarifpreconsultation> lstclstarifpreconsultation = new List<clstarifpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifpreconsultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifpreconsultation varclstarifpreconsultation = null;
                        while (dr.Read())
                        {

                            varclstarifpreconsultation = new clstarifpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifpreconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifpreconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifpreconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifpreconsultation.Add(varclstarifpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifpreconsultation;
        }

        public int insertClstarifpreconsultation(clstarifpreconsultation varclstarifpreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifpreconsultation ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifpreconsultation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifpreconsultation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifpreconsultation.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifpreconsultation.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifpreconsultation(clstarifpreconsultation varclstarifpreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifpreconsultation  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifpreconsultation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifpreconsultation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifpreconsultation.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifpreconsultation.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifpreconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifpreconsultation(clstarifpreconsultation varclstarifpreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifpreconsultation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifpreconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTARIFPRECONSULTATION 
        #region  CLSDOSSIERPRECONSULTATION
        public clsdossierpreconsultation getClsdossierpreconsultation(object intid)
        {
            clsdossierpreconsultation varclsdossierpreconsultation = new clsdossierpreconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierpreconsultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Cumul = double.Parse(dr["cumul"].ToString());
                            varclsdossierpreconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierpreconsultation;
        }

        public clsdossierpreconsultation getClsdossierpreconsultation2(object intid)
        {
            clsdossierpreconsultation varclsdossierpreconsultation = new clsdossierpreconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierpreconsultation WHERE id_malade={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Cumul = double.Parse(dr["cumul"].ToString());
                            varclsdossierpreconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierpreconsultation;
        }

        public List<clsdossierpreconsultation> getAllClsdossierpreconsultation(string criteria)
        {
            List<clsdossierpreconsultation> lstclsdossierpreconsultation = new List<clsdossierpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierpreconsultation  WHERE 1=1";
                    sql += "  OR   etatpaiement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierpreconsultation varclsdossierpreconsultation = null;
                        while (dr.Read())
                        {
                            varclsdossierpreconsultation = new clsdossierpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsdossierpreconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Cumul = double.Parse(dr["cumul"].ToString());
                            lstclsdossierpreconsultation.Add(varclsdossierpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierpreconsultation;
        }

        public List<clsdossierpreconsultation> getAllClsdossierpreconsultation1(int criteria)
        {
            List<clsdossierpreconsultation> lstclsdossierpreconsultation = new List<clsdossierpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossierpreconsultation.*,tarifpreconsultation.designation,tarifpreconsultation.montant AS prix  FROM dossierpreconsultation INNER JOIN tarifpreconsultation ON tarifpreconsultation.id=dossierpreconsultation.id_tarifpreconsultation WHERE id_malade = " + criteria + " ";
                    
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierpreconsultation varclsdossierpreconsultation = null;
                        while (dr.Read())
                        {
                            varclsdossierpreconsultation = new clsdossierpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsdossierpreconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Cumul = double.Parse(dr["cumul"].ToString());
                            varclsdossierpreconsultation.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierpreconsultation.Date.ToString().Substring(0, 10);
                            lstclsdossierpreconsultation.Add(varclsdossierpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierpreconsultation;
        }

        public List<clsdossierpreconsultation> getAllClsdossierpreconsultation()
        {
            List<clsdossierpreconsultation> lstclsdossierpreconsultation = new List<clsdossierpreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierpreconsultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierpreconsultation varclsdossierpreconsultation = null;
                        while (dr.Read())
                        {
                            varclsdossierpreconsultation = new clsdossierpreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsdossierpreconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsdossierpreconsultation.Cumul = double.Parse(dr["cumul"].ToString());
                            lstclsdossierpreconsultation.Add(varclsdossierpreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierpreconsultation;
        }

        public int insertClsdossierpreconsultation(clsdossierpreconsultation varclsdossierpreconsultation)
        {
            int i = 0;
            IDbTransaction transaction = null;
            string numeroFiche = "Non Attribué",verif = "";
            double montantFiche = 0;

            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //Lors de la creation du dossier, on affecte au cumul la valeur du montant du tarif de préconsultation
                using (IDbCommand cmd0 = conn.CreateCommand())
                {
                    cmd0.CommandText = string.Format("SELECT tarifpreconsultation.montant AS montant FROM tarifpreconsultation WHERE id=@id ");
                    cmd0.Parameters.Add(getParameter(cmd0, "@id", DbType.Int32, 4, varclsdossierpreconsultation.Id_tarifpreconsultation));
                    cmd0.Transaction = transaction;
                    IDataReader rd = cmd0.ExecuteReader();
                    if (rd.Read()) montantFiche = Convert.ToDouble(rd["montant"].ToString());
                    rd.Dispose();
                }

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossierpreconsultation ( date,id_malade,id_tarifpreconsultation,etatpaiement,cumul ) VALUES (@date,@id_malade,@id_tarifpreconsultation,@etatpaiement,@cumul  )");
                    if (varclsdossierpreconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierpreconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsdossierpreconsultation.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_tarifpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id_tarifpreconsultation));
                    if (varclsdossierpreconsultation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierpreconsultation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@cumul", DbType.Single, 8, montantFiche));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                //Creation du numéro de la fiche pour le malade concerné par la création du dossier
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT numero_fiche FROM malade WHERE id=@id ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclsdossierpreconsultation.Id_malade));
                    cmd1.Transaction = transaction;
                    IDataReader rd = cmd1.ExecuteReader();
                    if(rd.Read()) verif = rd["numero_fiche"].ToString();
                    rd.Dispose();
                }

                if(verif.Equals(numeroFiche))
                {
                    //On génère le numéro de la fiche du malade car il n'est pas encore attribué
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format("UPDATE malade SET numero_fiche=@numero_fiche WHERE id=@id ");
                        cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Int32, 4, varclsdossierpreconsultation.Id_malade));
                        cmd2.Parameters.Add(getParameter(cmd2, "@numero_fiche", DbType.String, 30, generatenumerofichemalade(varclsdossierpreconsultation.Id_malade)));
                        cmd2.Transaction = transaction;
                        i = cmd2.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
                else //On commit la transaction 
                     transaction.Commit();
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec lors de l'insertion, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClsdossierpreconsultation(clsdossierpreconsultation varclsdossierpreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierpreconsultation  SET date=@date,id_malade=@id_malade,id_tarifpreconsultation=@id_tarifpreconsultation,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossierpreconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierpreconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsdossierpreconsultation.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_tarifpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id_tarifpreconsultation));
                    if (varclsdossierpreconsultation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierpreconsultation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdossierpreconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierpreconsultation(int ? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierpreconsultation  SET etatpaiement=@etatpaiement WHERE 1=1  AND id=@id");
                    cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Fiche non payée"));
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossierpreconsultation(clsdossierpreconsultation varclsdossierpreconsultation)
        {
            int i = 0,i1 = 0,i2 = 0,i3 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE  1=1  AND article_paye.id_paiement=(SELECT id FROM paiement WHERE id_dossierpreconsultation=@id_dossierpreconsultation) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id=(SELECT id FROM paiement WHERE id_dossierpreconsultation=@id_dossierpreconsultation) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossierpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM preconsultation WHERE 1=1 AND id_dossierpreconsultation=@id_dossierpreconsultation ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossierpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM dossierpreconsultation  WHERE  1=1  AND id=@id_dossierpreconsultation ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_dossierpreconsultation", DbType.Int32, 4, varclsdossierpreconsultation.Id));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }
        
        #endregion CLSDOSSIERPRECONSULTATION 
        #region  CLSPRECONSULTATION
        public clspreconsultation getClspreconsultation(object intid)
        {
            clspreconsultation varclspreconsultation = new clspreconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM preconsultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspreconsultation.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclspreconsultation.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclspreconsultation.Temperature = Math.Round(double.Parse(dr["temperature"].ToString()),2);
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclspreconsultation.Pressionarterielle = dr["pressionArterielle"].ToString();
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclspreconsultation.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclspreconsultation.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            varclspreconsultation.Observation = dr["observation"].ToString();
                            if (!dr["datePrecons"].ToString().Trim().Equals("")) varclspreconsultation.Dateprecons = DateTime.Parse(dr["datePrecons"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspreconsultation;
        }

        public List<clspreconsultation> getAllClspreconsultation(string criteria)
        {
            List<clspreconsultation> lstclspreconsultation = new List<clspreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM preconsultation  WHERE 1=1";
                    sql += "  OR   observation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspreconsultation varclspreconsultation = null;
                        while (dr.Read())
                        {
                            varclspreconsultation = new clspreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspreconsultation.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclspreconsultation.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclspreconsultation.Temperature = Math.Round(double.Parse(dr["temperature"].ToString()),2);
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclspreconsultation.Pressionarterielle = dr["pressionArterielle"].ToString();
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclspreconsultation.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclspreconsultation.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            varclspreconsultation.Observation = dr["observation"].ToString();
                            if (!dr["datePrecons"].ToString().Trim().Equals("")) varclspreconsultation.Dateprecons = DateTime.Parse(dr["datePrecons"].ToString());
                            lstclspreconsultation.Add(varclspreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspreconsultation;
        }
        
        public List<clspreconsultation> getAllClspreconsultation1(int criteria)
        {
            List<clspreconsultation> lstclspreconsultation = new List<clspreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM preconsultation  WHERE id_dossierpreconsultation = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspreconsultation varclspreconsultation = null;
                        while (dr.Read())
                        {
                            varclspreconsultation = new clspreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspreconsultation.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclspreconsultation.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclspreconsultation.Temperature = Math.Round(double.Parse(dr["temperature"].ToString()),2);
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclspreconsultation.Pressionarterielle = dr["pressionArterielle"].ToString();
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclspreconsultation.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclspreconsultation.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            varclspreconsultation.Observation = dr["observation"].ToString();
                            if (!dr["datePrecons"].ToString().Trim().Equals("")) varclspreconsultation.Dateprecons = DateTime.Parse(dr["datePrecons"].ToString());
                            lstclspreconsultation.Add(varclspreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspreconsultation;
        }

        public List<clspreconsultation> getAllClspreconsultation2(int criteria)
        {
            List<clspreconsultation> lstclspreconsultation = new List<clspreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT preconsultation.id,dossierpreconsultation.id as idDossier, preconsultation.poid, preconsultation.temperature, preconsultation.pressionArterielle, preconsultation.pouls,ROUND(preconsultation.taille,2) AS taille, preconsultation.observation, preconsultation.datePrecons FROM  dossierpreconsultation 
                    INNER JOIN preconsultation ON dossierpreconsultation.id = preconsultation.id_dossierpreconsultation  WHERE dossierpreconsultation.id_malade= " + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspreconsultation varclspreconsultation = null;
                        while (dr.Read())
                        {
                            varclspreconsultation = new clspreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossier"].ToString().Trim().Equals("")) varclspreconsultation.Id_dossierpreconsultation = int.Parse(dr["idDossier"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclspreconsultation.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclspreconsultation.Temperature = Math.Round(double.Parse(dr["temperature"].ToString()),2);
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclspreconsultation.Pressionarterielle = dr["pressionArterielle"].ToString();
                            if (!dr["observation"].ToString().Trim().Equals("")) varclspreconsultation.Observation = dr["observation"].ToString();
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclspreconsultation.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclspreconsultation.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            if (!dr["datePrecons"].ToString().Trim().Equals("")) varclspreconsultation.Dateprecons = DateTime.Parse(dr["datePrecons"].ToString());
                            lstclspreconsultation.Add(varclspreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspreconsultation;
        }
        
        public List<clspreconsultation> getAllClspreconsultation()
        {
            List<clspreconsultation> lstclspreconsultation = new List<clspreconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM preconsultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspreconsultation varclspreconsultation = null;
                        while (dr.Read())
                        {
                            varclspreconsultation = new clspreconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspreconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspreconsultation.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["poid"].ToString().Trim().Equals("")) varclspreconsultation.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclspreconsultation.Temperature = Math.Round(double.Parse(dr["temperature"].ToString()),2);
                            if (!dr["pressionArterielle"].ToString().Trim().Equals("")) varclspreconsultation.Pressionarterielle = dr["pressionArterielle"].ToString();
                            if (!dr["pouls"].ToString().Trim().Equals("")) varclspreconsultation.Pouls = int.Parse(dr["pouls"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclspreconsultation.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            varclspreconsultation.Observation = dr["observation"].ToString();
                            if (!dr["datePrecons"].ToString().Trim().Equals("")) varclspreconsultation.Dateprecons = DateTime.Parse(dr["datePrecons"].ToString());                           
                            lstclspreconsultation.Add(varclspreconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspreconsultation;
        }

        public int insertClspreconsultation(clspreconsultation varclspreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO preconsultation ( id_dossierpreconsultation,poid,temperature,pressionArterielle,pouls,taille,observation,datePrecons) VALUES (@id_dossierpreconsultation,@poid,@temperature,@pressionArterielle,@pouls,@taille,@observation,@datePrecons )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 4, varclspreconsultation.Id_dossierpreconsultation));
                    if (varclspreconsultation.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclspreconsultation.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Temperature.HasValue) cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, varclspreconsultation.Temperature));
                    else cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Pressionarterielle != null) cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.String, 50, varclspreconsultation.Pressionarterielle));
                    else cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.String, 30, DBNull.Value));
                    if (varclspreconsultation.Pouls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, varclspreconsultation.Pouls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, DBNull.Value));
                    if (varclspreconsultation.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclspreconsultation.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 3000, varclspreconsultation.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 3000, DBNull.Value));
                    if (varclspreconsultation.Dateprecons.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datePrecons", DbType.DateTime, 8, varclspreconsultation.Dateprecons));
                    else cmd.Parameters.Add(getParameter(cmd, "@datePrecons", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClspreconsultation(clspreconsultation varclspreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE preconsultation  SET id_dossierpreconsultation=@id_dossierpreconsultation,poid=@poid,temperature=@temperature,pressionArterielle=@pressionArterielle,pouls=@pouls,taille=@taille,observation=@observation,datePrecons=@datePrecons  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 4, varclspreconsultation.Id_dossierpreconsultation));
                    if (varclspreconsultation.Poid.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclspreconsultation.Poid));
                    else cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Temperature.HasValue) cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, varclspreconsultation.Temperature));
                    else cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Pressionarterielle != null) cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.String, 50, varclspreconsultation.Pressionarterielle));
                    else cmd.Parameters.Add(getParameter(cmd, "@pressionArterielle", DbType.String, 30, DBNull.Value));
                    if (varclspreconsultation.Pouls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, varclspreconsultation.Pouls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pouls", DbType.Int32, 4, DBNull.Value));
                    if (varclspreconsultation.Taille.HasValue) cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclspreconsultation.Taille));
                    else cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, DBNull.Value));
                    if (varclspreconsultation.Observation != null) cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 3000, varclspreconsultation.Observation));
                    else cmd.Parameters.Add(getParameter(cmd, "@observation", DbType.String, 3000, DBNull.Value));
                    if (varclspreconsultation.Dateprecons.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datePrecons", DbType.DateTime, 8, varclspreconsultation.Dateprecons));
                    else cmd.Parameters.Add(getParameter(cmd, "@datePrecons", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspreconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClspreconsultation(clspreconsultation varclspreconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM preconsultation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclspreconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPRECONSULTATION 
        #region  CLSTARIFCONSULTATION
        public clstarifconsultation getClstarifconsultation(object intid)
        {
            clstarifconsultation varclstarifconsultation = new clstarifconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifconsultation;
        }

        public List<clstarifconsultation> getAllClstarifconsultation(string criteria)
        {
            List<clstarifconsultation> lstclstarifconsultation = new List<clstarifconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifconsultation  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultation varclstarifconsultation = null;
                        while (dr.Read())
                        {

                            varclstarifconsultation = new clstarifconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultation.Add(varclstarifconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultation;
        }

        public List<clstarifconsultation> getAllClstarifconsultation()
        {
            List<clstarifconsultation> lstclstarifconsultation = new List<clstarifconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultation varclstarifconsultation = null;
                        while (dr.Read())
                        {
                            varclstarifconsultation = new clstarifconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultation.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultation.Add(varclstarifconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultation;
        }

        public List<clstarifconsultation> getAllClsconsultationtarifpaiement(int id_malade)
        {
            List<clstarifconsultation> lstclstarifconsultation = new List<clstarifconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT consultation.id AS idCons,tarifconsultation.id,tarifconsultation.designation,tarifconsultation.montant FROM tarifconsultation 
                    INNER JOIN consultation ON tarifconsultation.id=consultation.id_tarifconsultation 
                    INNER JOIN malade ON malade.id=consultation.id_malade 
                    INNER JOIN personne ON personne.id=malade.id_personne 
                    WHERE malade.id=" + id_malade + " AND (consultation.etatpaiement='Non cloturé non payé' OR consultation.etatpaiement='Cloturé non payé')");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifconsultation varclstarifconsultation = null;
                        while (dr.Read())
                        {
                            varclstarifconsultation = new clstarifconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idCons"].ToString().Trim().Equals("")) varclstarifconsultation.Id_de_consultation = int.Parse(dr["idCons"].ToString());
                            varclstarifconsultation.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultation.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            varclstarifconsultation.DesignationConplete = varclstarifconsultation.Designation + "=>" + varclstarifconsultation.Montant + " $US";
                            lstclstarifconsultation.Add(varclstarifconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultation;
        }

        public int insertClstarifconsultation(clstarifconsultation varclstarifconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifconsultation ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifconsultation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultation.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifconsultation.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifconsultation(clstarifconsultation varclstarifconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifconsultation  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifconsultation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultation.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifconsultation.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifconsultation(clstarifconsultation varclstarifconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifconsultation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTARIFCONSULTATION
        #region  CLSCONSULTATION
        public clsconsultation getClsconsultation(object intid)
        {
            clsconsultation varclsconsultation = new clsconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultation;
        }

        public clsconsultation getClsconsultation1(int ? id)
        {
            clsconsultation varclsconsultation = new clsconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM consultation WHERE id= @id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultation;
        }

        public List<clsconsultation> getAllClsconsultation(string criteria)
        {
            List<clsconsultation> lstclsconsultation = new List<clsconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultation  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultation varclsconsultation = null;
                        while (dr.Read())
                        {

                            varclsconsultation = new clsconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsconsultation.Add(varclsconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation;
        }

        public List<clsconsultation> getAllClsconsultation2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsconsultation> lstclsconsultation = new List<clsconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT consultation.*,tarifconsultation.designation,tarifconsultation.montant AS prix  FROM consultation INNER JOIN tarifconsultation ON tarifconsultation.id=consultation.id_tarifconsultation WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultation varclsconsultation = null;
                        while (dr.Read())
                        {
                            varclsconsultation = new clsconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsconsultation.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsconsultation.Date.ToString().Substring(0, 10);
                            lstclsconsultation.Add(varclsconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation;
        }

        public List<clsconsultation> getAllClsconsultation3(int criteria)
        {
            List<clsconsultation> lstclsconsultation = new List<clsconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultation  WHERE id_malade = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultation varclsconsultation = null;
                        while (dr.Read())
                        {

                            varclsconsultation = new clsconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsconsultation.Add(varclsconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation;
        }

        public List<clsconsultation> getAllClsconsultation()
        {
            List<clsconsultation> lstclsconsultation = new List<clsconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconsultation varclsconsultation = null;
                        while (dr.Read())
                        {

                            varclsconsultation = new clsconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsconsultation.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsconsultation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultation"].ToString().Trim().Equals("")) varclsconsultation.Id_tarifconsultation = int.Parse(dr["id_tarifconsultation"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsconsultation.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsconsultation.Add(varclsconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultation;
        }

        public int insertClsconsultation(clsconsultation varclsconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO consultation ( date,id_agent,id_malade,id_tarifconsultation,etatpaiement ) VALUES (@date,@id_agent,@id_malade,@id_tarifconsultation,@etatpaiement  )");
                    if (varclsconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 4, varclsconsultation.Id_agent));
                    if (varclsconsultation.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsconsultation.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation.Id_tarifconsultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultation", DbType.Int32, 4, varclsconsultation.Id_tarifconsultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultation", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsconsultation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultation(clsconsultation varclsconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE consultation  SET date=@date,id_agent=@id_agent,id_malade=@id_malade,id_tarifconsultation=@id_tarifconsultation,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 4, varclsconsultation.Id_agent));
                    if (varclsconsultation.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsconsultation.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation.Id_tarifconsultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultation", DbType.Int32, 4, varclsconsultation.Id_tarifconsultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultation", DbType.Int32, 4, DBNull.Value));
                    if (varclsconsultation.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsconsultation.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultation(int ? id, string etatpaiement )
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE consultation SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE consultation SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        
        public int deleteClsconsultation(clsconsultation varclsconsultation)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM examengynecoobsetrical WHERE  1=1  AND id_mouvementconsultation=(SELECT id FROM mouvementconsultation WHERE id_consultation=@id_consultation) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM mouvementmaladie WHERE  1=1  AND id_mouvementconsultation=(SELECT id FROM mouvementconsultation WHERE id_consultation=@id_consultation) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM mouvementconsultation WHERE 1=1 AND id_consultation=(SELECT id FROM consultation WHERE id=@id_consultation) ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_consultation=@id_consultation) ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                }

                using (IDbCommand cmd4 = conn.CreateCommand())
                {
                    cmd4.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_consultation=@id_consultation ");
                    cmd4.Parameters.Add(getParameter(cmd4, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd4.Transaction = transaction;
                    i4 = cmd4.ExecuteNonQuery();
                }

                using (IDbCommand cmd5 = conn.CreateCommand())
                {
                    cmd5.CommandText = string.Format("DELETE FROM consultation WHERE 1=1 AND id=@id_consultation ");
                    cmd5.Parameters.Add(getParameter(cmd5, "@id_consultation", DbType.Int32, 4, varclsconsultation.Id));
                    cmd5.Transaction = transaction;
                    i5 = cmd5.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i5;
        }

        #endregion CLSCONSULTATION
        #region  CLSMOUVEMENTCONSULTATION
        public string getClsResultatExamen_mouvementconsultation(int intid_mouvementconsultation, string  d)
        {
            string varclsmouvementconsultation = "";
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT examen.designation AS examen,mouvementoperation_laboratoire.resultat AS resultat FROM mouvementoperation_laboratoire
                    INNER JOIN operation_laboratoire ON operation_laboratoire.id=mouvementoperation_laboratoire.id_operation_laboratoire
                    INNER JOIN malade ON malade.id=operation_laboratoire.id_malade 
                    INNER JOIN examen ON examen.id=operation_laboratoire.id_examen
                    WHERE malade.id=" + intid_mouvementconsultation + " AND convert(date,mouvementoperation_laboratoire.date,100)='" + d + "'";
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read()) varclsmouvementconsultation = "Examen:\n" + dr["examen"].ToString() + ".\nRésultats:\n" + dr["resultat"].ToString() + ".";

                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementconsultation;
        }

        public clsmouvementconsultation getClsmouvementconsultation(object intid)
        {
            clsmouvementconsultation varclsmouvementconsultation = new clsmouvementconsultation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementconsultation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementconsultation;
        }

        public List<clsmouvementconsultation> getAllClsmouvementconsultation(string criteria)
        {
            List<clsmouvementconsultation> lstclsmouvementconsultation = new List<clsmouvementconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementconsultation  WHERE 1=1";
                    sql += "  OR   plainte LIKE '%" + criteria + "%'";
                    sql += "  OR   symptome LIKE '%" + criteria + "%'";
                    sql += "  OR   diagnostics LIKE '%" + criteria + "%'";
                    sql += "  OR   medicamentaprescrire LIKE '%" + criteria + "%'";
                    sql += "  OR   conduite LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementconsultation varclsmouvementconsultation = null;
                        while (dr.Read())
                        {

                            varclsmouvementconsultation = new clsmouvementconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                            lstclsmouvementconsultation.Add(varclsmouvementconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementconsultation;
        }

        public List<clsmouvementconsultation> getAllClsmouvementconsultation1(int criteria)
        {
            List<clsmouvementconsultation> lstclsmouvementconsultation = new List<clsmouvementconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT    mouvementconsultation.id,consultation.id as idCons mouvementconsultation.date, mouvementconsultation.diagnostics
                                    FROM consultation INNER JOIN mouvementconsultation ON consultation.id = mouvementconsultation.id_consultation where consultation.id_malade=" + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementconsultation varclsmouvementconsultation = null;
                        while (dr.Read())
                        {
                            varclsmouvementconsultation = new clsmouvementconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["idCons"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["idCons"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                            lstclsmouvementconsultation.Add(varclsmouvementconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementconsultation;
        }

        public List<clsmouvementconsultation> getAllClsmouvementconsultation()
        {
            List<clsmouvementconsultation> lstclsmouvementconsultation = new List<clsmouvementconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementconsultation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementconsultation varclsmouvementconsultation = null;
                        while (dr.Read())
                        {

                            varclsmouvementconsultation = new clsmouvementconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                            lstclsmouvementconsultation.Add(varclsmouvementconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementconsultation;
        }

        public List<clsmouvementconsultation> getAllClsmouvementconsultation2(int criteria)
        {
            List<clsmouvementconsultation> lstclsmouvementconsultation = new List<clsmouvementconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementconsultation where id_consultation=" + criteria + "");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementconsultation varclsmouvementconsultation = null;
                        while (dr.Read())
                        {
                            varclsmouvementconsultation = new clsmouvementconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                            lstclsmouvementconsultation.Add(varclsmouvementconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementconsultation;
        }

        public List<clsmouvementconsultation> getAllClsmouvementconsultation3(int id_malade)
        {
            List<clsmouvementconsultation> lstclsmouvementconsultation = new List<clsmouvementconsultation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT mouvementconsultation.* FROM mouvementconsultation
                    INNER JOIN consultation ON consultation.id = mouvementconsultation.id_consultation
                    INNER JOIN malade ON malade.id = consultation.id_malade where malade.id=" + id_malade + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementconsultation varclsmouvementconsultation = null;
                        while (dr.Read())
                        {
                            varclsmouvementconsultation = new clsmouvementconsultation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementconsultation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclsmouvementconsultation.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            varclsmouvementconsultation.Plainte = dr["plainte"].ToString();
                            varclsmouvementconsultation.Symptome = dr["symptome"].ToString();
                            varclsmouvementconsultation.Diagnostics = dr["diagnostics"].ToString();
                            varclsmouvementconsultation.Medicamentaprescrire = dr["medicamentaprescrire"].ToString();
                            varclsmouvementconsultation.Conduite = dr["conduite"].ToString();
                            lstclsmouvementconsultation.Add(varclsmouvementconsultation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementconsultation;
        }

        public int insertClsmouvementconsultation(clsmouvementconsultation varclsmouvementconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mouvementconsultation ( date,id_consultation,plainte,symptome,diagnostics,medicamentaprescrire,conduite ) VALUES (@date,@id_consultation,@plainte,@symptome,@diagnostics,@medicamentaprescrire,@conduite)");
                    if (varclsmouvementconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 4, varclsmouvementconsultation.Id_consultation));
                    if (varclsmouvementconsultation.Plainte != null) cmd.Parameters.Add(getParameter(cmd, "@plainte", DbType.String, 3000, varclsmouvementconsultation.Plainte));
                    else cmd.Parameters.Add(getParameter(cmd, "@plainte", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Symptome != null) cmd.Parameters.Add(getParameter(cmd, "@symptome", DbType.String, 3000, varclsmouvementconsultation.Symptome));
                    else cmd.Parameters.Add(getParameter(cmd, "@symptome", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Diagnostics != null) cmd.Parameters.Add(getParameter(cmd, "@diagnostics", DbType.String, 3000, varclsmouvementconsultation.Diagnostics));
                    else cmd.Parameters.Add(getParameter(cmd, "@diagnostics", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Medicamentaprescrire != null) cmd.Parameters.Add(getParameter(cmd, "@medicamentaprescrire", DbType.String, 3000, varclsmouvementconsultation.Medicamentaprescrire));
                    else cmd.Parameters.Add(getParameter(cmd, "@medicamentaprescrire", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Conduite != null) cmd.Parameters.Add(getParameter(cmd, "@conduite", DbType.String, 3000, varclsmouvementconsultation.Conduite));
                    else cmd.Parameters.Add(getParameter(cmd, "@conduite", DbType.String, 3000, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmouvementconsultation(clsmouvementconsultation varclsmouvementconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mouvementconsultation  SET date=@date,id_consultation=@id_consultation,plainte=@plainte,symptome=@symptome,diagnostics=@diagnostics,medicamentaprescrire=@medicamentaprescrire,conduite=@conduite  WHERE 1=1  AND id=@id ");
                    if (varclsmouvementconsultation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementconsultation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 4, varclsmouvementconsultation.Id_consultation));
                    if (varclsmouvementconsultation.Plainte != null) cmd.Parameters.Add(getParameter(cmd, "@plainte", DbType.String, 3000, varclsmouvementconsultation.Plainte));
                    else cmd.Parameters.Add(getParameter(cmd, "@plainte", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Symptome != null) cmd.Parameters.Add(getParameter(cmd, "@symptome", DbType.String, 3000, varclsmouvementconsultation.Symptome));
                    else cmd.Parameters.Add(getParameter(cmd, "@symptome", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Diagnostics != null) cmd.Parameters.Add(getParameter(cmd, "@diagnostics", DbType.String, 3000, varclsmouvementconsultation.Diagnostics));
                    else cmd.Parameters.Add(getParameter(cmd, "@diagnostics", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Medicamentaprescrire != null) cmd.Parameters.Add(getParameter(cmd, "@medicamentaprescrire", DbType.String, 3000, varclsmouvementconsultation.Medicamentaprescrire));
                    else cmd.Parameters.Add(getParameter(cmd, "@medicamentaprescrire", DbType.String, 3000, DBNull.Value));
                    if (varclsmouvementconsultation.Conduite != null) cmd.Parameters.Add(getParameter(cmd, "@conduite", DbType.String, 3000, varclsmouvementconsultation.Conduite));
                    else cmd.Parameters.Add(getParameter(cmd, "@conduite", DbType.String, 3000, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementconsultation.Id));

                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmouvementconsultation(clsmouvementconsultation varclsmouvementconsultation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementconsultation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementconsultation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMOUVEMENTCONSULTATION 
        #region  CLSMVMHOSPITALISATION
        public clsmvmhospitalisation getClsmvmhospitalisation(object intid)
        {
            clsmvmhospitalisation varclsmvmhospitalisation = new clsmvmhospitalisation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mvmhospitalisation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Temperature = int.Parse(dr["temperature"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["ta"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Ta = int.Parse(dr["ta"].ToString());
                            if (!dr["pls"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Pls = int.Parse(dr["pls"].ToString());
                            varclsmvmhospitalisation.Resiration = dr["resiration"].ToString();
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmvmhospitalisation;
        }

        public List<clsmvmhospitalisation> getAllClsmvmhospitalisation(string criteria)
        {
            List<clsmvmhospitalisation> lstclsmvmhospitalisation = new List<clsmvmhospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mvmhospitalisation  WHERE 1=1";
                    sql += "  OR   resiration LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmvmhospitalisation varclsmvmhospitalisation = null;
                        while (dr.Read())
                        {

                            varclsmvmhospitalisation = new clsmvmhospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Temperature = int.Parse(dr["temperature"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["ta"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Ta = int.Parse(dr["ta"].ToString());
                            if (!dr["pls"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Pls = int.Parse(dr["pls"].ToString());
                            varclsmvmhospitalisation.Resiration = dr["resiration"].ToString();
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            lstclsmvmhospitalisation.Add(varclsmvmhospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmvmhospitalisation;
        }

        public List<clsmvmhospitalisation> getAllClsmvmhospitalisation1(int criteria)
        {
            List<clsmvmhospitalisation> lstclsmvmhospitalisation = new List<clsmvmhospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mvmhospitalisation  WHERE id_hospitalisation=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmvmhospitalisation varclsmvmhospitalisation = null;
                        while (dr.Read())
                        {
                            varclsmvmhospitalisation = new clsmvmhospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Temperature = int.Parse(dr["temperature"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["ta"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Ta = int.Parse(dr["ta"].ToString());
                            if (!dr["pls"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Pls = int.Parse(dr["pls"].ToString());
                            varclsmvmhospitalisation.Resiration = dr["resiration"].ToString();
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            lstclsmvmhospitalisation.Add(varclsmvmhospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmvmhospitalisation;
        }

        public List<clsmvmhospitalisation> getAllClsmvmhospitalisation()
        {
            List<clsmvmhospitalisation> lstclsmvmhospitalisation = new List<clsmvmhospitalisation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mvmhospitalisation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmvmhospitalisation varclsmvmhospitalisation = null;
                        while (dr.Read())
                        {

                            varclsmvmhospitalisation = new clsmvmhospitalisation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["temperature"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Temperature = int.Parse(dr["temperature"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["ta"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Ta = int.Parse(dr["ta"].ToString());
                            if (!dr["pls"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Pls = int.Parse(dr["pls"].ToString());
                            varclsmvmhospitalisation.Resiration = dr["resiration"].ToString();
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclsmvmhospitalisation.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            lstclsmvmhospitalisation.Add(varclsmvmhospitalisation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmvmhospitalisation;
        }

        public int insertClsmvmhospitalisation(clsmvmhospitalisation varclsmvmhospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mvmhospitalisation ( temperature,date,ta,pls,resiration,id_hospitalisation) VALUES (@temperature,@date,@ta,@pls,@resiration,@id_hospitalisation)");
                    if (varclsmvmhospitalisation.Temperature.HasValue) cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Int32, 4, varclsmvmhospitalisation.Temperature));
                    else cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmvmhospitalisation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsmvmhospitalisation.Ta.HasValue) cmd.Parameters.Add(getParameter(cmd, "@ta", DbType.Int32, 4, varclsmvmhospitalisation.Ta));
                    else cmd.Parameters.Add(getParameter(cmd, "@ta", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Pls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pls", DbType.Int32, 4, varclsmvmhospitalisation.Pls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pls", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Resiration != null) cmd.Parameters.Add(getParameter(cmd, "@resiration", DbType.String, 50, varclsmvmhospitalisation.Resiration));
                    else cmd.Parameters.Add(getParameter(cmd, "@resiration", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 4, varclsmvmhospitalisation.Id_hospitalisation));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmvmhospitalisation(clsmvmhospitalisation varclsmvmhospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mvmhospitalisation  SET temperature=@temperature,date=@date,ta=@ta,pls=@pls,resiration=@resiration,id_hospitalisation=@id_hospitalisation  WHERE 1=1  AND id=@id ");
                    if (varclsmvmhospitalisation.Temperature.HasValue) cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Int32, 4, varclsmvmhospitalisation.Temperature));
                    else cmd.Parameters.Add(getParameter(cmd, "@temperature", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmvmhospitalisation.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsmvmhospitalisation.Ta.HasValue) cmd.Parameters.Add(getParameter(cmd, "@ta", DbType.Int32, 4, varclsmvmhospitalisation.Ta));
                    else cmd.Parameters.Add(getParameter(cmd, "@ta", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Pls.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pls", DbType.Int32, 4, varclsmvmhospitalisation.Pls));
                    else cmd.Parameters.Add(getParameter(cmd, "@pls", DbType.Int32, 4, DBNull.Value));
                    if (varclsmvmhospitalisation.Resiration != null) cmd.Parameters.Add(getParameter(cmd, "@resiration", DbType.String, 50, varclsmvmhospitalisation.Resiration));
                    else cmd.Parameters.Add(getParameter(cmd, "@resiration", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 4, varclsmvmhospitalisation.Id_hospitalisation));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmvmhospitalisation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmvmhospitalisation(clsmvmhospitalisation varclsmvmhospitalisation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mvmhospitalisation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmvmhospitalisation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMVMHOSPITALISATION 
        #region  CLSTARIFCONSULTATIONPOSTNATAL
        public clstarifconsultationpostnatal getClstarifconsultationpostnatal(object intid)
        {
            clstarifconsultationpostnatal varclstarifconsultationpostnatal = new clstarifconsultationpostnatal();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationpostnatal WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationpostnatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifconsultationpostnatal;
        }

        public List<clstarifconsultationpostnatal> getAllClstarifconsultationpostnataltarifpaiement(int id_malade)
        {
            List<clstarifconsultationpostnatal> lstclstarifconsultationpostnatal = new List<clstarifconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossierconsultationpostnatal.id AS idDossierPostScolaire,tarifconsultationpostnatal.id,tarifconsultationpostnatal.designation,tarifconsultationpostnatal.montant FROM tarifconsultationpostnatal 
                    INNER JOIN dossierconsultationpostnatal ON tarifconsultationpostnatal.id=dossierconsultationpostnatal.id_tarifconsultationpostnatal
                    INNER JOIN malade ON malade.id=dossierconsultationpostnatal.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossierconsultationpostnatal.etatpaiement='Non cloturé non payé' OR dossierconsultationpostnatal.etatpaiement='Cloturé non payé') ORDER BY tarifconsultationpostnatal.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifconsultationpostnatal varclstarifconsultationpostnatal = null;
                        while (dr.Read())
                        {
                            varclstarifconsultationpostnatal = new clstarifconsultationpostnatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierPostScolaire"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Id_de_dossierconsultationpostnatal = int.Parse(dr["idDossierPostScolaire"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            varclstarifconsultationpostnatal.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["montant"].ToString()),2) + " $US";
                            lstclstarifconsultationpostnatal.Add(varclstarifconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationpostnatal;
        }

        public List<clstarifconsultationpostnatal> getAllClstarifconsultationpostnatal(string criteria)
        {
            List<clstarifconsultationpostnatal> lstclstarifconsultationpostnatal = new List<clstarifconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifconsultationpostnatal  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultationpostnatal varclstarifconsultationpostnatal = null;
                        while (dr.Read())
                        {

                            varclstarifconsultationpostnatal = new clstarifconsultationpostnatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationpostnatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationpostnatal.Add(varclstarifconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationpostnatal;
        }

        public List<clstarifconsultationpostnatal> getAllClstarifconsultationpostnatal()
        {
            List<clstarifconsultationpostnatal> lstclstarifconsultationpostnatal = new List<clstarifconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationpostnatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultationpostnatal varclstarifconsultationpostnatal = null;
                        while (dr.Read())
                        {

                            varclstarifconsultationpostnatal = new clstarifconsultationpostnatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationpostnatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationpostnatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationpostnatal.Add(varclstarifconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationpostnatal;
        }

        public int insertClstarifconsultationpostnatal(clstarifconsultationpostnatal varclstarifconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifconsultationpostnatal ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifconsultationpostnatal.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultationpostnatal.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultationpostnatal.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifconsultationpostnatal.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifconsultationpostnatal(clstarifconsultationpostnatal varclstarifconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifconsultationpostnatal  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifconsultationpostnatal.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultationpostnatal.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultationpostnatal.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifconsultationpostnatal.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifconsultationpostnatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifconsultationpostnatal(clstarifconsultationpostnatal varclstarifconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifconsultationpostnatal  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifconsultationpostnatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSTARIFCONSULTATIONPOSTNATAL
        #region  CLSAUTREFRAIE
        public clsautrefraie getClsautrefraie(object intid)
        {
            clsautrefraie varclsautrefraie = new clsautrefraie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM autrefraie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsautrefraie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_etablissementexterne"].ToString().Trim().Equals("")) varclsautrefraie.Id_etablissementexterne = int.Parse(dr["id_etablissementexterne"].ToString());
                            if (!dr["numerofacture"].ToString().Trim().Equals("")) varclsautrefraie.Numerofacture = (dr["numerofacture"].ToString());
                            if (!dr["datepaiement"].ToString().Trim().Equals("")) varclsautrefraie.Datepaiement = DateTime.Parse(dr["datepaiement"].ToString());
                            if (!dr["dateenregistrement"].ToString().Trim().Equals("")) varclsautrefraie.Dateenregistrement = DateTime.Parse(dr["dateenregistrement"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsautrefraie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclsautrefraie.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsautrefraie;
        }

        public int getClsautrefraie_nbrRecord(object intid_detailautrefraie)
        {
            int varclsautrefraie = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT COUNT(autrefraie.id) AS nbrRec FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie WHERE detailsautrefraie.id={0}", intid_detailautrefraie);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsautrefraie = int.Parse(dr["nbrRec"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsautrefraie;
        }

        public int getClsautrefraie_Autrefraie(object intid_detailautrefraie)
        {
            int varclsautrefraie = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT autrefraie.id AS id_autrefraie FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie WHERE detailsautrefraie.id={0}", intid_detailautrefraie);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsautrefraie = int.Parse(dr["id_autrefraie"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsautrefraie;
        }

        public clsautrefraie getClsautrefraie2(object intid_detailautrefraie)
        {
            clsautrefraie varclsautrefraie = new clsautrefraie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT autrefraie.id,autrefraie.numerofacture,autrefraie.datepaiement,autrefraie.dateenregistrement,autrefraie.montant,autrefraie.etatpaiement,autrefraie.id_etablissementexterne,autrefraie.id_malade FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie WHERE detailsautrefraie.id={0}", intid_detailautrefraie);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsautrefraie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_etablissementexterne"].ToString().Trim().Equals("")) varclsautrefraie.Id_etablissementexterne = int.Parse(dr["id_etablissementexterne"].ToString());
                            if (!dr["numerofacture"].ToString().Trim().Equals("")) varclsautrefraie.Numerofacture = (dr["numerofacture"].ToString());
                            if (!dr["datepaiement"].ToString().Trim().Equals("")) varclsautrefraie.Datepaiement = DateTime.Parse(dr["datepaiement"].ToString());
                            if (!dr["dateenregistrement"].ToString().Trim().Equals("")) varclsautrefraie.Dateenregistrement = DateTime.Parse(dr["dateenregistrement"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsautrefraie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclsautrefraie.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsautrefraie;
        }

        public List<clsautrefraie> getAllClsautrefraie(string criteria)
        {
            List<clsautrefraie> lstclsautrefraie = new List<clsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM autrefraie  WHERE 1=1";
                    sql += "  OR   numerofacture LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsautrefraie varclsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsautrefraie = new clsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsautrefraie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_etablissementexterne"].ToString().Trim().Equals("")) varclsautrefraie.Id_etablissementexterne = int.Parse(dr["id_etablissementexterne"].ToString());
                            if (!dr["numerofacture"].ToString().Trim().Equals("")) varclsautrefraie.Numerofacture = (dr["numerofacture"].ToString());
                            if (!dr["datepaiement"].ToString().Trim().Equals("")) varclsautrefraie.Datepaiement = DateTime.Parse(dr["datepaiement"].ToString());
                            if (!dr["dateenregistrement"].ToString().Trim().Equals("")) varclsautrefraie.Dateenregistrement = DateTime.Parse(dr["dateenregistrement"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsautrefraie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclsautrefraie.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsautrefraie.Add(varclsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsautrefraie;
        }

        public List<clsautrefraie> getAllClsautrefraie()
        {
            List<clsautrefraie> lstclsautrefraie = new List<clsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM autrefraie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsautrefraie varclsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsautrefraie = new clsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsautrefraie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_etablissementexterne"].ToString().Trim().Equals("")) varclsautrefraie.Id_etablissementexterne = int.Parse(dr["id_etablissementexterne"].ToString());
                            if (!dr["numerofacture"].ToString().Trim().Equals("")) varclsautrefraie.Numerofacture = (dr["numerofacture"].ToString());
                            if (!dr["datepaiement"].ToString().Trim().Equals("")) varclsautrefraie.Datepaiement = DateTime.Parse(dr["datepaiement"].ToString());
                            if (!dr["dateenregistrement"].ToString().Trim().Equals("")) varclsautrefraie.Dateenregistrement = DateTime.Parse(dr["dateenregistrement"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsautrefraie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclsautrefraie.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsautrefraie.Add(varclsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsautrefraie;
        }

        public DataTable getAllClsautrefraie1()
        {
            DataTable lstclsautrefraie = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT autrefraie.id,detailsautrefraie.id,autrefraie.numerofacture,autrefraie.datepaiement,autrefraie.dateenregistrement,detailsautrefraie.designation ,detailsautrefraie.prix,detailsautrefraie.quantinte,autrefraie.montant,autrefraie.etatpaiement,autrefraie.id_etablissementexterne,autrefraie.id_malade FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsautrefraie.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsautrefraie;
        }

        public List<clsautrefraie> getAllClsautrefraistarifpaiement(int id_malade)
        {
            List<clsautrefraie> lstclsclsautrefraie = new List<clsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT autrefraie.id,autrefraie.id_etablissementexterne,autrefraie.id_malade,autrefraie.numerofacture,autrefraie.datepaiement,autrefraie.dateenregistrement,autrefraie.montant,autrefraie.etatpaiement,detailsautrefraie.designation,detailsautrefraie.prix,detailsautrefraie.quantinte FROM detailsautrefraie 
                    INNER JOIN autrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie 
                    INNER JOIN malade ON malade.id=autrefraie.id_malade 
                    WHERE malade.id=" + id_malade + " AND (autrefraie.etatpaiement='Non payé') ORDER BY detailsautrefraie.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsautrefraie varclsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsautrefraie = new clsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            //if (!dr["idAutrefraie"].ToString().Trim().Equals("")) varclsautrefraie.Id_de_autrefraie = int.Parse(dr["idAutrefraie"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsautrefraie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_etablissementexterne"].ToString().Trim().Equals("")) varclsautrefraie.Id_etablissementexterne = int.Parse(dr["id_etablissementexterne"].ToString());
                            if (!dr["numerofacture"].ToString().Trim().Equals("")) varclsautrefraie.Numerofacture = (dr["numerofacture"].ToString());
                            if (!dr["datepaiement"].ToString().Trim().Equals("")) varclsautrefraie.Datepaiement = DateTime.Parse(dr["datepaiement"].ToString());
                            if (!dr["dateenregistrement"].ToString().Trim().Equals("")) varclsautrefraie.Dateenregistrement = DateTime.Parse(dr["dateenregistrement"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsautrefraie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclsautrefraie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsautrefraie.DesignationComplete = double.Parse(dr["quantinte"].ToString()) + "=>" + dr["designation"].ToString() + "=>" + dr["prix"].ToString() + " $US";
                            lstclsclsautrefraie.Add(varclsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsclsautrefraie;
        }

        public int insertClsautrefraie(clsautrefraie varclsautrefraie)
        {
            int i = 0,i1 = 0,i2 = 0,id_autrefraie = 0;
            IDbTransaction transaction = null;
            try
            {
                DateTime? date = DateTime.Today;
                if (!varclsautrefraie.Datepaiement.HasValue) { }
                else date = varclsautrefraie.Datepaiement;

                DateTime? date1 = DateTime.Today;
                if (!varclsautrefraie.Dateenregistrement.HasValue) { }
                else date1 = varclsautrefraie.Dateenregistrement;

                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO autrefraie ( id_etablissementexterne,id_malade,numerofacture,datepaiement,dateenregistrement,montant,etatpaiement ) VALUES (@id_etablissementexterne,@id_malade,@numerofacture,@datepaiement,@dateenregistrement,@montant,@etatpaiement )");
                    if (varclsautrefraie.Id_etablissementexterne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_etablissementexterne", DbType.Int32, 4, varclsautrefraie.Id_etablissementexterne));
                    if (varclsautrefraie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsautrefraie.Id_malade));
                    if (varclsautrefraie.Numerofacture != null) cmd.Parameters.Add(getParameter(cmd, "@numerofacture", DbType.String, 20, varclsautrefraie.Numerofacture));
                    else cmd.Parameters.Add(getParameter(cmd, "@numerofacture", DbType.String, 20, DBNull.Value));
                    if (varclsautrefraie.Datepaiement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datepaiement", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@datepaiement", DbType.DateTime, 8, date));
                    if (varclsautrefraie.Dateenregistrement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateenregistrement", DbType.DateTime, 8, date1));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateenregistrement", DbType.DateTime, 8, date1));
                    if (varclsautrefraie.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclsautrefraie.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    if (varclsautrefraie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsautrefraie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                //Recuperation de l'id insere
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT @@IDENTITY AS lastID from autrefraie");
                    cmd1.Transaction = transaction;
                    IDataReader rd = cmd1.ExecuteReader();
                    if (rd.Read()) id_autrefraie = Convert.ToInt32(rd["lastID"].ToString());
                    rd.Close();
                    i1 = cmd1.ExecuteNonQuery();
                }

                //Insertion dans la table detailautrefraie
                for (int t = 0; t < lstDesignationAutreDetails.Count; t++)
                {
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format("INSERT INTO detailsautrefraie ( id_autrefraie,designation,prix,quantinte ) VALUES (@id_autrefraie,@designation,@prix,@quantinte )");
                        cmd2.Parameters.Add(getParameter(cmd2, "@designation", DbType.String, 100, lstDesignationAutreDetails[t]));
                        cmd2.Parameters.Add(getParameter(cmd2, "@prix", DbType.Single, 4, lstPrixAutreDetails[t]));
                        cmd2.Parameters.Add(getParameter(cmd2, "@quantinte", DbType.Int32, 4, lstQuantiteAutreDetails[t]));
                        cmd2.Parameters.Add(getParameter(cmd2, "@id_autrefraie", DbType.Int32, 4, id_autrefraie));
                        cmd2.Transaction = transaction;
                        i2 = cmd2.ExecuteNonQuery();
                    }
                }
                transaction.Commit();
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception(exc.Message);
                }
                conn.Close();
            }
            return i2;
        }

        public int updateClsautrefraie(clsautrefraie varclsautrefraie)
        {
            int i = 0;
            try
            {
                DateTime? date = DateTime.Today;
                if (!varclsautrefraie.Datepaiement.HasValue) { }
                else date = varclsautrefraie.Datepaiement;

                DateTime? date1 = DateTime.Today;
                if (!varclsautrefraie.Dateenregistrement.HasValue) { }
                else date1 = varclsautrefraie.Dateenregistrement;

                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE autrefraie  SET id_etablissementexterne=@id_etablissementexterne,id_malade=@id_malade,numerofacture=@numerofacture,datepaiement=@datepaiement,dateenregistrement=@dateenregistrement,montant=@montant,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsautrefraie.Id_etablissementexterne.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_etablissementexterne", DbType.Int32, 4, varclsautrefraie.Id_etablissementexterne));
                    if (varclsautrefraie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsautrefraie.Id_malade));
                    if (varclsautrefraie.Numerofacture != null) cmd.Parameters.Add(getParameter(cmd, "@numerofacture", DbType.String, 20, varclsautrefraie.Numerofacture));
                    else cmd.Parameters.Add(getParameter(cmd, "@numerofacture", DbType.String, 20, DBNull.Value));
                    if (varclsautrefraie.Datepaiement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@datepaiement", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@datepaiement", DbType.DateTime, 8, date));
                    if (varclsautrefraie.Dateenregistrement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateenregistrement", DbType.DateTime, 8, date1));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateenregistrement", DbType.DateTime, 8, date1));
                    if (varclsautrefraie.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclsautrefraie.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    if (varclsautrefraie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsautrefraie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsautrefraie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsautrefraie(int? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "UPDATE autrefraie SET etatpaiement='Non payé' WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsautrefraie(clsautrefraie varclsautrefraie)
        {
            int i = 0,i1 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM detailsautrefraie  WHERE  1=1  AND id_autrefraie=@id_autrefraie ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_autrefraie", DbType.Int32, 4, varclsautrefraie.Id));
                    cmd2.Transaction = transaction;
                    i1 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM autrefraie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsautrefraie.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception(exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        #endregion CLSAUTREFRAIE
        #region  CLSDETAILSAUTREFRAIE
        public clsdetailsautrefraie getClsdetailsautrefraie(object intid)
        {
            clsdetailsautrefraie varclsdetailsautrefraie = new clsdetailsautrefraie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM detailsautrefraie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsdetailsautrefraie.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Prix = Math.Round(double.Parse(dr["prix"].ToString()), 2);
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantinte = int.Parse(dr["quantinte"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdetailsautrefraie;
        }

        public List<clsdetailsautrefraie> getAllClsdetailsautrefraie(string criteria)
        {
            List<clsdetailsautrefraie> lstclsdetailsautrefraie = new List<clsdetailsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM detailsautrefraie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetailsautrefraie varclsdetailsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsdetailsautrefraie = new clsdetailsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsdetailsautrefraie.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Prix = Math.Round(double.Parse(dr["prix"].ToString()), 2);
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            lstclsdetailsautrefraie.Add(varclsdetailsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdetailsautrefraie;
        }

        public List<clsdetailsautrefraie> getAllClsdetailsautrefraie()
        {
            List<clsdetailsautrefraie> lstclsdetailsautrefraie = new List<clsdetailsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM detailsautrefraie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetailsautrefraie varclsdetailsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsdetailsautrefraie = new clsdetailsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsdetailsautrefraie.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Prix = Math.Round(double.Parse(dr["prix"].ToString()), 2);
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            lstclsdetailsautrefraie.Add(varclsdetailsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdetailsautrefraie;
        }

        public List<clsdetailsautrefraie> getAllClsdetailsautrefraie1(int id_autrefraie)
        {
            List<clsdetailsautrefraie> lstclsdetailsautrefraie = new List<clsdetailsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM detailsautrefraie where id_autrefraie=" + id_autrefraie);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetailsautrefraie varclsdetailsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsdetailsautrefraie = new clsdetailsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsdetailsautrefraie.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Prix = Math.Round(double.Parse(dr["prix"].ToString()), 2);
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            lstclsdetailsautrefraie.Add(varclsdetailsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdetailsautrefraie;
        }

        public List<string> getAllClsdetailsautrefraie2(int id_autrefraie,int id_entreprise)
        {
            List<string> lstclsdetailsautrefraie = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT detailsautrefraie.*  FROM detailsautrefraie 
                    INNER JOIN autrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie
                    INNER JOIN etablissementexterne ON etablissementexterne.id=autrefraie.id_etablissementexterne WHERE etablissementexterne.id=" + id_entreprise + " and autrefraie.id=" + id_autrefraie);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclsdetailsautrefraie.Add(dr["quantinte"].ToString() + "=>" + dr["designation"].ToString() + "=>" + dr["prix"].ToString() + "|" + dr["quantinte"].ToString() + "|" + dr["designation"].ToString() + "|" + dr["prix"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdetailsautrefraie;
        }

        public List<clsdetailsautrefraie> getAllClsdetailsautrefraieEntrepriseex(int id_entrepriseext)
        {
            List<clsdetailsautrefraie> lstclsdetailsautrefraie = new List<clsdetailsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT DISTINCT detailsautrefraie.designation  FROM detailsautrefraie 
                    INNER JOIN autrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie
                    INNER JOIN etablissementexterne ON etablissementexterne.id=autrefraie.id_etablissementexterne WHERE etablissementexterne.id=" + id_entrepriseext);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetailsautrefraie varclsdetailsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsdetailsautrefraie = new clsdetailsautrefraie();
                            //if (!dr["id"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id = int.Parse(dr["id"].ToString());
                            //if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsdetailsautrefraie.Designation = dr["designation"].ToString();
                            //if (!dr["prix"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Prix = Math.Round(double.Parse(dr["prix"].ToString()), 2);
                            //if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            //if (!dr["quantinte"].ToString().Trim().Equals("")) varclsdetailsautrefraie.Quantinte = int.Parse(dr["quantinte"].ToString());
                            lstclsdetailsautrefraie.Add(varclsdetailsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdetailsautrefraie;
        }

        public List<clsdetailsautrefraie> getAllClstarifautrespaiement(int id_malade)
        {
            List<clsdetailsautrefraie> lstclsclsautrefraie = new List<clsdetailsautrefraie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT detailsautrefraie.id,detailsautrefraie.id_autrefraie,detailsautrefraie.designation,detailsautrefraie.prix,detailsautrefraie.quantinte,autrefraie.montant FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie
                    INNER JOIN malade ON malade.id=autrefraie.id_malade 
                    WHERE malade.id=" + id_malade + " AND (autrefraie.etatpaiement='Non payé') ORDER BY detailsautrefraie.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdetailsautrefraie varclsclsautrefraie = null;
                        while (dr.Read())
                        {
                            varclsclsautrefraie = new clsdetailsautrefraie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsclsautrefraie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclsclsautrefraie.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            varclsclsautrefraie.Designation = dr["designation"].ToString();
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsclsautrefraie.Prix = double.Parse(dr["prix"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclsclsautrefraie.Quantite_de_detailsautrefraie = double.Parse(dr["quantinte"].ToString());
                            varclsclsautrefraie.DesignationComplete = double.Parse(dr["quantinte"].ToString()) + "=>" + varclsclsautrefraie.Designation + "=>" + varclsclsautrefraie.Prix + " $US";
                            lstclsclsautrefraie.Add(varclsclsautrefraie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsclsautrefraie;
        }

        public int insertClsdetailsautrefraie(clsdetailsautrefraie varclsdetailsautrefraie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO detailsautrefraie ( id_autrefraie,designation,prix,quantinte ) VALUES (@id_autrefraie,@designation,@prix,@quantinte )");
                    if (varclsdetailsautrefraie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsdetailsautrefraie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsdetailsautrefraie.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsdetailsautrefraie.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    if (varclsdetailsautrefraie.Quantinte.HasValue) cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclsdetailsautrefraie.Quantinte));
                    else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 4, varclsdetailsautrefraie.Id_autrefraie));

                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdetailsautrefraie(clsdetailsautrefraie varclsdetailsautrefraie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE detailsautrefraie  SET id_autrefraie=@id_autrefraie,designation=@designation,prix=@prix,quantinte=@quantinte  WHERE 1=1  AND id=@id ");
                    if (varclsdetailsautrefraie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsdetailsautrefraie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclsdetailsautrefraie.Prix.HasValue) cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, varclsdetailsautrefraie.Prix));
                    else cmd.Parameters.Add(getParameter(cmd, "@prix", DbType.Single, 4, DBNull.Value));
                    if (varclsdetailsautrefraie.Quantinte.HasValue) cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, varclsdetailsautrefraie.Quantinte));
                    else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 4, varclsdetailsautrefraie.Id_autrefraie));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdetailsautrefraie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdetailsautrefraie(clsdetailsautrefraie varclsdetailsautrefraie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM detailsautrefraie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdetailsautrefraie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSDETAILSAUTREFRAIE
        #region  CLSMOUVEMENTMALADIE
        public clsmouvementmaladie getClsmouvementmaladie(object intid)
        {
            clsmouvementmaladie varclsmouvementmaladie = new clsmouvementmaladie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementmaladie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_mouvementconsultation"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_mouvementconsultation = int.Parse(dr["id_mouvementconsultation"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladie.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementmaladie;
        }

        public List<clsmouvementmaladie> getAllClsmouvementmaladie(string criteria)
        {
            List<clsmouvementmaladie> lstclsmouvementmaladie = new List<clsmouvementmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementmaladie  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementmaladie varclsmouvementmaladie = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladie = new clsmouvementmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_mouvementconsultation"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_mouvementconsultation = int.Parse(dr["id_mouvementconsultation"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladie.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladie.Add(varclsmouvementmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladie;
        }

        public List<clsmouvementmaladie> getAllClsmouvementmaladie()
        {
            List<clsmouvementmaladie> lstclsmouvementmaladie = new List<clsmouvementmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementmaladie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementmaladie varclsmouvementmaladie = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladie = new clsmouvementmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_mouvementconsultation"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_mouvementconsultation = int.Parse(dr["id_mouvementconsultation"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladie.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladie.Add(varclsmouvementmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladie;
        }

        public List<clsmouvementmaladie> getAllClsmouvementmaladie2(int criteria)
        {
            List<clsmouvementmaladie> lstclsmouvementmaladie = new List<clsmouvementmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @" SELECT mouvementmaladie.date, mouvementmaladie.id_mouvementconsultation, mouvementmaladie.id_maladie, mouvementmaladie.id
                    FROM mouvementmaladie 
                                    INNER JOIN mouvementconsultation ON mouvementmaladie.id_mouvementconsultation = mouvementconsultation.id where mouvementconsultation.id=" + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementmaladie varclsmouvementmaladie = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladie = new clsmouvementmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_mouvementconsultation"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_mouvementconsultation = int.Parse(dr["id_mouvementconsultation"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladie.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladie.Add(varclsmouvementmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladie;
        }

        public int insertClsmouvementmaladie(clsmouvementmaladie varclsmouvementmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mouvementmaladie ( id_mouvementconsultation,id_maladie,date ) VALUES (@id_mouvementconsultation,@id_maladie,@date  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_mouvementconsultation", DbType.Int32, 4, varclsmouvementmaladie.Id_mouvementconsultation));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 4, varclsmouvementmaladie.Id_maladie));
                    if (varclsmouvementmaladie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementmaladie.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmouvementmaladie(clsmouvementmaladie varclsmouvementmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mouvementmaladie  SET id_mouvementconsultation=@id_mouvementconsultation,id_maladie=@id_maladie,date=@date  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_mouvementconsultation", DbType.Int32, 4, varclsmouvementmaladie.Id_mouvementconsultation));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 4, varclsmouvementmaladie.Id_maladie));
                    if (varclsmouvementmaladie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementmaladie.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmouvementmaladie(clsmouvementmaladie varclsmouvementmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementmaladie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmouvementmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion  
        #region  CLSMALADEENCONSULTATIONPOSTNATAL

        public int generatenumeronaissance()
        {
            int numero = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT count(id) AS nbrligne FROM maladeenconsultationpostnatal");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (int.Parse(dr["nbrligne"].ToString()) == 0) numero = 1;
                            else numero = int.Parse(dr["nbrligne"].ToString()) + 1;
                        }
                        else numero = 1; ;
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return numero;
        }

        public clsmaladeenconsultationpostnatal getClsmaladeenconsultationpostnatal(object intid)
        {
            clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal = new clsmaladeenconsultationpostnatal();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladeenconsultationpostnatal WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.IdEnfant = int.Parse(dr["id"].ToString());
                            if (!dr["numeronaissance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Numeronaissance = int.Parse(dr["numeronaissance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Id_malade = int.Parse(dr["id_personne"].ToString());
                            if (!dr["poidsnaisance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Poidsnaisance = double.Parse(dr["poidsnaisance"].ToString());
                            if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                            else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                            varclsmaladeenconsultationpostnatal.Lieunaissance = dr["lieunaissance"].ToString();
                            varclsmaladeenconsultationpostnatal.Nommere = dr["nommere"].ToString();
                            varclsmaladeenconsultationpostnatal.Nompere = dr["nompere"].ToString();
                            varclsmaladeenconsultationpostnatal.Adresse = dr["adresse"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladeenconsultationpostnatal;
        }

        public List<clsmaladeenconsultationpostnatal> getAllClsmaladeenconsultationpostnatal(string criteria)
        {
            List<clsmaladeenconsultationpostnatal> lstclsmaladeenconsultationpostnatal = new List<clsmaladeenconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladeenconsultationpostnatal  WHERE 1=1";
                    sql += "  OR   lieunaissance LIKE '%" + criteria + "%'";
                    sql += "  OR   nommere LIKE '%" + criteria + "%'";
                    sql += "  OR   nompere LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal = null;
                        while (dr.Read())
                        {
                            varclsmaladeenconsultationpostnatal = new clsmaladeenconsultationpostnatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.IdEnfant = int.Parse(dr["id"].ToString());
                            if (!dr["numeronaissance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Numeronaissance = int.Parse(dr["numeronaissance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Id_malade = int.Parse(dr["id_personne"].ToString());
                            if (!dr["poidsnaisance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Poidsnaisance = double.Parse(dr["poidsnaisance"].ToString());
                            if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                            else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                            varclsmaladeenconsultationpostnatal.Lieunaissance = dr["lieunaissance"].ToString();
                            varclsmaladeenconsultationpostnatal.Nommere = dr["nommere"].ToString();
                            varclsmaladeenconsultationpostnatal.Nompere = dr["nompere"].ToString();
                            lstclsmaladeenconsultationpostnatal.Add(varclsmaladeenconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladeenconsultationpostnatal;
        }

        public List<clsmaladeenconsultationpostnatal> getAllClsmaladeenconsultationpostnatal()
        {
            List<clsmaladeenconsultationpostnatal> lstclsmaladeenconsultationpostnatal = new List<clsmaladeenconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladeenconsultationpostnatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal = null;
                        while (dr.Read())
                        {
                            varclsmaladeenconsultationpostnatal = new clsmaladeenconsultationpostnatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.IdEnfant = int.Parse(dr["id"].ToString());
                            if (!dr["numeronaissance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Numeronaissance = int.Parse(dr["numeronaissance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Id_malade = int.Parse(dr["id_personne"].ToString());
                            if (!dr["poidsnaisance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Poidsnaisance = double.Parse(dr["poidsnaisance"].ToString());
                            if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                            else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                            varclsmaladeenconsultationpostnatal.Lieunaissance = dr["lieunaissance"].ToString();
                            varclsmaladeenconsultationpostnatal.Nommere = dr["nommere"].ToString();
                            varclsmaladeenconsultationpostnatal.Nompere = dr["nompere"].ToString();
                            varclsmaladeenconsultationpostnatal.Adresse = dr["adresse"].ToString();
                            lstclsmaladeenconsultationpostnatal.Add(varclsmaladeenconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladeenconsultationpostnatal;
        }

        public DataTable getAllClsmaladeenconsultationpostnatal1()
        {
            DataTable lstclsmaladeenconsultationpostnatal = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladeenconsultationpostnatal.id AS idMalPostNatal,maladeenconsultationpostnatal.date,maladeenconsultationpostnatal.id_malade,maladeenconsultationpostnatal.lieunaissance,maladeenconsultationpostnatal.nommere,maladeenconsultationpostnatal.nompere,maladeenconsultationpostnatal.numeronaissance,maladeenconsultationpostnatal.poidsnaisance,malade.numero FROM maladeenconsultationpostnatal
                    INNER JOIN malade ON malade.id=maladeenconsultationpostnatal.id_malade
                    INNER JOIN personne ON personne.id=malade.id_personne");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsmaladeenconsultationpostnatal.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladeenconsultationpostnatal;
        }

        public List<clsmaladeenconsultationpostnatal> getAllClsmaladeenconsultationpostnatal2(int criteria)
        {
            List<clsmaladeenconsultationpostnatal> lstclsmaladeenconsultationpostnatal = new List<clsmaladeenconsultationpostnatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,maladeenconsultationpostnatal.id AS idMalPostNatal,maladeenconsultationpostnatal.date,maladeenconsultationpostnatal.id_malade,maladeenconsultationpostnatal.lieunaissance,maladeenconsultationpostnatal.nommere,maladeenconsultationpostnatal.nompere,maladeenconsultationpostnatal.numeronaissance,maladeenconsultationpostnatal.poidsnaisance FROM maladeenconsultationpostnatal
                    INNER JOIN malade ON malade.id=maladeenconsultationpostnatal.id_malade
                    INNER JOIN personne ON personne.id=malade.id_personne  WHERE maladeenconsultationpostnatal.id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal = null;
                        if (dr.Read())
                        {
                            varclsmaladeenconsultationpostnatal = new clsmaladeenconsultationpostnatal();
                            //MaladeConsultationPostNatal
                            if (!dr["idMalPostNatal"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.IdEnfant = int.Parse(dr["idMalPostNatal"].ToString());
                            if (!dr["numeronaissance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Numeronaissance = int.Parse(dr["numeronaissance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Id_personne = int.Parse(dr["id_malade"].ToString());
                            if (!dr["poidsnaisance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Poidsnaisance = double.Parse(dr["poidsnaisance"].ToString());
                            if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                            else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                            varclsmaladeenconsultationpostnatal.Lieunaissance = dr["lieunaissance"].ToString();
                            varclsmaladeenconsultationpostnatal.Nommere = dr["nommere"].ToString();
                            varclsmaladeenconsultationpostnatal.Nompere = dr["nompere"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.IdPers = int.Parse(dr["id"].ToString());
                            varclsmaladeenconsultationpostnatal.Nom = dr["nom"].ToString();
                            //varclsmaladeenconsultationpostnatal.Postnom = dr["postnom"].ToString();
                            //varclsmaladeenconsultationpostnatal.Prenom = dr["prenom"].ToString();
                            varclsmaladeenconsultationpostnatal.Sexe = dr["sexe"].ToString();
                            varclsmaladeenconsultationpostnatal.Etatcivil = dr["etatcivil"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsmaladeenconsultationpostnatal.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsmaladeenconsultationpostnatal.Photo = (Byte[])dr["photo"];
                            lstclsmaladeenconsultationpostnatal.Add(varclsmaladeenconsultationpostnatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladeenconsultationpostnatal;
        }

        public int insertClsmaladeenconsultationpostnatal(clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO maladeenconsultationpostnatal ( numeronaissance,id_malade,poidsnaisance,lieunaissance,nommere,nompere,date ) VALUES (@numeronaissance,@id_malade,@poidsnaisance,@lieunaissance,@nommere,@nompere,@date  )");
                    cmd.Parameters.Add(getParameter(cmd, "@numeronaissance", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.Numeronaissance));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.Id_malade));
                    if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsmaladeenconsultationpostnatal.Poidsnaisance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poidsnaisance", DbType.Single, 4, varclsmaladeenconsultationpostnatal.Poidsnaisance));
                    else cmd.Parameters.Add(getParameter(cmd, "@poidsnaisance", DbType.Single, 4, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Lieunaissance != null) cmd.Parameters.Add(getParameter(cmd, "@lieunaissance", DbType.String, 50, varclsmaladeenconsultationpostnatal.Lieunaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@lieunaissance", DbType.String, 50, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Nommere != null) cmd.Parameters.Add(getParameter(cmd, "@nommere", DbType.String, 50, varclsmaladeenconsultationpostnatal.Nommere));
                    else cmd.Parameters.Add(getParameter(cmd, "@nommere", DbType.String, 50, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Nompere != null) cmd.Parameters.Add(getParameter(cmd, "@nompere", DbType.String, 50, varclsmaladeenconsultationpostnatal.Nompere));
                    else cmd.Parameters.Add(getParameter(cmd, "@nompere", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmaladeenconsultationpostnatal(clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE maladeenconsultationpostnatal  SET numeronaissance=@numeronaissance,id_malade=@id_malade,poidsnaisance=@poidsnaisance,lieunaissance=@lieunaissance,nommere=@nommere,nompere=@nompere,date=@date  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@numeronaissance", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.Numeronaissance));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.Id_malade));
                    if (varclsmaladeenconsultationpostnatal.Poidsnaisance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@poidsnaisance", DbType.Single, 4, varclsmaladeenconsultationpostnatal.Poidsnaisance));
                    else cmd.Parameters.Add(getParameter(cmd, "@poidsnaisance", DbType.Single, 4, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmaladeenconsultationpostnatal.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsmaladeenconsultationpostnatal.Lieunaissance != null) cmd.Parameters.Add(getParameter(cmd, "@lieunaissance", DbType.String, 50, varclsmaladeenconsultationpostnatal.Lieunaissance));
                    else cmd.Parameters.Add(getParameter(cmd, "@lieunaissance", DbType.String, 50, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Nommere != null) cmd.Parameters.Add(getParameter(cmd, "@nommere", DbType.String, 50, varclsmaladeenconsultationpostnatal.Nommere));
                    else cmd.Parameters.Add(getParameter(cmd, "@nommere", DbType.String, 50, DBNull.Value));
                    if (varclsmaladeenconsultationpostnatal.Nompere != null) cmd.Parameters.Add(getParameter(cmd, "@nompere", DbType.String, 50, varclsmaladeenconsultationpostnatal.Nompere));
                    else cmd.Parameters.Add(getParameter(cmd, "@nompere", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.IdEnfant));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmaladeenconsultationpostnatal(clsmaladeenconsultationpostnatal varclsmaladeenconsultationpostnatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM maladeenconsultationpostnatal  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmaladeenconsultationpostnatal.IdEnfant));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMALADEENCONSULTATIONPOSTNATAL 
        #region  CLSPAIEMENT
        public double getMontantMituellepaiement(object intid)
        {
            double varclspaiement = 0, montant = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT SUM(paiement.montantpaye) AS montantp FROM paiement 
                    INNER JOIN malade ON malade.id=paiement.id_malade 
                    INNER join categoriemalade ON categoriemalade.id=malade.id_categoriemalade 
                    WHERE malade.id={0} AND categoriemalade.designation='Abonné' AND mituelle=1", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["montantp"].ToString().Trim().Equals("")) montant = Math.Round(double.Parse(dr["montantp"].ToString()), 2);
                        }
                        dr.Dispose();
                    }
                }
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format(@"SELECT SUM(paiement.montantmituelle) AS montant_mituel FROM paiement 
                    INNER JOIN malade ON malade.id=paiement.id_malade 
                    INNER join categoriemalade ON categoriemalade.id=malade.id_categoriemalade 
                    WHERE malade.id={0} AND categoriemalade.designation='Abonné'", intid);
                    using (IDataReader dr1 = cmd1.ExecuteReader())
                    {
                        if (dr1.Read())
                        {
                            if (!dr1["montant_mituel"].ToString().Trim().Equals(""))
                            {
                                varclspaiement = Math.Round(double.Parse(dr1["montant_mituel"].ToString()), 2);
                                varclspaiement = varclspaiement - montant;
                            }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public double getMontantResteDettepaiement(int intidmalade,int intidpaiement)
        {
            double montant = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    //cmd.CommandText = string.Format(@"SELECT (montantdu-dette) AS restedette FROM paiement WHERE archive=0 AND id_malade={0} AND mituelle=1 AND id={1}", intidmalade, intidpaiement);
                    cmd.CommandText = string.Format(@"SELECT (montantdu-dette) AS restedette FROM paiement WHERE archive=0 AND id_malade={0} AND mituelle=1 AND id={1}", intidmalade, intidpaiement);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["restedette"].ToString().Trim().Equals("")) montant = Math.Round(double.Parse(dr["restedette"].ToString()), 2);
                        }
                        dr.Dispose();
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return montant;
        }

        public int getIdfromtable(string table)
        {
            int idgen = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT COUNT(id) AS allRecord FROM " + table); 

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read()) if (Convert.ToInt32(dr["allRecord"].ToString()) == 0) idgen = 1;
                        else idgen = Convert.ToInt32(dr["allRecord"].ToString());
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return idgen;
        }

        public void cloture_journee(DateTime date)
        {
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //Liste qui sera chargée de récupérer les Id des différents dossier afin d'éffectuer un Update
                List<int> lstId = new List<int>();

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    //Article
                    cmd1.CommandText = "SELECT * FROM sortie WHERE etatpaiement='Payé' AND CONVERT(date,sortie.date,100)=@date";
                    cmd1.Parameters.Add(getParameter(cmd1, "@date", DbType.DateTime, 8, date));
                    cmd1.Transaction = transaction;
                    IDataReader rd = cmd1.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd11 = conn.CreateCommand())
                        {
                            cmd11.CommandText = "UPDATE sortie SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,sortie.date,100)=@date";
                            cmd11.Parameters.Add(getParameter(cmd11, "@id", DbType.Int32, 4, id));
                            cmd11.Parameters.Add(getParameter(cmd11, "@date", DbType.DateTime, 8, date));
                            cmd11.Transaction = transaction;
                            cmd11.ExecuteNonQuery();
                            cmd11.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    //Operation laboratoire
                    cmd2.CommandText = "SELECT * FROM operation_laboratoire WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,operation_laboratoire.date,100)=@date";
                    cmd2.Parameters.Add(getParameter(cmd2, "@date", DbType.DateTime, 8, date));
                    cmd2.Transaction = transaction;
                    IDataReader rd = cmd2.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd22 = conn.CreateCommand())
                        {
                            cmd22.CommandText = "UPDATE operation_laboratoire SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,operation_laboratoire.date,100)=@date";
                            cmd22.Parameters.Add(getParameter(cmd22, "@id", DbType.Int32, 4, id));
                            cmd22.Parameters.Add(getParameter(cmd22, "@date", DbType.DateTime, 8, date));
                            cmd22.Transaction = transaction;
                            cmd22.ExecuteNonQuery();
                            cmd22.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    //CPOS
                    cmd3.CommandText = "SELECT * FROM dossierconsultationpostnatal WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossierconsultationpostnatal.date,100)=@date";
                    cmd3.Parameters.Add(getParameter(cmd3, "@date", DbType.DateTime, 8, date));
                    cmd3.Transaction = transaction;
                    IDataReader rd = cmd3.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd33 = conn.CreateCommand())
                        {
                            cmd33.CommandText = "UPDATE dossierconsultationpostnatal SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossierconsultationpostnatal.date,100)=@date";
                            cmd33.Parameters.Add(getParameter(cmd33, "@id", DbType.Int32, 4, id));
                            cmd33.Parameters.Add(getParameter(cmd33, "@date", DbType.DateTime, 8, date));
                            cmd33.Transaction = transaction;
                            cmd33.ExecuteNonQuery();
                            cmd33.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd4 = conn.CreateCommand())
                {
                    //Echographie
                    cmd4.CommandText = "SELECT * FROM dossierechographie WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossierechographie.date,100)=@date";
                    cmd4.Parameters.Add(getParameter(cmd4, "@date", DbType.DateTime, 8, date));
                    cmd4.Transaction = transaction;
                    IDataReader rd = cmd4.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement                   
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd44 = conn.CreateCommand())
                        {
                            cmd44.CommandText = "UPDATE dossierechographie SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossierechographie.date,100)=@date";
                            cmd44.Parameters.Add(getParameter(cmd44, "@id", DbType.Int32, 4, id));
                            cmd44.Parameters.Add(getParameter(cmd44, "@date", DbType.DateTime, 8, date));
                            cmd44.Transaction = transaction;
                            cmd44.ExecuteNonQuery();
                            cmd44.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd5 = conn.CreateCommand())
                {
                    //Soin
                    cmd5.CommandText = "SELECT * FROM dossiersoin WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossiersoin.date,100)=@date";
                    cmd5.Parameters.Add(getParameter(cmd5, "@date", DbType.DateTime, 8, date));
                    cmd5.Transaction = transaction;
                    IDataReader rd = cmd5.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd55 = conn.CreateCommand())
                        {
                            cmd55.CommandText = "UPDATE dossiersoin SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossiersoin.date,100)=@date";
                            cmd55.Parameters.Add(getParameter(cmd55, "@id", DbType.Int32, 4, id));
                            cmd55.Parameters.Add(getParameter(cmd55, "@date", DbType.DateTime, 8, date));
                            cmd55.Transaction = transaction;
                            cmd55.ExecuteNonQuery();
                            cmd55.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd6 = conn.CreateCommand())
                {
                    //Nursing
                    cmd6.CommandText = "SELECT * FROM dossiernursing WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossiernursing.date,100)=@date";
                    cmd6.Parameters.Add(getParameter(cmd6, "@date", DbType.DateTime, 8, date));
                    cmd6.Transaction = transaction;
                    IDataReader rd = cmd6.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd66 = conn.CreateCommand())
                        {
                            cmd66.CommandText = "UPDATE dossiernursing SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossiernursing.date,100)=@date";
                            cmd66.Parameters.Add(getParameter(cmd66, "@id", DbType.Int32, 4, id));
                            cmd66.Parameters.Add(getParameter(cmd66, "@date", DbType.DateTime, 8, date));
                            cmd66.Transaction = transaction;
                            cmd66.ExecuteNonQuery();
                            cmd66.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd7 = conn.CreateCommand())
                {
                    //CPN
                    cmd7.CommandText = "SELECT * FROM dossierconsultationprenatale WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossierconsultationprenatale.date,100)=@date";
                    cmd7.Parameters.Add(getParameter(cmd7, "@date", DbType.DateTime, 8, date));
                    cmd7.Transaction = transaction;
                    IDataReader rd = cmd7.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd77 = conn.CreateCommand())
                        {
                            cmd77.CommandText = "UPDATE dossierconsultationprenatale SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossierconsultationprenatale.date,100)=@date";
                            cmd77.Parameters.Add(getParameter(cmd77, "@id", DbType.Int32, 4, id));
                            cmd77.Parameters.Add(getParameter(cmd77, "@date", DbType.DateTime, 8, date));
                            cmd77.Transaction = transaction;
                            cmd77.ExecuteNonQuery();
                            cmd77.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd8 = conn.CreateCommand())
                {
                    //Consultation
                    cmd8.CommandText = "SELECT * FROM consultation WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,consultation.date,100)=@date";
                    cmd8.Parameters.Add(getParameter(cmd8, "@date", DbType.DateTime, 8, date));
                    cmd8.Transaction = transaction;
                    IDataReader rd = cmd8.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd88 = conn.CreateCommand())
                        {
                            cmd88.CommandText = "UPDATE consultation SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,consultation.date,100)=@date";
                            cmd88.Parameters.Add(getParameter(cmd88, "@id", DbType.Int32, 4, id));
                            cmd88.Parameters.Add(getParameter(cmd88, "@date", DbType.DateTime, 8, date));
                            cmd88.Transaction = transaction;
                            cmd88.ExecuteNonQuery();
                            cmd88.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd9 = conn.CreateCommand())
                {
                    //Consultation Gynécologique
                    cmd9.CommandText = "SELECT * FROM dossierconsultationgynecologique WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossierconsultationgynecologique.date,100)=@date";
                    cmd9.Parameters.Add(getParameter(cmd9, "@date", DbType.DateTime, 8, date));
                    cmd9.Transaction = transaction;
                    IDataReader rd = cmd9.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd99 = conn.CreateCommand())
                        {
                            cmd99.CommandText = "UPDATE dossierconsultationgynecologique SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossierconsultationgynecologique.date,100)=@date";
                            cmd99.Parameters.Add(getParameter(cmd99, "@id", DbType.Int32, 4, id));
                            cmd99.Parameters.Add(getParameter(cmd99, "@date", DbType.DateTime, 8, date));
                            cmd99.Transaction = transaction;
                            cmd99.ExecuteNonQuery();
                            cmd99.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd10 = conn.CreateCommand())
                {
                    //Subit
                    cmd10.CommandText = "SELECT * FROM subit WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,subit.date,100)=@date";
                    cmd10.Parameters.Add(getParameter(cmd10, "@date", DbType.DateTime, 8, date));
                    cmd10.Transaction = transaction;
                    IDataReader rd = cmd10.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement                    
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd1010 = conn.CreateCommand())
                        {
                            cmd1010.CommandText = "UPDATE subit SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,subit.date,100)=@date";
                            cmd1010.Parameters.Add(getParameter(cmd1010, "@id", DbType.Int32, 4, id));
                            cmd1010.Parameters.Add(getParameter(cmd1010, "@date", DbType.DateTime, 8, date));
                            cmd1010.Transaction = transaction;
                            cmd1010.ExecuteNonQuery();
                            cmd1010.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd11 = conn.CreateCommand())
                {
                    //Hospitalisation
                    cmd11.CommandText = "SELECT * FROM hospitalisation WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,hospitalisation.datefin,100)=@date";
                    cmd11.Parameters.Add(getParameter(cmd11, "@date", DbType.DateTime, 8, date));
                    cmd11.Transaction = transaction;
                    IDataReader rd = cmd11.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd1111 = conn.CreateCommand())
                        {
                            cmd1111.CommandText = "UPDATE hospitalisation SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,hospitalisation.datefin,100)=@date";
                            cmd1111.Parameters.Add(getParameter(cmd1111, "@id", DbType.Int32, 4, id));
                            cmd1111.Parameters.Add(getParameter(cmd1111, "@date", DbType.DateTime, 8, date));
                            cmd1111.Transaction = transaction;
                            cmd1111.ExecuteNonQuery();
                            cmd1111.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd12 = conn.CreateCommand())
                {
                    //Accouchement
                    cmd12.CommandText = "SELECT * FROM dossieraccouchement WHERE (etatpaiement='Non cloturé payé' OR etatpaiement='Cloturé payé') AND CONVERT(date,dossieraccouchement.date,100)=@date";
                    cmd12.Parameters.Add(getParameter(cmd12, "@date", DbType.DateTime, 8, date));
                    cmd12.Transaction = transaction;
                    IDataReader rd = cmd12.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd1212 = conn.CreateCommand())
                        {
                            cmd1212.CommandText = "UPDATE dossieraccouchement SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossieraccouchement.date,100)=@date";
                            cmd1212.Parameters.Add(getParameter(cmd1212, "@id", DbType.Int32, 4, id));
                            cmd1212.Parameters.Add(getParameter(cmd1212, "@date", DbType.DateTime, 8, date));
                            cmd1212.Transaction = transaction;
                            cmd1212.ExecuteNonQuery();
                            cmd1212.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                using (IDbCommand cmd13 = conn.CreateCommand())
                {
                    //Autres frais
                    cmd13.CommandText = "SELECT * FROM autrefraie WHERE etatpaiement='Payé' AND CONVERT(date,autrefraie.datepaiement,100)=@date";
                    cmd13.Parameters.Add(getParameter(cmd13, "@date", DbType.DateTime, 8, date));
                    cmd13.Transaction = transaction;
                    IDataReader rd = cmd13.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd1313 = conn.CreateCommand())
                        {
                            cmd1313.CommandText = "UPDATE autrefraie SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,autrefraie.datepaiement,100)=@date";
                            cmd1313.Parameters.Add(getParameter(cmd1313, "@id", DbType.Int32, 4, id));
                            cmd1313.Parameters.Add(getParameter(cmd1313, "@date", DbType.DateTime, 8, date));
                            cmd1313.Transaction = transaction;
                            cmd1313.ExecuteNonQuery();
                            cmd1313.Dispose();
                        }
                    }
                    lstId.Clear();
                }
                 using (IDbCommand cmd14 = conn.CreateCommand())
                {
                    //Autres frais
                    cmd14.CommandText = "SELECT * FROM dossierpreconsultation WHERE etatpaiement='Fiche payé' AND CONVERT(date,dossierpreconsultation.date,100)=@date";
                    cmd14.Parameters.Add(getParameter(cmd14, "@date", DbType.DateTime, 8, date));
                    cmd14.Transaction = transaction;
                    IDataReader rd = cmd14.ExecuteReader();

                    while (rd.Read()) lstId.Add(Convert.ToInt32(rd["id"].ToString()));
                    rd.Close();

                    //Pour chaque enregistrement trouvé on fait la MAJ de etatpaiement
                    foreach (int id in lstId)
                    {
                        using (IDbCommand cmd1414 = conn.CreateCommand())
                        {
                            cmd1414.CommandText = "UPDATE dossierpreconsultation SET etatpaiement='Cloturé' WHERE id=@id AND CONVERT(date,dossierpreconsultation.date,100)=@date";
                            cmd1414.Parameters.Add(getParameter(cmd1414, "@id", DbType.Int32, 4, id));
                            cmd1414.Parameters.Add(getParameter(cmd1414, "@date", DbType.DateTime, 8, date));
                            cmd1414.Transaction = transaction;
                            cmd1414.ExecuteNonQuery();
                            cmd1414.Dispose();
                        }
                    }
                    transaction.Commit();
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                }
                conn.Close();
                throw new Exception(exc.Message);
            }
        }

        public clspaiement getClspaiement(object intid)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE id={0} AND archive=0 AND mituelle=0", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement2(object intid_malade)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE paiement.id_malade={0} AND archive=0 AND mituelle=0", intid_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement3(object intid_malade)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT  paiement.* FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND paiement.archive=0 AND mituelle=0", intid_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement4(object intid_malade)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT  paiement.* FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND paiement.archive=1 AND mituelle=0", intid_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement5(object intid_malade)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT  paiement.* FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND paiement.archive=0 AND mituelle=1", intid_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement6(object intid_malade)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT  paiement.* FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND paiement.archive=1 AND mituelle=1", intid_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public clspaiement getClspaiement1(object intid)
        {
            clspaiement varclspaiement = new clspaiement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE id={0} AND  archive=1 AND mituelle=0", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclspaiement;
        }

        public DataTable getAllClspaiementCloture(DateTime date)
        {
            DataTable lstclspaiement = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT     'Préconsultation' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne, 
                                          malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid, 
                                          ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature, dossierpreconsultation.date, DATEDIFF(YEAR, personne.datenaissance, 
                                          GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche, 
                                          personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,tarifpreconsultation.designation AS desi,tarifpreconsultation.montant AS prix
                    FROM         preconsultation INNER JOIN
                                          dossierpreconsultation ON dossierpreconsultation.id = preconsultation.id_dossierpreconsultation INNER JOIN
                                          tarifpreconsultation ON tarifpreconsultation.id=dossierpreconsultation.id_tarifpreconsultation INNER JOIN
                                          malade ON malade.id = dossierpreconsultation.id_malade INNER JOIN
                                          airsante ON airsante.id = malade.id_airsante INNER JOIN
                                          profession ON profession.id = malade.id_profession INNER JOIN
                                          etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement INNER JOIN
                                          personne ON personne.id = malade.id_personne WHERE dossierpreconsultation.etatpaiement='Cloturé' AND CONVERT(date,dossierpreconsultation.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Consultation' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,consultation.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,tarifconsultation.designation AS desi,tarifconsultation.montant AS prix FROM consultation 
                    INNER JOIN mouvementconsultation ON consultation.id=mouvementconsultation.id_consultation
                    INNER JOIN tarifconsultation ON tarifconsultation.id=consultation.id_tarifconsultation
                    INNER JOIN malade ON malade.id=consultation.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE consultation.etatpaiement='Cloturé' AND CONVERT(date,consultation.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Laboratoire' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,operation_laboratoire.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, examen.designation AS desi,examen.prix FROM mouvementoperation_laboratoire 
                    INNER JOIN operation_laboratoire ON operation_laboratoire.id=mouvementoperation_laboratoire.id_operation_laboratoire
                    INNER JOIN critereresultat ON critereresultat.id=mouvementoperation_laboratoire.id_critere
                    INNER JOIN examen ON examen.id=operation_laboratoire.id_examen
                    INNER JOIN typeexamen ON typeexamen.id=examen.id_typeexamen
                    INNER JOIN malade ON malade.id=operation_laboratoire.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE operation_laboratoire.etatpaiement='Cloturé' AND CONVERT(date,operation_laboratoire.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Hospitalisation' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,hospitalisation.datefin AS date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,chambre.designation + ' N° ' + CONVERT(varchar(30),chambre.numero) AS desi,categoriechambre.prix FROM mvmhospitalisation 
                    INNER JOIN hospitalisation ON hospitalisation.id=mvmhospitalisation.id_hospitalisation
                    INNER JOIN chambre ON chambre.id=hospitalisation.id_chambre
                    INNER JOIN categoriechambre ON categoriechambre.id=chambre.id_categoriechambre
                    INNER JOIN malade ON malade.id=hospitalisation.id_malade
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE hospitalisation.etatpaiement='Cloturé' AND CONVERT(date,hospitalisation.datefin ,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Intervention' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,subit.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, intervention.designation AS desi,intervention.prix FROM subit 
                    INNER JOIN intervention ON intervention.id=subit.id_intervention
                    INNER JOIN bloc ON bloc.id=intervention.id_bloc
                    INNER JOIN service ON service.id=bloc.id_service
                    INNER JOIN malade ON malade.id=subit.id_malade
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE subit.etatpaiement='Cloturé' AND CONVERT(date,subit.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Consultation Gynécologique' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossierconsultationgynecologique.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,tarifconsultationgynecologique.designation AS desi,tarifconsultationgynecologique.montant AS prix FROM consultationgynecologique 
                    INNER JOIN criterechographie ON criterechographie.id=consultationgynecologique.id_critere_echo
                    INNER JOIN tarifconsultationgynecologique ON tarifconsultationgynecologique.id=consultationgynecologique.id_dossierconsultationgyneco
                    INNER JOIN dossierconsultationgynecologique ON tarifconsultationgynecologique.id=dossierconsultationgynecologique.id_tarifconsultationgynecologique
                    INNER JOIN malade ON malade.id=dossierconsultationgynecologique.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossierconsultationgynecologique.etatpaiement='Cloturé' AND CONVERT(date,dossierconsultationgynecologique.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Médicaments' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,sortie.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,article.desination AS desi,sortie.montant AS prix FROM article 
                    INNER JOIN sortie ON article.id=sortie.id_article
                    INNER JOIN malade ON malade.id=sortie.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE sortie.etatpaiement='Cloturé' AND CONVERT(date,sortie.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Autres frais' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,autrefraie.datepaiement AS date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,detailsautrefraie.designation AS desi,autrefraie.montant AS prix FROM autrefraie 
                    INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie
                    INNER JOIN malade ON malade.id=autrefraie.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne  WHERE autrefraie.etatpaiement='Cloturé' AND CONVERT(date,autrefraie.datepaiement,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'CPN' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossierconsultationprenatale.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, tarifconsultationprenatal.designation AS desi,tarifconsultationprenatal.montant AS prix FROM consultationprenatal 
                    INNER JOIN dossierconsultationprenatale ON dossierconsultationprenatale.id=consultationprenatal.id_dossierconsultationprenatale
                    INNER JOIN tarifconsultationprenatal ON tarifconsultationprenatal.id=dossierconsultationprenatale.id_tarifconsultationprenatal
                    INNER JOIN malade ON malade.id=dossierconsultationprenatale.id_malade  
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossierconsultationprenatale.etatpaiement='Cloturé' AND CONVERT(date,dossierconsultationprenatale.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'CPOS' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossierconsultationpostnatal.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, tarifconsultationpostnatal.designation AS desi,tarifconsultationpostnatal.montant AS prix FROM maladeenconsultationpostnatal 
                    INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=maladeenconsultationpostnatal.id_dossierconsultationpostnatal
                    INNER JOIN tarifconsultationpostnatal ON tarifconsultationpostnatal.id=dossierconsultationpostnatal.id_tarifconsultationpostnatal
                    INNER JOIN malade ON malade.id=dossierconsultationpostnatal.id_malade  
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossierconsultationpostnatal.etatpaiement='Cloturé' AND CONVERT(date,dossierconsultationpostnatal.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Echographie' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossierechographie.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, tarifechographie.designation AS desi,tarifechographie.montant AS prix FROM dossierechographie 
                    INNER JOIN tarifechographie ON tarifechographie.id=dossierechographie.id_tarifechographie
                    INNER JOIN malade ON malade.id=dossierechographie.id_malade   
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossierechographie.etatpaiement='Cloturé' AND CONVERT(date,dossierechographie.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Soins' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossiersoin.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, tarifsoin.designation AS desi,tarifsoin.montant AS prix FROM dossiersoin 
                    INNER JOIN tarifsoin ON tarifsoin.id=dossiersoin.id_tarifsoin
                    INNER JOIN malade ON malade.id=dossiersoin.id_malade 
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossiersoin.etatpaiement='Cloturé' AND CONVERT(date,dossiersoin.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Nursing' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossiernursing.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, tarifnursing.designation AS desi,tarifnursing.montant AS prix FROM dossiernursing 
                    INNER JOIN tarifnursing ON tarifnursing.id=dossiernursing.id_tarifnursing
                    INNER JOIN malade ON malade.id=dossiernursing.id_malade  
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossiernursing.etatpaiement='Cloturé' AND CONVERT(date,dossiernursing.date,100)='" + date + "'  " +

                    @"UNION 
                    SELECT 'Accouchement' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossieraccouchement.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers, typeaccouchement.designation AS desi,typeaccouchement.prix FROM typeaccouchement
                    INNER JOIN dossieraccouchement ON typeaccouchement.id=dossieraccouchement.id_typeaccouchement
                    INNER JOIN accouchement ON typeaccouchement.id=accouchement.id_typeaccouchement
                    INNER JOIN malade ON malade.id=dossieraccouchement.id_malade  
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossieraccouchement.etatpaiement='Cloturé' AND CONVERT(date,dossieraccouchement.date,100)='" + date + "'  " +

                    @"UNION
                    SELECT 'Avance' AS item,ISNULL(personne.nom, '') + ' ' + ISNULL(personne.postnom, '') + ' ' + ISNULL(personne.prenom, '') AS nom, personne.sexe, malade.id_personne,malade.id, personne.datenaissance, airsante.designation, profession.designation AS profession, ROUND(preconsultation.poid, 2) AS poid,ROUND(preconsultation.taille, 2) AS taille, preconsultation.temperature,dossieravance.date,DATEDIFF(YEAR, personne.datenaissance,GETDATE()) AS age, preconsultation.pressionArterielle, etablissementpriseencharge.denomination, malade.numero AS numMal,malade.numero_fiche,personne.telephone AS numero, etablissementpriseencharge.adresse,personne.adresse AS adressePers,tarifavance.designation AS desi,tarifavance.montant AS prix FROM dossieravance 
                    INNER JOIN tarifavance ON tarifavance.id=dossieravance.id_tarifavance
                    INNER JOIN malade ON malade.id=dossieravance.id_malade  
                    INNER JOIN dossierpreconsultation ON malade.id=dossierpreconsultation.id_malade
                    INNER JOIN preconsultation ON dossierpreconsultation.id=preconsultation.id_dossierpreconsultation
                    INNER JOIN airsante ON airsante.id = malade.id_airsante 
                    INNER JOIN profession ON profession.id = malade.id_profession 
                    INNER JOIN etablissementpriseencharge ON etablissementpriseencharge.id = malade.id_etablissement
                    INNER JOIN personne ON personne.id = malade.id_personne WHERE dossieravance.etatpaiement='Cloturé' AND CONVERT(date,dossieravance.date,100)='" + date + "' ");
                    
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclspaiement.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement(string criteria)
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM paiement  WHERE 1=1 AND archive=0 AND mituelle=0";
                    sql += "  OR   date LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement()
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=0 AND mituelle=0");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement_mut1()
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=0 AND mituelle=1");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement(int id_malade)
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=0 AND id_malade={0} AND mituelle=0", id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement1()
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=1 AND mituelle=0");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement1(int id_malade)
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=0 AND id_malade={0} AND mituelle=1", id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<clspaiement> getAllClspaiement2(int id_malade)
        {
            List<clspaiement> lstclspaiement = new List<clspaiement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM paiement WHERE archive=1 AND id_malade={0} AND mituelle=1", id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clspaiement varclspaiement = null;
                        while (dr.Read())
                        {
                            varclspaiement = new clspaiement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclspaiement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclspaiement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_sortie"].ToString().Trim().Equals("")) varclspaiement.Id_sortie = int.Parse(dr["id_sortie"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclspaiement.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_consultation"].ToString().Trim().Equals("")) varclspaiement.Id_consultation = int.Parse(dr["id_consultation"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclspaiement.Id_consultationgyn = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_dossierconsultationprenatale"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationprenatale = int.Parse(dr["id_dossierconsultationprenatale"].ToString());
                            if (!dr["id_dossierconsultationpostnatal"].ToString().Trim().Equals("")) varclspaiement.Id_dossierconsultationpostnatal = int.Parse(dr["id_dossierconsultationpostnatal"].ToString());
                            if (!dr["id_dossierechographie"].ToString().Trim().Equals("")) varclspaiement.Id_dossierechographie = int.Parse(dr["id_dossierechographie"].ToString());
                            if (!dr["id_dossiersoin"].ToString().Trim().Equals("")) varclspaiement.Id_dossiersoin = int.Parse(dr["id_dossiersoin"].ToString());
                            if (!dr["id_dossiernursing"].ToString().Trim().Equals("")) varclspaiement.Id_dossiernursing = int.Parse(dr["id_dossiernursing"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclspaiement.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_hospitalisation"].ToString().Trim().Equals("")) varclspaiement.Id_hospitalisation = int.Parse(dr["id_hospitalisation"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclspaiement.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_accouchement"].ToString().Trim().Equals("")) varclspaiement.Id_accouchement = int.Parse(dr["id_accouchement"].ToString());
                            if (!dr["id_subit"].ToString().Trim().Equals("")) varclspaiement.Id_subit = int.Parse(dr["id_subit"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclspaiement.Date = DateTime.Parse(dr["date"].ToString());
                            varclspaiement.Montantdu = Math.Round(double.Parse(dr["montantdu"].ToString()), 2);
                            varclspaiement.Montantpaye = Math.Round(double.Parse(dr["montantpaye"].ToString()), 2);
                            varclspaiement.Montantmituelle = Math.Round(double.Parse(dr["montantmituelle"].ToString()), 2);
                            varclspaiement.Dette = Math.Round(double.Parse(dr["dette"].ToString()), 2);
                            varclspaiement.Archive = bool.Parse(dr["archive"].ToString());
                            varclspaiement.Mituelle = bool.Parse(dr["mituelle"].ToString());
                            lstclspaiement.Add(varclspaiement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<string> getAllClsmois_annee_paiement()
        {
            List<string> lstclspaiement = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT CONVERT(varchar(50), MONTH(date)) AS mois, CONVERT(varchar(50), YEAR(date)) AS annee FROM paiement WHERE archive=0 AND mituelle=0 ORDER BY date DESC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            string mois = null, annee = null;
                            if (dr["mois"].ToString().Trim().Equals("1")) mois = "Janvier";
                            else if (dr["mois"].ToString().Trim().Equals("1")) mois = "Janvier";
                            else if (dr["mois"].ToString().Trim().Equals("2")) mois = "Février";
                            else if (dr["mois"].ToString().Trim().Equals("3")) mois = "Mars";
                            else if (dr["mois"].ToString().Trim().Equals("4")) mois = "Avril";
                            else if (dr["mois"].ToString().Trim().Equals("5")) mois = "Mai";
                            else if (dr["mois"].ToString().Trim().Equals("6")) mois = "Juin";
                            else if (dr["mois"].ToString().Trim().Equals("7")) mois = "Juillet";
                            else if (dr["mois"].ToString().Trim().Equals("8")) mois = "Août";
                            else if (dr["mois"].ToString().Trim().Equals("9")) mois = "Septembre";
                            else if (dr["mois"].ToString().Trim().Equals("10")) mois = "Octobre";
                            else if (dr["mois"].ToString().Trim().Equals("11")) mois = "Novembre";
                            else if (dr["mois"].ToString().Trim().Equals("12")) mois = "Décembre";

                            annee = dr["annee"].ToString();
                            lstclspaiement.Add(mois + " " + annee);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public List<int> getAllClannee_paiement()
        {
            List<int> lstclspaiement = new List<int>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT YEAR(date) AS annee FROM paiement WHERE archive=0 AND mituelle=0 ORDER BY date DESC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclspaiement.Add(Convert.ToInt32(dr["annee"].ToString()));
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public double getTotmontantpaiement(int id_malade)
        {
            double lstclspaiement = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT SUM(paiement.montantpaye) AS totPaye  FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND archive=0 AND mituelle=0", id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (dr["totPaye"] == DBNull.Value) { }
                            else lstclspaiement = Math.Round(Convert.ToDouble(dr["totPaye"].ToString()), 2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public double getTotmontantpaiement1(int id_malade)
        {
            double lstclspaiement = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT SUM(paiement.montantpaye) AS totPaye  FROM paiement INNER JOIN malade ON malade.id=paiement.id_malade WHERE malade.id={0} AND archive=0 AND mituelle=1", id_malade);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (dr["totPaye"] == DBNull.Value) { }
                            else lstclspaiement = Math.Round(Convert.ToDouble(dr["totPaye"].ToString()), 2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclspaiement;
        }

        public int insertClspaiement(clspaiement varclspaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclspaiement.Date.HasValue) { }
                    else date = varclspaiement.Date;

                    cmd.CommandText = string.Format("INSERT INTO paiement (id_malade,id_sortie,id_dossierpreconsultation,id_consultation,id_dossierconsultationgyneco, id_dossierconsultationprenatale,id_dossierconsultationpostnatal,id_dossierechographie,id_dossiersoin,id_dossiernursing,id_operation_laboratoire,id_autrefraie,id_hospitalisation,id_subit,id_accouchement,date,montantdu,montantpaye,dette,archive,montantmituelle,mituelle) VALUES (@id_malade,@id_sortie,@id_dossierpreconsultation,@id_consultation,@id_dossierconsultationgynecologique,@id_dossierconsultationprenatale,@id_dossierconsultationpostnatal,@id_dossierechographie,@id_dossiersoin,@id_dossiernursing,@id_operation_laboratoire,@id_autrefraie,@id_hospitalisation,@id_subit,@id_accouchement,@date,@montantdu,@montantpaye,@dette,@archive,@montantmituelle,@mituelle)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100 , varclspaiement.Id_malade));
                    if (varclspaiement.Id_sortie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_sortie", DbType.Int32, 100, varclspaiement.Id_sortie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_sortie", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossierpreconsultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 100, varclspaiement.Id_dossierpreconsultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_consultationgyn.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgynecologique", DbType.Int32, 100, varclspaiement.Id_consultationgyn));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgynecologique", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_consultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 100, varclspaiement.Id_consultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossierconsultationprenatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 100, varclspaiement.Id_dossierconsultationprenatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossierconsultationpostnatal.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationpostnatal", DbType.Int32, 100, varclspaiement.Id_dossierconsultationpostnatal));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationpostnatal", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossierechographie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierechographie", DbType.Int32, 100, varclspaiement.Id_dossierechographie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierechographie", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossiersoin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossiersoin", DbType.Int32, 100, varclspaiement.Id_dossiersoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossiersoin", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_dossiernursing.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossiernursing", DbType.Int32, 100, varclspaiement.Id_dossiernursing));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossiernursing", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_operation_laboratoire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, varclspaiement.Id_operation_laboratoire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_hospitalisation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 100, varclspaiement.Id_hospitalisation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_autrefraie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, varclspaiement.Id_autrefraie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_subit.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_subit", DbType.Int32, 100, varclspaiement.Id_subit));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_subit", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Id_accouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_accouchement", DbType.Int32, 100, varclspaiement.Id_accouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_accouchement", DbType.Int32, 100, DBNull.Value));
                    if (varclspaiement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    cmd.Parameters.Add(getParameter(cmd, "@montantdu", DbType.Single, 100, Math.Round(varclspaiement.Montantdu, 2)));
                    cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, Math.Round(varclspaiement.Montantpaye, 2)));
                    cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, Math.Round(varclspaiement.Montantmituelle, 2)));
                    if (varclspaiement.Dette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, varclspaiement.Dette));
                    else cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Int32, 100, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@archive", DbType.Boolean, 2, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@mituelle", DbType.Boolean, 2, varclspaiement.Mituelle));
                    i = cmd.ExecuteNonQuery();

                    //Recuperation du dernier id du paiement insere
                    using (IDbCommand cmd1 = conn.CreateCommand())
                    {
                        cmd1.CommandText = "SELECT @@IDENTITY AS lastIdInserted FROM paiement ";
                        IDataReader dr = cmd1.ExecuteReader();
                        if (dr.Read())
                        {
                            id_du_paiement = int.Parse(dr["lastIdInserted"].ToString());
                            dr.Close();
                        }
                    }
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public void insertClspaiementforetatpaiement(object varclspaiement, int id, string etatpaiement)
        {
            try
            {
                bool okTarifPreconsultation = false;
                int id_de_dossierpreconsultation = 0;
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (varclspaiement is clsarticle)
                    {
                        //Article
                        cmd.CommandText = "UPDATE sortie SET etatpaiement='Payé' WHERE id=@id";
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    }
                    else if (varclspaiement is clsoperation_laboratoire)
                    {
                        //Laboratoire
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE operation_laboratoire SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE operation_laboratoire SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifconsultationpostnatal)
                    {
                        //CPOS
                        if (etatpaiement == "")
                        {
                            cmd.CommandText = "UPDATE dossierconsultationpostnatal SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossierconsultationpostnatal SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifechographie)
                    {
                        //Echographie
                        if (etatpaiement == "")
                        {
                            cmd.CommandText = "UPDATE dossierechographie SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossierechographie SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifsoin)
                    {
                        //Soins
                        if (etatpaiement == "")
                        {
                            cmd.CommandText = "UPDATE dossiersoin SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossiersoin SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifnursing)
                    {
                        //Nursing
                        if (etatpaiement == "")
                        {
                            cmd.CommandText = "UPDATE dossiernursing SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossiernursing SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifconsultationprenatal)
                    {
                        //CPN
                        if (etatpaiement == "")
                        {
                            cmd.CommandText = "UPDATE dossierconsultationprenatale SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else 
                        {
                            cmd.CommandText = string.Format("UPDATE dossierconsultationprenatale SET etatpaiement='Non cloturé payé' WHERE id=@id");
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifconsultation)
                    {
                        //Consultation
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE consultation SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE consultation SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifconsultationgynecologique)
                    {
                        //consultationgynecologique
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE dossierconsultationgynecologique SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossierconsultationgynecologique SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clsintervention)
                    {
                        //Intervention
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE subit SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE subit SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clschambre)
                    {
                        //Hospitalisation
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE hospitalisation SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE hospitalisation SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    else if (varclspaiement is clstarifpreconsultation)
                    {
                        //Préconsultation
                        cmd.CommandText = "UPDATE dossierpreconsultation SET etatpaiement='Fiche payée' WHERE id=@id";
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        id_de_dossierpreconsultation = id;
                        okTarifPreconsultation = true;
                    }
                    ////else if (varclspaiement is clsautrefraie)
                    ////{
                    ////    //Autres frais
                    ////    cmd.CommandText = "UPDATE autrefraie SET etatpaiement='Payé' WHERE id=@id";
                    ////    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    ////}
                    else if (varclspaiement is clsdetailsautrefraie)
                    {
                        //Autres frais
                        cmd.CommandText = "UPDATE autrefraie SET etatpaiement='Payé' WHERE id=(SELECT autrefraie.id FROM autrefraie INNER JOIN detailsautrefraie ON autrefraie.id=detailsautrefraie.id_autrefraie WHERE detailsautrefraie.id=@id)";
                        cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    }
                    else if (varclspaiement is clstypeaccouchement)
                    {
                        //Type accouchement
                        if (etatpaiement == "Non cloturé non payé")
                        {
                            cmd.CommandText = "UPDATE dossieraccouchement SET etatpaiement='Non cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                        else
                        {
                            cmd.CommandText = "UPDATE dossieraccouchement SET etatpaiement='Cloturé payé' WHERE id=@id";
                            cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        }
                    }
                    cmd.ExecuteNonQuery();

                    if (okTarifPreconsultation)
                    {
                        //On met à jour les etat paiement pour fiche supplementaire
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format("UPDATE fichesupplementaire SET etatpaiement='Fiche payée' WHERE id_dossierpreconsultation=" + id_de_dossierpreconsultation);
                            int t = cmd1.ExecuteNonQuery();
                        }

                        //On met à jour le cumul dans la table dossierpreconsultation
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format("UPDATE dossierpreconsultation SET cumul=0 WHERE id=" + id_de_dossierpreconsultation);
                            int t = cmd1.ExecuteNonQuery();
                        }
                    }

                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
        }

        public int updateClspaiement(clspaiement varclspaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE paiement  SET id_malade=@id_malade,id_sortie=@id_sortie,id_dossierpreconsultation=@id_dossierpreconsultation,id_consultation=@id_consultation,id_dossierconsultationprenatale=@id_dossierconsultationprenatale,id_dossierconsultationpostnatal=@id_dossierconsultationpostnatal,@id_dossierechographie=@id_dossierechographie,id_dossiersoin=@id_dossiersoin,id_dossiernursing=@id_dossiernursing,id_operation_laboratoire=@id_operation_laboratoire,id_autrefraie=@id_autrefraie,id_hospitalisation=@id_hospitalisation,id_subit=@id_subit,id_accouchement=@id_accouchement,date=@date,montantdu=@montantdu,montantpaye=@montantpaye,dette=@dette,archive=@archive,montantmituelle=@montantmituelle,mituelle=@mituelle  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclspaiement.Id_malade));
                    if (varclspaiement.Id_sortie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_sortie", DbType.Int32, 100, varclspaiement.Id_sortie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_sortie", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossierpreconsultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 100, varclspaiement.Id_dossierpreconsultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_consultationgyn.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgyneco", DbType.Int32, 100, varclspaiement.Id_consultationgyn));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgyneco", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_consultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 100, varclspaiement.Id_consultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_consultation", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossierconsultationprenatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 100, varclspaiement.Id_dossierconsultationprenatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationprenatale", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossierconsultationpostnatal.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationpostnatal", DbType.Int32, 100, varclspaiement.Id_dossierconsultationpostnatal));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationpostnatal", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossierechographie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossierechographie", DbType.Int32, 100, varclspaiement.Id_dossierechographie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossierechographie", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossiersoin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossiersoin", DbType.Int32, 100, varclspaiement.Id_dossiersoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossiersoin", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_dossiernursing.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossiernursing", DbType.Int32, 100, varclspaiement.Id_dossiernursing));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossiernursing", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_operation_laboratoire.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, varclspaiement.Id_operation_laboratoire));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_hospitalisation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 100, varclspaiement.Id_hospitalisation));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_hospitalisation", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_autrefraie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, varclspaiement.Id_autrefraie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_subit.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_subit", DbType.Int32, 100, varclspaiement.Id_subit));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_subit", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Id_accouchement.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_accouchement", DbType.Int32, 100, varclspaiement.Id_accouchement));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_accouchement", DbType.Int32, 100, DBNull.Value));

                    if (varclspaiement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclspaiement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));

                    cmd.Parameters.Add(getParameter(cmd, "@montantdu", DbType.Single, 100, varclspaiement.Montantdu));
                    cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, varclspaiement.Montantpaye));
                    cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, Math.Round(varclspaiement.Montantmituelle, 2)));
                    if (varclspaiement.Dette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, varclspaiement.Dette));
                    else cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Int32, 100, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@archive", DbType.Boolean, 2, false));
                    cmd.Parameters.Add(getParameter(cmd, "@mituelle", DbType.Boolean, 2, varclspaiement.Mituelle));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclspaiement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClspaiementarchive(int id_paiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE paiement  SET archive=1  WHERE 1=1  AND id=" + id_paiement);
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClspaiementarchiverestore(int id_paiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE paiement SET archive=0 WHERE 1=1  AND id=" + id_du_paiement);
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClspaiement(clspaiement varclspaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM paiement  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclspaiement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPAIEMENT 
        #region  CLSOPERATION_LABORATOIRE
        public clsoperation_laboratoire getClsoperation_laboratoire(object intid)
        {
            clsoperation_laboratoire varclsoperation_laboratoire = new clsoperation_laboratoire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM operation_laboratoire WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_examen = int.Parse(dr["id_examen"].ToString());
                            varclsoperation_laboratoire.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsoperation_laboratoire;
        }

        public clsoperation_laboratoire getClsoperation_laboratoire1(int ? id)
        {
            clsoperation_laboratoire varclsoperation_laboratoire = new clsoperation_laboratoire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM operation_laboratoire WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_examen = int.Parse(dr["id_examen"].ToString());
                            varclsoperation_laboratoire.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsoperation_laboratoire;
        }

        public DataTable getResultat_Examen_Critere_OperationLabo(int id_operation_laboratoire, string date_opsLabo)
        {
            DataTable lstclsoperation_laboratoire = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT mouvementoperation_laboratoire.id,mouvementoperation_laboratoire.id_critere,mouvementoperation_laboratoire.id_operation_laboratoire,mouvementoperation_laboratoire.resultat,critereresultat.designation AS critereresultat,examen.designation AS examen FROM critereresultat
                    INNER JOIN mouvementoperation_laboratoire ON critereresultat.id=mouvementoperation_laboratoire.id_critere
                    INNER JOIN operation_laboratoire ON operation_laboratoire.id=mouvementoperation_laboratoire.id_operation_laboratoire
                    INNER JOIN examen ON examen.id=operation_laboratoire.id_examen WHERE mouvementoperation_laboratoire.id_operation_laboratoire=" + id_operation_laboratoire + " AND mouvementoperation_laboratoire.date='" + date_opsLabo + "'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsoperation_laboratoire.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsoperation_laboratoire;
        }

        public List<clsoperation_laboratoire> getAllClsoperation_laboratoiretarifpaiement(int id_malade)
        {
            List<clsoperation_laboratoire> lstclsoperation_laboratoire = new List<clsoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT operation_laboratoire.id,operation_laboratoire.date,examen.designation,examen.prix FROM examen
                    INNER JOIN operation_laboratoire ON examen.id=operation_laboratoire.id_examen
                    INNER JOIN malade ON malade.id=operation_laboratoire.id_malade WHERE malade.id=" + id_malade + " AND (operation_laboratoire.etatpaiement='Non cloturé non payé' OR operation_laboratoire.etatpaiement='Cloturé non payé')");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsoperation_laboratoire varclsoperation_laboratoire = null;
                        while (dr.Read())
                        {
                            varclsoperation_laboratoire = new clsoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["prix"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Prix_de_laboratoire = Math.Round(double.Parse(dr["prix"].ToString()),2);
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            varclsoperation_laboratoire.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()),2) + " $US";
                            lstclsoperation_laboratoire.Add(varclsoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsoperation_laboratoire;
        }

        public List<clsoperation_laboratoire> getAllClsoperation_laboratoire(string criteria)
        {
            List<clsoperation_laboratoire> lstclsoperation_laboratoire = new List<clsoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM operation_laboratoire  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsoperation_laboratoire varclsoperation_laboratoire = null;
                        while (dr.Read())
                        {

                            varclsoperation_laboratoire = new clsoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_examen = int.Parse(dr["id_examen"].ToString());
                            varclsoperation_laboratoire.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsoperation_laboratoire.Add(varclsoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsoperation_laboratoire;
        }

        public List<clsoperation_laboratoire> getAllClsoperation_laboratoire2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsoperation_laboratoire> lstclsoperation_laboratoire = new List<clsoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT operation_laboratoire.*,examen.designation,examen.prix FROM operation_laboratoire INNER JOIN examen ON examen.id=operation_laboratoire.id_examen WHERE id_malade = '" + criteria + "' and etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsoperation_laboratoire varclsoperation_laboratoire = null;
                        while (dr.Read())
                        {
                            varclsoperation_laboratoire = new clsoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_examen = int.Parse(dr["id_examen"].ToString());
                            varclsoperation_laboratoire.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            varclsoperation_laboratoire.DesignationComplete = varclsoperation_laboratoire.Date.ToString();
                            varclsoperation_laboratoire.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsoperation_laboratoire.Date.ToString().Substring(0, 10);
                            lstclsoperation_laboratoire.Add(varclsoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsoperation_laboratoire;
        }

        public List<clsoperation_laboratoire> getAllClsoperation_laboratoire()
        {
            List<clsoperation_laboratoire> lstclsoperation_laboratoire = new List<clsoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM operation_laboratoire ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsoperation_laboratoire varclsoperation_laboratoire = null;
                        while (dr.Read())
                        {

                            varclsoperation_laboratoire = new clsoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_examen"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Id_examen = int.Parse(dr["id_examen"].ToString());
                            varclsoperation_laboratoire.Etatpaiement = dr["etatpaiement"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsoperation_laboratoire.Add(varclsoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsoperation_laboratoire;
        }

        public int insertClsoperation_laboratoire(clsoperation_laboratoire varclsoperation_laboratoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO operation_laboratoire ( id_malade,date,id_examen,etatpaiement ) VALUES (@id_malade,@date,@id_examen,@etatpaiement)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsoperation_laboratoire.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_examen", DbType.Int32, 100, varclsoperation_laboratoire.Id_examen));
                    if (varclsoperation_laboratoire.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 1000, varclsoperation_laboratoire.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 1000, DBNull.Value));
                    if (varclsoperation_laboratoire.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsoperation_laboratoire.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsoperation_laboratoire(clsoperation_laboratoire varclsoperation_laboratoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE operation_laboratoire  SET id_malade=@id_malade,date=@date,id_examen=@id_examen,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsoperation_laboratoire.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_examen", DbType.Int32, 100, varclsoperation_laboratoire.Id_examen));
                    if (varclsoperation_laboratoire.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 1000, varclsoperation_laboratoire.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 1000, DBNull.Value));
                    if (varclsoperation_laboratoire.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsoperation_laboratoire.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8,DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsoperation_laboratoire.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsoperation_laboratoire(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE operation_laboratoire SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE operation_laboratoire SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsoperation_laboratoire(clsoperation_laboratoire varclsoperation_laboratoire)
        {
            int i = 0,i1 = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM mouvementoperation_laboratoire  WHERE  1=1  AND id_operation_laboratoire=@id_operation_laboratoire ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_operation_laboratoire", DbType.Int32, 100, varclsoperation_laboratoire.Id));
                    i1 = cmd1.ExecuteNonQuery();
                }
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM operation_laboratoire  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsoperation_laboratoire.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSOPERATION_LABORATOIRE 
        #region  CLSMOUVEMENTOPERATION_LABORATOIRE

        public clsmouvementoperation_laboratoire getClsmouvementoperation_laboratoire(object intid)
        {
            clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementoperation_laboratoire WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_critere"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_critere = int.Parse(dr["id_critere"].ToString());
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementoperation_laboratoire;
        }

        public List<clsmouvementoperation_laboratoire> getAllClsmouvementoperation_laboratoire(string criteria)
        {
            List<clsmouvementoperation_laboratoire> lstclsmouvementoperation_laboratoire = new List<clsmouvementoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementoperation_laboratoire  WHERE 1=1";
                    sql += "  OR   resultat LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = null;
                        while (dr.Read())
                        {

                            varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_critere"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_critere = int.Parse(dr["id_critere"].ToString());
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public List<clsmouvementoperation_laboratoire> getAllClsmouvementoperation_laboratoire2(int criteria)
        {
            List<clsmouvementoperation_laboratoire> lstclsmouvementoperation_laboratoire = new List<clsmouvementoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();//cboExamen.DataSource = clsMetier.GetInstance().getAllClsexamen3(((clsoperation_laboratoire)lstDossierEncCours.SelectedItem).Id);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementoperation_laboratoire  WHERE id_operation_laboratoire= '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = null;
                        while (dr.Read())
                        {
                            varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_critere"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_critere = int.Parse(dr["id_critere"].ToString());
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public List<clsmouvementoperation_laboratoire> getClsResultatExamen_mouvementconsultationt(int id, string d)
        {
            List<clsmouvementoperation_laboratoire> lstclsmouvementoperation_laboratoire = new List<clsmouvementoperation_laboratoire>();
            try
            {
            if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT examen.designation AS examen, critereresultat.designation,  mouvementoperation_laboratoire.resultat
                    FROM mouvementoperation_laboratoire 
                    INNER JOIN operation_laboratoire ON mouvementoperation_laboratoire.id_operation_laboratoire = operation_laboratoire.id 
                    LEFT OUTER JOIN critereresultat ON mouvementoperation_laboratoire.id_critere = critereresultat.id  
                    INNER JOIN malade ON malade.id=operation_laboratoire.id_malade 
                    INNER JOIN examen ON examen.id=operation_laboratoire.id_examen
                    WHERE malade.id=" + id + " AND convert(datetime,mouvementoperation_laboratoire.date,100)='" + d + "'";
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = null;
                        while (dr.Read())
                        {
                            varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
                            varclsmouvementoperation_laboratoire.Examen_complet = dr["examen"].ToString();
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            varclsmouvementoperation_laboratoire.Critere_complet =  dr["designation"].ToString();
                            //varclsmouvementoperation_laboratoire.Resultat_comple = "Examen:\n" + dr["examen"].ToString() + ".\nRésultats:\n" + dr["resultat"].ToString() + "." + ".\nCritère:\n" + dr["designation"].ToString() + ".";


                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public List<string> getClsResultatExamen_mouvementconsultationtco(int id)
        {
            List<string> lstclsmouvementoperation_laboratoire = new List<string>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @"SELECT distinct mouvementoperation_laboratoire.date
                    FROM mouvementoperation_laboratoire 
                    INNER JOIN operation_laboratoire ON mouvementoperation_laboratoire.id_operation_laboratoire = operation_laboratoire.id 
                    LEFT OUTER JOIN critereresultat ON mouvementoperation_laboratoire.id_critere = critereresultat.id  
                    INNER JOIN malade ON malade.id=operation_laboratoire.id_malade 
                    INNER JOIN examen ON examen.id=operation_laboratoire.id_examen
                    WHERE malade.id=" + id + "";
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        string  varclsmouvementoperation_laboratoire = "";
                        while (dr.Read())
                        {
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire= dr["date"].ToString();
                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public List<clsmouvementoperation_laboratoire> getAllClsmouvementoperation_laboratoire3(int criteria)
        {
            List<clsmouvementoperation_laboratoire> lstclsmouvementoperation_laboratoire = new List<clsmouvementoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT mouvementoperation_laboratoire.date,mouvementoperation_laboratoire.id, mouvementoperation_laboratoire.id_operation_laboratoire, mouvementoperation_laboratoire.resultat, mouvementoperation_laboratoire.id_critere,operation_laboratoire.id_malade
                    FROM mouvementoperation_laboratoire 
                    INNER JOIN operation_laboratoire ON mouvementoperation_laboratoire.id_operation_laboratoire = operation_laboratoire.id 
                    LEFT OUTER JOIN critereresultat ON mouvementoperation_laboratoire.id_critere = critereresultat.id    
                         WHERE operation_laboratoire.id_malade=" + criteria + " ";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = null;
                        while (dr.Read())
                        {

                            varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_critere"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_critere = int.Parse(dr["id_critere"].ToString());
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public List<clsmouvementoperation_laboratoire> getAllClsmouvementoperation_laboratoire()
        {
            List<clsmouvementoperation_laboratoire> lstclsmouvementoperation_laboratoire = new List<clsmouvementoperation_laboratoire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementoperation_laboratoire ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire = null;
                        while (dr.Read())
                        {

                            varclsmouvementoperation_laboratoire = new clsmouvementoperation_laboratoire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_operation_laboratoire"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_operation_laboratoire = int.Parse(dr["id_operation_laboratoire"].ToString());
                            if (!dr["id_critere"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Id_critere = int.Parse(dr["id_critere"].ToString());
                            varclsmouvementoperation_laboratoire.Resultat = dr["resultat"].ToString();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementoperation_laboratoire.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementoperation_laboratoire.Add(varclsmouvementoperation_laboratoire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementoperation_laboratoire;
        }

        public int insertClsmouvementoperation_laboratoire(clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mouvementoperation_laboratoire ( id_operation_laboratoire,resultat,date,id_critere ) VALUES (@id_operation_laboratoire,@resultat,@date,@id_critere)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id_operation_laboratoire));
                    cmd.Parameters.Add(getParameter(cmd, "@id_critere", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id_critere));
                    if (varclsmouvementoperation_laboratoire.Resultat != null) cmd.Parameters.Add(getParameter(cmd, "@resultat", DbType.String, 100, varclsmouvementoperation_laboratoire.Resultat));
                    else cmd.Parameters.Add(getParameter(cmd, "@resultat", DbType.String, 100, DBNull.Value));
                    if (varclsmouvementoperation_laboratoire.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementoperation_laboratoire.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmouvementoperation_laboratoire(clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mouvementoperation_laboratoire  SET id_operation_laboratoire=@id_operation_laboratoire,resultat=@resultat,date=@date,id_critere=@id_critere WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_operation_laboratoire", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id_operation_laboratoire));
                    cmd.Parameters.Add(getParameter(cmd, "@id_critere", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id_critere));
                    if (varclsmouvementoperation_laboratoire.Resultat != null) cmd.Parameters.Add(getParameter(cmd, "@resultat", DbType.String, 100, varclsmouvementoperation_laboratoire.Resultat));
                    else cmd.Parameters.Add(getParameter(cmd, "@resultat", DbType.String, 100, DBNull.Value));
                    if (varclsmouvementoperation_laboratoire.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementoperation_laboratoire.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmouvementoperation_laboratoire(clsmouvementoperation_laboratoire varclsmouvementoperation_laboratoire)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementoperation_laboratoire  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmouvementoperation_laboratoire.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMOUVEMENTOPERATION_LABORATOIRE 
        #region  CLSTARIFCONSULTATIONPRENATAL
        public clstarifconsultationprenatal getClstarifconsultationprenatal(object intid)
        {
            clstarifconsultationprenatal varclstarifconsultationprenatal = new clstarifconsultationprenatal();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationprenatal WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationprenatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifconsultationprenatal;
        }

        public List<clstarifconsultationprenatal> getAllCltarifconsultationprenataltarifpaiement(int id_malade)
        {
            List<clstarifconsultationprenatal> lstclstarifconsultationprenatal = new List<clstarifconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossierconsultationprenatale.id AS idDossierPrenatal,tarifconsultationprenatal.id,tarifconsultationprenatal.designation,tarifconsultationprenatal.montant FROM tarifconsultationprenatal 
                    INNER JOIN dossierconsultationprenatale ON tarifconsultationprenatal.id=dossierconsultationprenatale.id_tarifconsultationprenatal
                    INNER JOIN malade ON malade.id=dossierconsultationprenatale.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossierconsultationprenatale.etatpaiement='Non cloturé non payé' OR dossierconsultationprenatale.etatpaiement='Cloturé non payé') ORDER BY tarifconsultationprenatal.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifconsultationprenatal varclstarifconsultationprenatal = null;
                        while (dr.Read())
                        {
                            varclstarifconsultationprenatal = new clstarifconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierPrenatal"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Id_de_dossierconsultationprenatale = int.Parse(dr["idDossierPrenatal"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            varclstarifconsultationprenatal.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["montant"].ToString()),2) + " $US";
                            lstclstarifconsultationprenatal.Add(varclstarifconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationprenatal;
        }

        public List<clstarifconsultationprenatal> getAllClstarifconsultationprenatal(string criteria)
        {
            List<clstarifconsultationprenatal> lstclstarifconsultationprenatal = new List<clstarifconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifconsultationprenatal  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultationprenatal varclstarifconsultationprenatal = null;
                        while (dr.Read())
                        {

                            varclstarifconsultationprenatal = new clstarifconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationprenatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationprenatal.Add(varclstarifconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationprenatal;
        }

        public List<clstarifconsultationprenatal> getAllClstarifconsultationprenatal()
        {
            List<clstarifconsultationprenatal> lstclstarifconsultationprenatal = new List<clstarifconsultationprenatal>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationprenatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultationprenatal varclstarifconsultationprenatal = null;
                        while (dr.Read())
                        {

                            varclstarifconsultationprenatal = new clstarifconsultationprenatal();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationprenatal.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationprenatal.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationprenatal.Add(varclstarifconsultationprenatal);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationprenatal;
        }

        public int insertClstarifconsultationprenatal(clstarifconsultationprenatal varclstarifconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifconsultationprenatal ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifconsultationprenatal.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifconsultationprenatal.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifconsultationprenatal.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifconsultationprenatal.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifconsultationprenatal(clstarifconsultationprenatal varclstarifconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifconsultationprenatal  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifconsultationprenatal.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifconsultationprenatal.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifconsultationprenatal.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifconsultationprenatal.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifconsultationprenatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifconsultationprenatal(clstarifconsultationprenatal varclstarifconsultationprenatal)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifconsultationprenatal  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifconsultationprenatal.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTARIFCONSULTATIONPRENATAL 
        #region  CLSCONDITIONNEMENT
        public clsconditionnement getClsconditionnement(object intid)
        {
            clsconditionnement varclsconditionnement = new clsconditionnement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM conditionnement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsconditionnement.Id = int.Parse(dr["id"].ToString());
                            varclsconditionnement.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconditionnement;
        }

        public List<clsconditionnement> getAllClsconditionnement(string criteria)
        {
            List<clsconditionnement> lstclsconditionnement = new List<clsconditionnement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM conditionnement  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconditionnement varclsconditionnement = null;
                        while (dr.Read())
                        {

                            varclsconditionnement = new clsconditionnement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconditionnement.Id = int.Parse(dr["id"].ToString());
                            varclsconditionnement.Designation = dr["designation"].ToString();
                            lstclsconditionnement.Add(varclsconditionnement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconditionnement;
        }

        public List<clsconditionnement> getAllClsconditionnement()
        {
            List<clsconditionnement> lstclsconditionnement = new List<clsconditionnement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM conditionnement ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsconditionnement varclsconditionnement = null;
                        while (dr.Read())
                        {

                            varclsconditionnement = new clsconditionnement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconditionnement.Id = int.Parse(dr["id"].ToString());
                            varclsconditionnement.Designation = dr["designation"].ToString();
                            lstclsconditionnement.Add(varclsconditionnement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconditionnement;
        }

        public int insertClsconditionnement(clsconditionnement varclsconditionnement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO conditionnement ( designation ) VALUES (@designation  )");
                    if (varclsconditionnement.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsconditionnement.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconditionnement(clsconditionnement varclsconditionnement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE conditionnement  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsconditionnement.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsconditionnement.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsconditionnement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsconditionnement(clsconditionnement varclsconditionnement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM conditionnement  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsconditionnement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCONDITIONNEMENT 
        #region  CLSARTICLE_PAYE
        public clsarticle_paye getClsclsarticle_paye()
        {
            clsarticle_paye varclsarticle_paye = new clsarticle_paye();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT * FROM article_paye");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsarticle_paye.Id = int.Parse(dr["id"].ToString());
                            varclsarticle_paye.Id_article = int.Parse(dr["id_article"].ToString());
                            varclsarticle_paye.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            varclsarticle_paye.Designation = dr["designation"].ToString();
                            varclsarticle_paye.Designation_classe = dr["designation_classe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsarticle_paye;
        }

        public clsarticle_paye getClsarticle_paye(int intid)
        {
            clsarticle_paye varclsarticle_paye = new clsarticle_paye();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT * FROM article_paye WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsarticle_paye.Id = int.Parse(dr["id"].ToString());
                            varclsarticle_paye.Id_article = int.Parse(dr["id_article"].ToString());
                            varclsarticle_paye.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            varclsarticle_paye.Designation = dr["designation"].ToString();
                            varclsarticle_paye.Designation_classe = dr["designation_classe"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsarticle_paye;
        }

        public List<clsarticle_paye> getAllClsarticle_paye1(int id_paiement)
        {
            List<clsarticle_paye> lstclsarticle_paye = new List<clsarticle_paye>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT * FROM article_paye WHERE id_paiement=" + id_paiement);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsarticle_paye varclsarticle_paye = null;
                        while (dr.Read())
                        {
                            varclsarticle_paye = new clsarticle_paye();
                            varclsarticle_paye.Id = int.Parse(dr["id"].ToString());
                            varclsarticle_paye.Id_article = int.Parse(dr["id_article"].ToString());
                            varclsarticle_paye.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            varclsarticle_paye.Designation = dr["designation"].ToString();
                            varclsarticle_paye.Designation_classe = dr["designation_classe"].ToString();
                            lstclsarticle_paye.Add(varclsarticle_paye);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle_paye;
        }

        public List<clsarticle_paye> getAllClsarticle_paye(string criteria)
        {
            List<clsarticle_paye> lstclsarticle_paye = new List<clsarticle_paye>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT * FROM article_paye WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    sql += "  OR   designation_classe LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsarticle_paye varclsarticle_paye = null;
                        while (dr.Read())
                        {
                            varclsarticle_paye = new clsarticle_paye();
                            varclsarticle_paye.Id = int.Parse(dr["id"].ToString());
                            varclsarticle_paye.Id_article = int.Parse(dr["id_article"].ToString());
                            varclsarticle_paye.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            varclsarticle_paye.Designation = dr["designation"].ToString();
                            varclsarticle_paye.Designation_classe = dr["designation_classe"].ToString();
                            lstclsarticle_paye.Add(varclsarticle_paye);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle_paye;
        }

        public List<clsarticle_paye> getAllClsarticle_paye()
        {
            List<clsarticle_paye> lstclsarticle_paye = new List<clsarticle_paye>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT * FROM article_paye";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsarticle_paye varclsarticle_paye = null;
                        while (dr.Read())
                        {
                            varclsarticle_paye = new clsarticle_paye();
                            varclsarticle_paye.Id = int.Parse(dr["id"].ToString());
                            varclsarticle_paye.Id_article = int.Parse(dr["id_article"].ToString());
                            varclsarticle_paye.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            varclsarticle_paye.Designation = dr["designation"].ToString();
                            varclsarticle_paye.Designation_classe = dr["designation_classe"].ToString();
                            lstclsarticle_paye.Add(varclsarticle_paye);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsarticle_paye;
        }

        public int insertClsarticle_paye(clsarticle_paye varclsarticle_paye)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO article_paye ( id_paiement,id_article,designation,designation_classe) VALUES (@id_paiement,@id_article,@designation,@designation_classe  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_paiement", DbType.Int32, 100, id_du_paiement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, varclsarticle_paye.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, varclsarticle_paye.Designation));
                    cmd.Parameters.Add(getParameter(cmd, "@designation_classe", DbType.String, 50, varclsarticle_paye.Designation_classe));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsarticle_paye(clsarticle_paye varclsarticle_paye)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE article_paye  SET id_paiement=@id_paiement,id_article=@id_article,designation=@designation,designation_classe=@designation_classe id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_paiement", DbType.Int32, 100, varclsarticle_paye.Id_paiement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, varclsarticle_paye.Id_article));
                    cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, varclsarticle_paye.Designation));
                    cmd.Parameters.Add(getParameter(cmd, "@designation_classe", DbType.String, 50, varclsarticle_paye.Designation_classe));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsarticle_paye(clsarticle_paye varclsarticle_paye)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsarticle_paye.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsarticle_paye_paiement(int id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye  WHERE  1=1  AND id_paiement="+id);
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSMALADEGROSSE
        #region  CLSSORTIEEXTERNE
        public clssortieexterne getClssortieexterne(object intid)
        {
            clssortieexterne varclssortieexterne = new clssortieexterne();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM sortieexterne WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortieexterne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclssortieexterne.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortieexterne.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortieexterne.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortieexterne.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortieexterne.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclssortieexterne.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortieexterne.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclssortieexterne;
        }

        public List<clssortieexterne> getAllClssortieexterne(string criteria)
        {
            List<clssortieexterne> lstclssortieexterne = new List<clssortieexterne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM sortieexterne  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortieexterne varclssortieexterne = null;
                        while (dr.Read())
                        {
                            varclssortieexterne = new clssortieexterne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortieexterne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclssortieexterne.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortieexterne.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortieexterne.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortieexterne.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortieexterne.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclssortieexterne.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortieexterne.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclssortieexterne.Add(varclssortieexterne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortieexterne;
        }

        public List<clssortieexterne> getAllClssortieexterne()
        {
            List<clssortieexterne> lstclssortieexterne = new List<clssortieexterne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM sortieexterne ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clssortieexterne varclssortieexterne = null;
                        while (dr.Read())
                        {
                            varclssortieexterne = new clssortieexterne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclssortieexterne.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_autrefraie"].ToString().Trim().Equals("")) varclssortieexterne.Id_autrefraie = int.Parse(dr["id_autrefraie"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclssortieexterne.Id_malade = int.Parse(dr["id_malade"].ToString());
                            else varclssortieexterne.Id_malade = null;
                            if (!dr["date"].ToString().Trim().Equals("")) varclssortieexterne.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["quantinte"].ToString().Trim().Equals("")) varclssortieexterne.Quantinte = int.Parse(dr["quantinte"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclssortieexterne.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclssortieexterne.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclssortieexterne.Add(varclssortieexterne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclssortieexterne;
        }

        public int insertClssortieexterne(clssortieexterne varclssortieexterne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortieexterne.Date.HasValue) { }
                    else date = varclssortieexterne.Date;

                    cmd.CommandText = string.Format("INSERT INTO sortieexterne ( id_autrefraie,id_malade,date,quantinte,montant,etatpaiement) VALUES (@id_autrefraie,@id_malade,@date,@quantinte,@montant,@etatpaiement )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, varclssortieexterne.Id_autrefraie));
                    if (varclssortieexterne.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclssortieexterne.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclssortieexterne.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    if (varclssortieexterne.Quantinte.HasValue)
                    {
                        if (varclssortieexterne.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 100, varclssortieexterne.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide");
                    if (varclssortieexterne.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclssortieexterne.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, 0));
                    if (varclssortieexterne.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortieexterne.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));

                    i = cmd.ExecuteNonQuery();

                    //Recuperation du dernier id du paiement insere
                    using (IDbCommand cmd21 = conn.CreateCommand())
                    {
                        cmd21.CommandText = "SELECT @@IDENTITY AS lastIdInserted FROM sortie ";
                        IDataReader dri = cmd21.ExecuteReader();
                        if (dri.Read()) id_Sortie_art_ext = int.Parse(dri["lastIdInserted"].ToString());
                        dri.Dispose();
                    }

                    //Recuperation du last id inséré
                    using (IDbCommand cmd0 = conn.CreateCommand())
                    {
                        cmd0.CommandText = string.Format("SELECT @@identity AS lastId FROM sortieexterne");
                        IDataReader rd0 = cmd0.ExecuteReader();
                        if (rd0.Read()) clsDoTraitement.id_sortieExterne_medicaments = Convert.ToInt32(rd0["lastId"].ToString());
                        rd0.Dispose();
                    }

                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClssortieexterne(clssortieexterne varclssortieexterne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclssortieexterne.Date.HasValue) { }
                    else date = varclssortieexterne.Date;

                    cmd.CommandText = string.Format("UPDATE sortieexterne  SET id_autrefraie=@id_autrefraie,id_malade=@id_malade,date=@date,quantinte=@quantinte,montant=@montant,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_autrefraie", DbType.Int32, 100, varclssortieexterne.Id_autrefraie));
                    if (varclssortieexterne.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclssortieexterne.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclssortieexterne.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    if (varclssortieexterne.Quantinte.HasValue)
                    {
                        if (varclssortieexterne.Quantinte <= 0) throw new Exception("La quantité est invalide");
                        else cmd.Parameters.Add(getParameter(cmd, "@quantinte", DbType.Int32, 100, varclssortieexterne.Quantinte));
                    }
                    else throw new Exception("La quantité est invalide");
                    if (varclssortieexterne.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclssortieexterne.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, 0));
                    if (varclssortieexterne.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclssortieexterne.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Non payé"));

                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclssortieexterne.Id));
                    i = cmd.ExecuteNonQuery();

                    clsDoTraitement.oldValueStockModifie = 0;
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClssortieexterne(clssortieexterne varclssortieexterne)
        {
            int i = 0, i1 = 0, i2 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_sortieexterne=@id) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclssortieexterne.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_sortieexterne=@id ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, varclssortieexterne.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM sortieexterne WHERE 1=1 AND id=@id ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Int32, 4, varclssortieexterne.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la suppression, veuillez réessayez svp, " + exc.Message);
                }
            }
            return i2;
        }

        #endregion CLSSORTIEEXTERNE 
        #region  CLSDOSSIERCONSULTATIONPRENATALE
        public clsdossierconsultationprenatale getClsdossierconsultationprenatale(object intid)
        {
            clsdossierconsultationprenatale varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationprenatale WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationprenatale;
        }
        
        public clsdossierconsultationprenatale getClsdossierconsultationprenatale1(int ? id)
        {
            clsdossierconsultationprenatale varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossierconsultationprenatale WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationprenatale;
        }

        public List<clsdossierconsultationprenatale> getAllClsdossierconsultationprenatale(string criteria)
        {
            List<clsdossierconsultationprenatale> lstclsdossierconsultationprenatale = new List<clsdossierconsultationprenatale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationprenatale  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationprenatale varclsdossierconsultationprenatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationprenatale.Add(varclsdossierconsultationprenatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationprenatale;
        }

        public List<clsdossierconsultationprenatale> getAllClsdossierconsultationprenatale2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossierconsultationprenatale> lstclsdossierconsultationprenatale = new List<clsdossierconsultationprenatale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossierconsultationprenatale.*,tarifconsultationprenatal.designation,tarifconsultationprenatal.montant AS prix  FROM dossierconsultationprenatale INNER JOIN tarifconsultationprenatal ON tarifconsultationprenatal.id=dossierconsultationprenatale.id_tarifconsultationprenatal WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationprenatale varclsdossierconsultationprenatale = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossierconsultationprenatale.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierconsultationprenatale.Date.ToString().Substring(0, 10);
                            lstclsdossierconsultationprenatale.Add(varclsdossierconsultationprenatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationprenatale;
        }

        public List<clsdossierconsultationprenatale> getAllClsdossierconsultationprenatale3(int criteria)
        {
            List<clsdossierconsultationprenatale> lstclsdossierconsultationprenatale = new List<clsdossierconsultationprenatale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationprenatale  WHERE id_malade = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationprenatale varclsdossierconsultationprenatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationprenatale.Add(varclsdossierconsultationprenatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationprenatale;
        }


        public List<clsdossierconsultationprenatale> getAllClsdossierconsultationprenatale()
        {
            List<clsdossierconsultationprenatale> lstclsdossierconsultationprenatale = new List<clsdossierconsultationprenatale>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationprenatale ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationprenatale varclsdossierconsultationprenatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationprenatale = new clsdossierconsultationprenatale();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationprenatal"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale = int.Parse(dr["id_tarifconsultationprenatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationprenatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationprenatale.Add(varclsdossierconsultationprenatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationprenatale;
        }

        public int insertClsdossierconsultationprenatale(clsdossierconsultationprenatale varclsdossierconsultationprenatale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossierconsultationprenatale ( date,id_malade,id_agent,id_tarifconsultationprenatal,etatpaiement ) VALUES (@date,@id_malade,@id_agent,@id_tarifconsultationprenatal,@etatpaiement  )");
                    if (varclsdossierconsultationprenatale.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationprenatale.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));                  
                    if (varclsdossierconsultationprenatale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationprenatal", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationprenatal", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierconsultationprenatale.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationprenatale(clsdossierconsultationprenatale varclsdossierconsultationprenatale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierconsultationprenatale  SET date=@date,id_malade=@id_malade,id_agent=@id_agent,id_tarifconsultationprenatal=@id_tarifconsultationprenatal,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossierconsultationprenatale.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationprenatale.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationprenatal", DbType.Int32, 100, varclsdossierconsultationprenatale.Id_tarifconsultationprenatatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationprenatal", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationprenatale.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierconsultationprenatale.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationprenatale(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossierconsultationprenatale SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossierconsultationprenatale SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }


        public int deleteClsdossierconsultationprenatale(clsdossierconsultationprenatale varclsdossierconsultationprenatale)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementsysteme WHERE  1=1  AND id_consultationPrenatal=(SELECT id FROM consultationprenatal WHERE id_consultationPrenatal=@id_consultationprenatal) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM consellingettestrapide WHERE  1=1  AND id_consultationPrenatal=(SELECT id FROM consultationprenatal WHERE id_consultationPrenatal=@id_consultationprenatal) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM entecedentmedicauxobsetricaux WHERE  1=1  AND id_consultationprenatal=(SELECT id FROM consultationprenatal WHERE id_consultationprenatal=@id_consultationprenatal) ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossierconsultationprenatale=@id_consultationprenatal) ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                }

                using (IDbCommand cmd4 = conn.CreateCommand())
                {
                    cmd4.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossierconsultationprenatale=@id_consultationprenatal ");
                    cmd4.Parameters.Add(getParameter(cmd4, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd4.Transaction = transaction;
                    i4 = cmd4.ExecuteNonQuery();
                }

                using (IDbCommand cmd5 = conn.CreateCommand())
                {
                    cmd5.CommandText = string.Format("DELETE FROM dossierconsultationprenatale WHERE 1=1 AND id=@id_consultationprenatal ");
                    cmd5.Parameters.Add(getParameter(cmd5, "@id_consultationprenatal", DbType.Int32, 4, varclsdossierconsultationprenatale.Id));
                    cmd5.Transaction = transaction;
                    i5 = cmd5.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }

        #endregion
        #region  CLSFACTURATION
        public clsfacturation getClsfacturation(object intid)
        {
            clsfacturation varclsfacturation = new clsfacturation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM facturation WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfacturation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["numero_facture"].ToString().Trim().Equals("")) varclsfacturation.Numero_facture = int.Parse(dr["numero_facture"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsfacturation.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_article_f"].ToString().Trim().Equals("")) varclsfacturation.Id_article_f = int.Parse(dr["id_article_f"].ToString());
                            if (!dr["designation"].ToString().Trim().Equals("")) varclsfacturation.Designation = dr["designation"].ToString();
                            if (!dr["designation_service"].ToString().Trim().Equals("")) varclsfacturation.Designation_service = dr["designation_service"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsfacturation.Pu = double.Parse(dr["pu"].ToString());
                            if (!dr["quantite"].ToString().Trim().Equals("")) varclsfacturation.Quantite = int.Parse(dr["quantite"].ToString());
                            if (!dr["montantpaye"].ToString().Trim().Equals("")) varclsfacturation.Montantpaye = double.Parse(dr["montantpaye"].ToString());
                            if (!dr["montantmituelle"].ToString().Trim().Equals("")) varclsfacturation.Montantmituelle = double.Parse(dr["montantmituelle"].ToString());
                            if (!dr["dette"].ToString().Trim().Equals("")) varclsfacturation.Dette = double.Parse(dr["dette"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsfacturation.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["ismedicament"].ToString().Trim().Equals("")) varclsfacturation.Ismedicament = bool.Parse(dr["ismedicament"].ToString());
                            if (!dr["isexamen"].ToString().Trim().Equals("")) varclsfacturation.Isexamen = bool.Parse(dr["isexamen"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfacturation;
        }

        public int getClsfacturationIdpaiement(int intid, string designation)
        {
            int idpaiement = -1;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT id_paiement  FROM facturation WHERE id_article={0} and designation='{1}'", intid, designation);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id_paiement"].ToString().Trim().Equals("")) idpaiement = int.Parse(dr["id_paiement"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return idpaiement;
        }

        public List<clsfacturation> getAllClsfacturation(string criteria)
        {
            List<clsfacturation> lstclsfacturation = new List<clsfacturation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM facturation  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfacturation varclsfacturation = null;
                        while (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfacturation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["numero_facture"].ToString().Trim().Equals("")) varclsfacturation.Numero_facture = int.Parse(dr["numero_facture"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_paiement"].ToString().Trim().Equals("")) varclsfacturation.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsfacturation.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_article_f"].ToString().Trim().Equals("")) varclsfacturation.Id_article_f = int.Parse(dr["id_article_f"].ToString());
                            if (!dr["designation"].ToString().Trim().Equals("")) varclsfacturation.Designation = dr["designation"].ToString();
                            if (!dr["designation_service"].ToString().Trim().Equals("")) varclsfacturation.Designation_service = dr["designation_service"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsfacturation.Pu = double.Parse(dr["pu"].ToString());
                            if (!dr["quantite"].ToString().Trim().Equals("")) varclsfacturation.Quantite = int.Parse(dr["quantite"].ToString());
                            if (!dr["montantpaye"].ToString().Trim().Equals("")) varclsfacturation.Montantpaye = double.Parse(dr["montantpaye"].ToString());
                            if (!dr["montantmituelle"].ToString().Trim().Equals("")) varclsfacturation.Montantmituelle = double.Parse(dr["montantmituelle"].ToString());
                            if (!dr["dette"].ToString().Trim().Equals("")) varclsfacturation.Dette = double.Parse(dr["dette"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsfacturation.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["ismedicament"].ToString().Trim().Equals("")) varclsfacturation.Ismedicament = bool.Parse(dr["ismedicament"].ToString());
                            if (!dr["isexamen"].ToString().Trim().Equals("")) varclsfacturation.Isexamen = bool.Parse(dr["isexamen"].ToString());
                            lstclsfacturation.Add(varclsfacturation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<int> getAllClsfacturation2(int id_malade, string date_operation)
        {
            List<int> lstclsfacturation = new List<int>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT numero_facture FROM facturation WHERE facturation.solde=0 AND facturation.ispaiementmalade=1 AND facturation.id_malade=" + id_malade + " AND facturation.date='" + date_operation + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclsfacturation.Add(int.Parse(dr["numero_facture"].ToString()));
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<int> getAllClsfacturation3(string entreprise_mutuelle, string date_operation)
        {
            List<int> lstclsfacturation = new List<int>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT DISTINCT numero_facture
                    FROM facturation INNER JOIN malade ON facturation.id_malade = malade.id
                    LEFT OUTER JOIN personne ON malade.id_personne = personne.id 
                    LEFT OUTER JOIN categoriemalade ON malade.id_categoriemalade = categoriemalade.id 
                    LEFT OUTER JOIN etablissementpriseencharge ON malade.id_etablissement=etablissementpriseencharge.id
                    WHERE MONTH(facturation.date)=(SELECT DISTINCT MONTH(facturation.date) from facturation WHERE convert(date,facturation.date,100)='" + date_operation + "') and (facturation.ismedicament=0 OR facturation.ismedicament=1) AND facturation.soldemituelle=0 AND etablissementpriseencharge.denomination='" + entreprise_mutuelle + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclsfacturation.Add(int.Parse(dr["numero_facture"].ToString()));
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<int> getAllClsfacturation3(string entreprise_mutuelle, string date_debut, string date_fin)
        {
            List<int> lstclsfacturation = new List<int>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT DISTINCT facturation.numero_facture FROM facturation INNER JOIN malade ON facturation.id_malade = malade.id
                    LEFT OUTER JOIN personne ON malade.id_personne = personne.id 
                    LEFT OUTER JOIN categoriemalade ON malade.id_categoriemalade = categoriemalade.id 
                    LEFT OUTER JOIN etablissementpriseencharge ON malade.id_etablissement=etablissementpriseencharge.id
                    WHERE facturation.date BETWEEN '" + date_debut + @"' AND '" + date_fin + @"' AND (facturation.ismedicament=0 OR facturation.ismedicament=1) AND facturation.soldemituelle=0 AND etablissementpriseencharge.denomination='" + entreprise_mutuelle + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            lstclsfacturation.Add(int.Parse(dr["numero_facture"].ToString()));
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public clsfacturation getClsfacturation1(object intid)
        {
            clsfacturation varclsfacturation = new clsfacturation();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT facturation.id,facturation.id_paiement,facturation.designation_service,facturation.numero_facture,facturation.id_malade,facturation.id_article,facturation.id_article_f,facturation.designation,facturation.pu,facturation.quantite,facturation.montantpaye,facturation.montantmituelle,facturation.dette,facturation.avance,facturation.date,facturation.ismedicament FROM facturation
                    INNER JOIN malade ON malade.id=facturation.id_malade WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfacturation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["numero_facture"].ToString().Trim().Equals("")) varclsfacturation.Numero_facture = int.Parse(dr["numero_facture"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_paiement"].ToString().Trim().Equals("")) varclsfacturation.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsfacturation.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_article_f"].ToString().Trim().Equals("")) varclsfacturation.Id_article_f = int.Parse(dr["id_article_f"].ToString());
                            if (!dr["designation"].ToString().Trim().Equals("")) varclsfacturation.Designation = dr["designation"].ToString();
                            if (!dr["designation_service"].ToString().Trim().Equals("")) varclsfacturation.Designation_service = dr["designation_service"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsfacturation.Pu = double.Parse(dr["pu"].ToString());
                            if (!dr["quantite"].ToString().Trim().Equals("")) varclsfacturation.Quantite = int.Parse(dr["quantite"].ToString());
                            if (!dr["montantpaye"].ToString().Trim().Equals("")) varclsfacturation.Montantpaye = double.Parse(dr["montantpaye"].ToString());
                            if (!dr["montantmituelle"].ToString().Trim().Equals("")) varclsfacturation.Montantmituelle = double.Parse(dr["montantmituelle"].ToString());
                            if (!dr["dette"].ToString().Trim().Equals("")) varclsfacturation.Dette = double.Parse(dr["dette"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsfacturation.Avance = double.Parse(dr["avance"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfacturation;
        }

        public SqlConnection InitializeReport()
        {
            return conn;
        }

        public List<clsfacturation> getAllClsfacturationPersonne()
        {
            List<clsfacturation> lstclsfacturation = new List<clsfacturation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @" SELECT ISNULL(personne.nom,'') + ' ' + ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS nom,facturation.id_malade
                                   FROM facturation INNER JOIN malade ON facturation.id_malade = malade.id 
                                                    LEFT OUTER JOIN personne ON malade.id_personne = personne.id 
                                                    group by personne.nom,personne.postnom,personne.prenom,facturation.id_malade";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfacturation varclsfacturation = null;
                        while (dr.Read())
                        {
                            varclsfacturation =new  clsfacturation();
                            if (!dr["nom"].ToString().Trim().Equals("")) varclsfacturation.NomComplet = dr["nom"].ToString() ;
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = Convert.ToInt32(dr["id_malade"].ToString());
                            lstclsfacturation.Add(varclsfacturation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<clsfacturation> getAllClsfacturationPersonne(int id)
        {
            List<clsfacturation> lstclsfacturation = new List<clsfacturation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"select facturation.date, facturation.id_malade
						from facturation
						where facturation.id_malade=" + id + " group by facturation.date,facturation.id_malade";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfacturation varclsfacturation = null;
                        while (dr.Read())
                        {
                            varclsfacturation = new clsfacturation();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfacturation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            lstclsfacturation.Add(varclsfacturation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<clsfacturation> getAllClsfacturationPersonne1(string designationEntreprise)
        {
            List<clsfacturation> lstclsfacturation = new List<clsfacturation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"select facturation.date,etablissementpriseencharge.id AS idEtablissement,facturation.id_malade
						from facturation
						LEFT OUTER JOIN malade ON malade.id=facturation.id_malade
						RIGHT OUTER JOIN etablissementpriseencharge ON etablissementpriseencharge.id=malade.id_etablissement 
						where etablissementpriseencharge.denomination='" + designationEntreprise + "' group by facturation.date,facturation.id_malade,etablissementpriseencharge.id";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfacturation varclsfacturation = null;
                        while (dr.Read())
                        {
                            varclsfacturation = new clsfacturation();
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfacturation.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["idEtablissement"].ToString().Trim().Equals("")) varclsfacturation.Id_etablissement = int.Parse(dr["idEtablissement"].ToString());
                            lstclsfacturation.Add(varclsfacturation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public List<clsfacturation> getAllClsfacturation()
        {
            List<clsfacturation> lstclsfacturation = new List<clsfacturation>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM facturation ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsfacturation varclsfacturation = null;
                        while (dr.Read())
                        {
                            varclsfacturation = new clsfacturation();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfacturation.Id = int.Parse(dr["id"].ToString());
                            if (!dr["numero_facture"].ToString().Trim().Equals("")) varclsfacturation.Numero_facture = int.Parse(dr["numero_facture"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsfacturation.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_paiement"].ToString().Trim().Equals("")) varclsfacturation.Id_paiement = int.Parse(dr["id_paiement"].ToString());
                            if (!dr["id_article"].ToString().Trim().Equals("")) varclsfacturation.Id_article = int.Parse(dr["id_article"].ToString());
                            if (!dr["id_article_f"].ToString().Trim().Equals("")) varclsfacturation.Id_article_f = int.Parse(dr["id_article_f"].ToString());
                            if (!dr["designation"].ToString().Trim().Equals("")) varclsfacturation.Designation = dr["designation"].ToString();
                            if (!dr["designation_service"].ToString().Trim().Equals("")) varclsfacturation.Designation_service = dr["designation_service"].ToString();
                            if (!dr["pu"].ToString().Trim().Equals("")) varclsfacturation.Pu = double.Parse(dr["pu"].ToString());
                            if (!dr["quantite"].ToString().Trim().Equals("")) varclsfacturation.Quantite = int.Parse(dr["quantite"].ToString());
                            if (!dr["montantpaye"].ToString().Trim().Equals("")) varclsfacturation.Montantpaye = double.Parse(dr["montantpaye"].ToString());
                            if (!dr["montantmituelle"].ToString().Trim().Equals("")) varclsfacturation.Montantmituelle = double.Parse(dr["montantmituelle"].ToString());
                            if (!dr["dette"].ToString().Trim().Equals("")) varclsfacturation.Dette = double.Parse(dr["dette"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsfacturation.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["ismedicament"].ToString().Trim().Equals("")) varclsfacturation.Ismedicament = bool.Parse(dr["ismedicament"].ToString());
                            if (!dr["isexamen"].ToString().Trim().Equals("")) varclsfacturation.Isexamen = bool.Parse(dr["isexamen"].ToString());
                            lstclsfacturation.Add(varclsfacturation);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfacturation;
        }

        public int generateIdFacture()
        {
            int id = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT MAX(id) AS lastId FROM facturation");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (dr["lastId"] == DBNull.Value) id = 1;
                            else id = int.Parse(dr["lastId"].ToString()) + 1;
                        }
                        else id = 1;
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return id;
        }

        public int generateIdFacture2()
        {
            int id = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT MAX(numero_facture) AS lastNumFacture FROM facturation");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (dr["lastNumFacture"] == DBNull.Value) id = 1;
                            else id = int.Parse(dr["lastNumFacture"].ToString()) + 1;
                        }
                        else id = 1;
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return id;
        }

        public int insertClsfacturation(clsfacturation varclsfacturation)
        {
            int i = 0;
            try
            {
                int identifiant = generateIdFacture();
                DateTime? date = DateTime.Today;
                if (!varclsfacturation.Date.HasValue) { }
                else date = varclsfacturation.Date;
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO facturation ( id,numero_facture,id_malade,id_article,id_article_f,designation,pu,quantite,montantpaye,montantmituelle,dette,avance,date,id_paiement,ismedicament,ispaiementmalade,isexamen,designation_service) VALUES (@id,@numero_facture,@id_malade,@id_article,@id_article_f,@designation,@pu,@quantite,@montantpaye,@montantmituelle,@dette,@avance,@date,@id_paiement,@ismedicament,@ispaiementmalade,@isexamen,@designation_service)");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, identifiant));
                    cmd.Parameters.Add(getParameter(cmd, "@id_paiement", DbType.Int32, 100, varclsfacturation.Id_paiement));
                    cmd.Parameters.Add(getParameter(cmd, "@numero_facture", DbType.Int32, 100, varclsfacturation.Numero_facture));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsfacturation.Id_malade));                    
                    if (varclsfacturation.Id_article.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, varclsfacturation.Id_article));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, DBNull.Value));
                    if (varclsfacturation.Id_article_f.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_article_f", DbType.Int32, 100, varclsfacturation.Id_article_f));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_article_f", DbType.Int32, 100, DBNull.Value));
                    if (varclsfacturation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, varclsfacturation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, DBNull.Value));
                    if (varclsfacturation.Designation_service != null) cmd.Parameters.Add(getParameter(cmd, "@designation_service", DbType.String, 200, varclsfacturation.Designation_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation_service", DbType.String, 200, DBNull.Value));
                    if (varclsfacturation.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 100, varclsfacturation.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 100, DBNull.Value));
                    if (varclsfacturation.Quantite.HasValue) cmd.Parameters.Add(getParameter(cmd, "@quantite", DbType.Single, 100, varclsfacturation.Quantite));
                    else cmd.Parameters.Add(getParameter(cmd, "@quantite", DbType.Single, 100, 0));
                    if (varclsfacturation.Montantpaye.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, varclsfacturation.Montantpaye));
                    else cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, 0));
                    if (varclsfacturation.Montantmituelle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, varclsfacturation.Montantmituelle));
                    else cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, DBNull.Value));
                    if (varclsfacturation.Dette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, varclsfacturation.Dette));
                    else cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, 0));
                    if (varclsfacturation.Avance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 100, varclsfacturation.Avance));
                    else cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 100, DBNull.Value));
                    if (varclsfacturation.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    cmd.Parameters.Add(getParameter(cmd, "@ismedicament", DbType.Boolean, 2, varclsfacturation.Ismedicament));
                    cmd.Parameters.Add(getParameter(cmd, "@isexamen", DbType.Boolean, 2, varclsfacturation.Isexamen));
                    cmd.Parameters.Add(getParameter(cmd, "@ispaiementmalade", DbType.Boolean, 2, varclsfacturation.Ispaiementmalade));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsfacturation(clsfacturation varclsfacturation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE facturation  SET numero_facture=@numero_facture,id_malade=@id_malade,id_article=@id_article,id_article_f=@id_article_f,designation=@designation,id_paiement=@id_paiement, pu=@pu,quantite=@quantite,montantpaye=@montantpaye,montantmituelle=@montantmituelle,dette=@dette,avance=@avance,ismedicament=@ismedicament,ispaiementmalade=@ispaiementmalade,isexamen=@isexamen,designation_service=@designation_service  WHERE 1=1  AND id=@id ");
                    if (varclsfacturation.Numero_facture.HasValue) cmd.Parameters.Add(getParameter(cmd, "@numero_facture", DbType.Int32, 100, varclsfacturation.Numero_facture));
                    else cmd.Parameters.Add(getParameter(cmd, "@numero_facture", DbType.Int32, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsfacturation.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_paiement", DbType.Int32, 100, varclsfacturation.Id_paiement));
                    if (varclsfacturation.Id_article.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, varclsfacturation.Id_article));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_article", DbType.Int32, 100, DBNull.Value));
                    if (varclsfacturation.Id_article_f.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_article_f", DbType.Int32, 100, varclsfacturation.Id_article_f));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_article_f", DbType.Int32, 100, DBNull.Value));
                    if (varclsfacturation.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, varclsfacturation.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 200, DBNull.Value));
                    if (varclsfacturation.Designation_service != null) cmd.Parameters.Add(getParameter(cmd, "@designation_service", DbType.String, 200, varclsfacturation.Designation_service));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation_service", DbType.String, 200, DBNull.Value));
                    if (varclsfacturation.Pu.HasValue) cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 100, varclsfacturation.Pu));
                    else cmd.Parameters.Add(getParameter(cmd, "@pu", DbType.Single, 100, DBNull.Value));
                    if (varclsfacturation.Quantite.HasValue) cmd.Parameters.Add(getParameter(cmd, "@quantite", DbType.Single, 100, varclsfacturation.Quantite));
                    else cmd.Parameters.Add(getParameter(cmd, "@quantite", DbType.Single, 100, 0));
                    if (varclsfacturation.Montantpaye.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, varclsfacturation.Montantpaye));
                    else cmd.Parameters.Add(getParameter(cmd, "@montantpaye", DbType.Single, 100, 0));
                    if (varclsfacturation.Montantmituelle.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, varclsfacturation.Montantmituelle));
                    else cmd.Parameters.Add(getParameter(cmd, "@montantmituelle", DbType.Single, 100, 0));
                    if (varclsfacturation.Dette.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, varclsfacturation.Dette));
                    else cmd.Parameters.Add(getParameter(cmd, "@dette", DbType.Single, 100, 0));
                    if (varclsfacturation.Avance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 100, varclsfacturation.Avance));
                    else cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 100, 0));
                    cmd.Parameters.Add(getParameter(cmd, "@ismedicament", DbType.Boolean, 2, varclsfacturation.Ismedicament));
                    cmd.Parameters.Add(getParameter(cmd, "@ispaiementmalade", DbType.Boolean, 2, varclsfacturation.Ispaiementmalade));
                    cmd.Parameters.Add(getParameter(cmd, "@isexamen", DbType.Boolean, 2, varclsfacturation.Isexamen));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsfacturation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsfacturationmituelleSolde(int numerofacture)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE facturation  SET soldemituelle=1 WHERE numero_facture=@numero_facture ");
                    cmd.Parameters.Add(getParameter(cmd, "@numero_facture", DbType.Int32, 100, numerofacture));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsfacturationSolde(int numerofacture)
        {
            int i = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE facturation  SET solde=1 WHERE numero_facture=@numero_facture ");
                    cmd.Parameters.Add(getParameter(cmd, "@numero_facture", DbType.Int32, 100, numerofacture));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("UPDATE malade_avance SET solde=1 WHERE id_malade=(SELECT DISTINCT id_malade FROM facturation WHERE id=@numero_facture) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@numero_facture", DbType.Int32, 100, numerofacture));
                    cmd1.Transaction = transaction;
                    i = cmd1.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Erreur inattendue, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int deleteClsfacturation(clsfacturation varclsfacturation)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM facturation  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsfacturation.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsfacturation(int id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM facturation  WHERE  1=1  AND id_paiement="+id );
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSFACTURATION
        #region  CLSCRITERERESULTAT
        public clscritereresultat getClscritereresultat(object intid)
        {
            clscritereresultat varclscritereresultat = new clscritereresultat();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM critereresultat WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscritereresultat.Id = int.Parse(dr["id"].ToString());
                            varclscritereresultat.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscritereresultat;
        }
        public clscritereresultat getClscritereresultat(string designationCritere)
        {
            clscritereresultat varclscritereresultat = new clscritereresultat();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM critereresultat WHERE designation='" + designationCritere + "'";
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscritereresultat.Id = int.Parse(dr["id"].ToString());
                            varclscritereresultat.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscritereresultat;
        }


        public List<clscritereresultat> getAllClscritereresultat(string criteria)
        {
            List<clscritereresultat> lstclscritereresultat = new List<clscritereresultat>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM critereresultat  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscritereresultat varclscritereresultat = null;
                        while (dr.Read())
                        {

                            varclscritereresultat = new clscritereresultat();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscritereresultat.Id = int.Parse(dr["id"].ToString());
                            varclscritereresultat.Designation = dr["designation"].ToString();
                            lstclscritereresultat.Add(varclscritereresultat);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscritereresultat;
        }

        public List<clscritereresultat> getAllClscritereresultat()
        {
            List<clscritereresultat> lstclscritereresultat = new List<clscritereresultat>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM critereresultat ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscritereresultat varclscritereresultat = null;
                        while (dr.Read())
                        {

                            varclscritereresultat = new clscritereresultat();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscritereresultat.Id = int.Parse(dr["id"].ToString());
                            varclscritereresultat.Designation = dr["designation"].ToString();
                            lstclscritereresultat.Add(varclscritereresultat);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscritereresultat;
        }

        public int insertClscritereresultat(clscritereresultat varclscritereresultat)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO critereresultat ( designation ) VALUES (@designation  )");
                    if (varclscritereresultat.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscritereresultat.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscritereresultat(clscritereresultat varclscritereresultat)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE critereresultat  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclscritereresultat.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscritereresultat.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscritereresultat.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscritereresultat(clscritereresultat varclscritereresultat)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM critereresultat  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscritereresultat.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCRITERERESULTAT
        #region  CLSALLERGIE
        public clsallergie getClsallergie(object intid)
        {
            clsallergie varclsallergie = new clsallergie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM allergie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsallergie.Id = int.Parse(dr["id"].ToString());
                            varclsallergie.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsallergie;
        }

        public List<clsallergie> getAllClsallergie(string criteria)
        {
            List<clsallergie> lstclsallergie = new List<clsallergie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM allergie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsallergie varclsallergie = null;
                        while (dr.Read())
                        {

                            varclsallergie = new clsallergie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsallergie.Id = int.Parse(dr["id"].ToString());
                            varclsallergie.Designation = dr["designation"].ToString();
                            lstclsallergie.Add(varclsallergie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsallergie;
        }

        public List<clsallergie> getAllClsallergie()
        {
            List<clsallergie> lstclsallergie = new List<clsallergie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM allergie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsallergie varclsallergie = null;
                        while (dr.Read())
                        {

                            varclsallergie = new clsallergie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsallergie.Id = int.Parse(dr["id"].ToString());
                            varclsallergie.Designation = dr["designation"].ToString();
                            lstclsallergie.Add(varclsallergie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsallergie;
        }

        public int insertClsallergie(clsallergie varclsallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO allergie ( designation ) VALUES (@designation  )");
                    if (varclsallergie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsallergie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsallergie(clsallergie varclsallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE allergie  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsallergie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsallergie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsallergie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsallergie(clsallergie varclsallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM allergie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsallergie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSALLERGIE
        #region  CLSANTECEDENTALLERGIE
        public clsantecedentallergie getClsantecedentallergie(object intid)
        {
            clsantecedentallergie varantecedentallergie = new clsantecedentallergie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antecedentallergie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varantecedentallergie.Id = int.Parse(dr["id"].ToString());
                            varantecedentallergie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varantecedentallergie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_allergie"].ToString().Trim().Equals("")) varantecedentallergie.Id_allergie = int.Parse(dr["id_allergie"].ToString());

                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varantecedentallergie;
        }

        public List<clsantecedentallergie> getAllClsantecedentallergie(int criteria)
        {
            List<clsantecedentallergie> lstclsantecedentallergie = new List<clsantecedentallergie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT * FROM antecedentallergie  WHERE id_malade={0}",criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsantecedentallergie varantecedentallergie = null;
                        while (dr.Read())
                        {

                            varantecedentallergie = new clsantecedentallergie();
                            if (!dr["id"].ToString().Trim().Equals("")) varantecedentallergie.Id = int.Parse(dr["id"].ToString());
                            varantecedentallergie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varantecedentallergie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_allergie"].ToString().Trim().Equals("")) varantecedentallergie.Id_allergie = int.Parse(dr["id_allergie"].ToString());
                            lstclsantecedentallergie.Add(varantecedentallergie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsantecedentallergie;
        }

        public List<clsantecedentallergie> getAllClsantecedentallergie()
        {
            List<clsantecedentallergie> lstclsantecedentallergie = new List<clsantecedentallergie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antecedentallergie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsantecedentallergie varclsantecedentallergie = null;
                        while (dr.Read())
                        {

                            varclsantecedentallergie = new clsantecedentallergie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantecedentallergie.Id = int.Parse(dr["id"].ToString());
                            varclsantecedentallergie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsantecedentallergie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_allergie"].ToString().Trim().Equals("")) varclsantecedentallergie.Id_allergie = int.Parse(dr["id_allergie"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsantecedentallergie;
        }

        public int insertClsantecedentallergie(clsantecedentallergie varclsantecedentallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO antecedentallergie ( commentaire,id_allergie,id_malade ) VALUES (@commentaire,@id_allergie,@id_malade  )");
                    if (varclsantecedentallergie.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, varclsantecedentallergie.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsantecedentallergie.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_allergie", DbType.Int32, 100, varclsantecedentallergie.Id_allergie));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsantecedentallergie(clsantecedentallergie varclsantecedentallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE antecedentallergie  SET commentaire=@commentaire,id_allergie=@id_allergie, id_malade=@id_malade  WHERE 1=1  AND id=@id ");
                    if (varclsantecedentallergie.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, varclsantecedentallergie.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsantecedentallergie.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_allergie", DbType.Int32, 100, varclsantecedentallergie.Id_allergie));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsantecedentallergie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsantecedentallergie(clsantecedentallergie varclsantecedentallergie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM antecedentallergie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsantecedentallergie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSANTECEDENTALLERGIE
        #region  CLSANTECEDENTMALADIE
        public clsantecedentmaladie getClsantecedentmaladie(object intid)
        {
            clsantecedentmaladie varclsantecedentmaladie = new clsantecedentmaladie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antecedentmaladie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsantecedentmaladie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());

                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsantecedentmaladie;
        }

        public List<clsantecedentmaladie> getAllClsantecedentmaladie(int criteria)
        {
            List<clsantecedentmaladie> lstclsantecedentmaladie = new List<clsantecedentmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antecedentmaladie  WHERE id_malade={0}", criteria);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsantecedentmaladie varclsantecedentmaladie = null;
                        while (dr.Read())
                        {
                            varclsantecedentmaladie = new clsantecedentmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsantecedentmaladie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            lstclsantecedentmaladie.Add(varclsantecedentmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsantecedentmaladie;
        }

        public List<clsantecedentmaladie> getAllClsantecedentmaladie()
        {
            List<clsantecedentmaladie> lstclsantecedentmaladie = new List<clsantecedentmaladie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM antecedentmaladie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsantecedentmaladie varclsantecedentmaladie = null;
                        while (dr.Read())
                        {

                            varclsantecedentmaladie = new clsantecedentmaladie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id = int.Parse(dr["id"].ToString());
                            varclsantecedentmaladie.Commentaire = dr["commentaire"].ToString();
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsantecedentmaladie.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            lstclsantecedentmaladie.Add(varclsantecedentmaladie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsantecedentmaladie;
        }

        public int insertClsantecedentmaladie(clsantecedentmaladie varclsantecedentmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO antecedentmaladie ( commentaire,id_malade,id_maladie ) VALUES (@commentaire,@id_malade,@id_maladie)");
                    if (varclsantecedentmaladie.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, varclsantecedentmaladie.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, DBNull.Value));
                    if (varclsantecedentmaladie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsantecedentmaladie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsantecedentmaladie.Id_maladie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, varclsantecedentmaladie.Id_maladie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsantecedentmaladie(clsantecedentmaladie varclsantecedentmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE antecedentmaladie  SET commentaire=@commentaire,id_malade=@id_malade, id_maladie=@id_maladie  WHERE 1=1  AND id=@id ");
                    if (varclsantecedentmaladie.Commentaire != null) cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, varclsantecedentmaladie.Commentaire));
                    else cmd.Parameters.Add(getParameter(cmd, "@commentaire", DbType.String, 100, DBNull.Value));
                    if (varclsantecedentmaladie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsantecedentmaladie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsantecedentmaladie.Id_maladie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, varclsantecedentmaladie.Id_maladie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsantecedentmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsantecedentmaladie(clsantecedentmaladie varclsantecedentmaladie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM antecedentmaladie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsantecedentmaladie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSANTECDENTMALADIE
        #region  CLSGROUPESANGUIN
        public clsgroupesanguin getClsgroupesanguin(object intid)
        {
            clsgroupesanguin varclsgroupesanguin = new clsgroupesanguin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM groupesanguin WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupesanguin.Id = int.Parse(dr["id"].ToString());
                            varclsgroupesanguin.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsgroupesanguin;
        }

        public List<clsgroupesanguin> getAllClsgroupesanguin(string criteria)
        {
            List<clsgroupesanguin> lstclsgroupesanguin = new List<clsgroupesanguin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM groupesanguin  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsgroupesanguin varclsgroupesanguin = null;
                        while (dr.Read())
                        {

                            varclsgroupesanguin = new clsgroupesanguin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupesanguin.Id = int.Parse(dr["id"].ToString());
                            varclsgroupesanguin.Designation = dr["designation"].ToString();
                            lstclsgroupesanguin.Add(varclsgroupesanguin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsgroupesanguin;
        }

        public List<clsgroupesanguin> getAllClsgroupesanguin()
        {
            List<clsgroupesanguin> lstclsgroupesanguin = new List<clsgroupesanguin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM groupesanguin ORDER BY designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsgroupesanguin varclsgroupesanguin = null;
                        while (dr.Read())
                        {
                            varclsgroupesanguin = new clsgroupesanguin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsgroupesanguin.Id = int.Parse(dr["id"].ToString());
                            varclsgroupesanguin.Designation = dr["designation"].ToString();
                            lstclsgroupesanguin.Add(varclsgroupesanguin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsgroupesanguin;
        }

        public int insertClsgroupesanguin(clsgroupesanguin varclsgroupesanguin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO groupesanguin ( designation ) VALUES (@designation  )");
                    if (varclsgroupesanguin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsgroupesanguin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsgroupesanguin(clsgroupesanguin varclsgroupesanguin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE groupesanguin  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsgroupesanguin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, varclsgroupesanguin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsgroupesanguin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsgroupesanguin(clsgroupesanguin varclsgroupesanguin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM groupesanguin  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsgroupesanguin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSGROUPESANGUIN 
        #region  CLSTARIFCONSULTATIONGYNECOLOGIQUE
        public clstarifconsultationgynecologique getClstarifconsultationgynecologique(object intid)
        {
            clstarifconsultationgynecologique varclstarifconsultationgynecologique = new clstarifconsultationgynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationgynecologique WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationgynecologique.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifconsultationgynecologique;
        }

        public List<clstarifconsultationgynecologique> getAllClsconsultationgynecologiquetarifpaiement(int id_malade)
        {
            List<clstarifconsultationgynecologique> lstclstarifconsultationgynecologique = new List<clstarifconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossierconsultationgynecologique.id AS idDossierPrecons,tarifconsultationgynecologique.id,tarifconsultationgynecologique.designation,tarifconsultationgynecologique.montant FROM tarifconsultationgynecologique 
                    INNER JOIN dossierconsultationgynecologique ON tarifconsultationgynecologique.id=dossierconsultationgynecologique.id_tarifconsultationgynecologique 
                    INNER JOIN malade ON malade.id=dossierconsultationgynecologique.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossierconsultationgynecologique.etatpaiement='Non cloturé non payé' OR dossierconsultationgynecologique.etatpaiement='Cloturé non payé')");

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifconsultationgynecologique varclstarifconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclstarifconsultationgynecologique = new clstarifconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierPrecons"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Id_de_dossierconsultationgynecologique = int.Parse(dr["idDossierPrecons"].ToString());
                            varclstarifconsultationgynecologique.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            varclstarifconsultationgynecologique.DesignationConplete = varclstarifconsultationgynecologique.Designation + "=>" + varclstarifconsultationgynecologique.Montant + " $US";
                            lstclstarifconsultationgynecologique.Add(varclstarifconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationgynecologique;
        }

        public List<clstarifconsultationgynecologique> getAllClstarifconsultationgynecologique(string criteria)
        {
            List<clstarifconsultationgynecologique> lstclstarifconsultationgynecologique = new List<clstarifconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifconsultationgynecologique  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifconsultationgynecologique varclstarifconsultationgynecologique = null;
                        while (dr.Read())
                        {

                            varclstarifconsultationgynecologique = new clstarifconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationgynecologique.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationgynecologique.Add(varclstarifconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationgynecologique;
        }

        public List<clstarifconsultationgynecologique> getAllClstarifconsultationgynecologique()
        {
            List<clstarifconsultationgynecologique> lstclstarifconsultationgynecologique = new List<clstarifconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifconsultationgynecologique ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifconsultationgynecologique varclstarifconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclstarifconsultationgynecologique = new clstarifconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            varclstarifconsultationgynecologique.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifconsultationgynecologique.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifconsultationgynecologique.Add(varclstarifconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifconsultationgynecologique;
        }

        public int insertClstarifconsultationgynecologique(clstarifconsultationgynecologique varclstarifconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifconsultationgynecologique ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifconsultationgynecologique.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultationgynecologique.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultationgynecologique.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifconsultationgynecologique.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifconsultationgynecologique(clstarifconsultationgynecologique varclstarifconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifconsultationgynecologique  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifconsultationgynecologique.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifconsultationgynecologique.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifconsultationgynecologique.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifconsultationgynecologique.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifconsultationgynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifconsultationgynecologique(clstarifconsultationgynecologique varclstarifconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifconsultationgynecologique  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifconsultationgynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTARIFCONSULTATIONGYNECOLOGIQUE
        #region  CLSDOSSIERCONSULTATIONGYNECOLOGIQUE

        public clsdossierconsultationgynecologique getClsdossierconsultationgynecologique(object intid)
        {
            clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationgynecologique WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationgynecologique;
        }

        public clsdossierconsultationgynecologique getClsdossierconsultationgynecologique1(int ? id)
        {
            clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossierconsultationgynecologique WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationgynecologique;
        }

        public clsdossierconsultationgynecologique getClsdossierconsultationgynecologique2(object intid)
        {
            clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationgynecologique WHERE id_malade={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationgynecologique;
        }

        public List<clsdossierconsultationgynecologique> getAllClsdossierconsultationgynecologique(string criteria)
        {
            List<clsdossierconsultationgynecologique> lstclsdossierconsultationgynecologique = new List<clsdossierconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationgynecologique  WHERE 1=1";
                    sql += "  OR   etatpaiement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationgynecologique.Add(varclsdossierconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationgynecologique;
        }

        public List<clsdossierconsultationgynecologique> getAllClsdossierconsultationgynecologique2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossierconsultationgynecologique> lstclsdossierconsultationgynecologique = new List<clsdossierconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossierconsultationgynecologique.*,tarifconsultationgynecologique.montant AS prix,tarifconsultationgynecologique.designation FROM dossierconsultationgynecologique INNER JOIN tarifconsultationgynecologique ON tarifconsultationgynecologique.id=dossierconsultationgynecologique.id_tarifconsultationgynecologique WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossierconsultationgynecologique.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierconsultationgynecologique.Date.ToString().Substring(0,10);
                            lstclsdossierconsultationgynecologique.Add(varclsdossierconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationgynecologique;
        }

        public List<clsdossierconsultationgynecologique> getAllClsdossierconsultationgynecologique1(int criteria)
        {
            List<clsdossierconsultationgynecologique> lstclsdossierconsultationgynecologique = new List<clsdossierconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationgynecologique  WHERE id_malade = '" + criteria + "' ";

                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationgynecologique.Add(varclsdossierconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationgynecologique;
        }

        public List<clsdossierconsultationgynecologique> getAllClsdossierconsultationgynecologique()
        {
            List<clsdossierconsultationgynecologique> lstclsdossierconsultationgynecologique = new List<clsdossierconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationgynecologique ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationgynecologique varclsdossierconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationgynecologique = new clsdossierconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifconsultationgynecologique"].ToString().Trim().Equals("")) varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique = int.Parse(dr["id_tarifconsultationgynecologique"].ToString());
                            varclsdossierconsultationgynecologique.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationgynecologique.Add(varclsdossierconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationgynecologique;
        }

        public int insertClsdossierconsultationgynecologique(clsdossierconsultationgynecologique varclsdossierconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossierconsultationgynecologique ( date,id_malade,id_tarifconsultationgynecologique,etatpaiement,id_agent ) VALUES (@date,@id_malade,@id_tarifconsultationgynecologique,@etatpaiement,@id_agent)");
                    if (varclsdossierconsultationgynecologique.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationgynecologique.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationgynecologique", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_agent));
                    if (varclsdossierconsultationgynecologique.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierconsultationgynecologique.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationgynecologique(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossierconsultationgynecologique SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossierconsultationgynecologique SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32,100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationgynecologique(clsdossierconsultationgynecologique varclsdossierconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierconsultationgynecologique  SET date=@date,id_malade=@id_malade,id_tarifconsultationgynecologique=@id_tarifconsultationgynecologique,etatpaiement=@etatpaiement,id_agent=@id_agent  WHERE 1=1  AND id=@id ");
                    if (varclsdossierconsultationgynecologique.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationgynecologique.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationgynecologique", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_tarifconsultationgynecologique));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id_agent));
                    if (varclsdossierconsultationgynecologique.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierconsultationgynecologique.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsdossierconsultationgynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossierconsultationgynecologique(clsdossierconsultationgynecologique varclsdossierconsultationgynecologique)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementmaladiegynecologique WHERE  1=1  AND id_consultationgynecologique=(SELECT id FROM consultationgynecologique WHERE id_dossierconsultationgyneco=@id_dossierconsultationgyneco) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgyneco", DbType.Int32, 4, varclsdossierconsultationgynecologique.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM consultationgynecologique WHERE  1=1  AND id_dossierconsultationgyneco=(SELECT id FROM consultationgynecologique WHERE id_dossierconsultationgyneco=@id_dossierconsultationgyneco) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossierconsultationgyneco", DbType.Int32, 4, varclsdossierconsultationgynecologique.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossierconsultationgyneco=@id_dossierconsultationgyneco) ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossierconsultationgyneco", DbType.Int32, 4, varclsdossierconsultationgynecologique.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossierconsultationgyneco=@id_dossierconsultationgyneco ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_dossierconsultationgyneco", DbType.Int32, 4, varclsdossierconsultationgynecologique.Id));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                }

                using (IDbCommand cmd4 = conn.CreateCommand())
                {
                    cmd4.CommandText = string.Format("DELETE FROM dossierconsultationgynecologique WHERE 1=1 AND id=@id_dossierconsultationgyneco ");
                    cmd4.Parameters.Add(getParameter(cmd4, "@id_dossierconsultationgyneco", DbType.Int32, 4, varclsdossierconsultationgynecologique.Id));
                    cmd4.Transaction = transaction;
                    i4 = cmd4.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }

        #endregion CLSDOSSIERCONSULTATIONGYNECOLOGIQUE
        #region  CLSCONSULTATIONGYNECOLOGIQUE
        public clsconsultationgynecologique getClsconsultationgynecologique(object intid)
        {
            clsconsultationgynecologique varclsconsultationgynecologique = new clsconsultationgynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultationgynecologique WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["dpa"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsconsultationgynecologique;
        }

        public List<clsconsultationgynecologique> getAllClsconsultationgynecologique(string criteria)
        {
            List<clsconsultationgynecologique> lstclsconsultationgynecologique = new List<clsconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultationgynecologique  WHERE 1=1";
                    sql += "  OR   observation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationgynecologique varclsconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["dpa"].ToString());
                            lstclsconsultationgynecologique.Add(varclsconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationgynecologique;
        }

        public List<clsconsultationgynecologique> getAllClsconsultationgynecologique1(int criteria)
        {
            List<clsconsultationgynecologique> lstclsconsultationgynecologique = new List<clsconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM consultationgynecologique  WHERE id_dossierconsultationgyneco = " + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationgynecologique varclsconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["dpa"].ToString());
                            lstclsconsultationgynecologique.Add(varclsconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationgynecologique;
        }

        public List<clsconsultationgynecologique> getAllClsconsultationgynecologique2(int criteria)
        {
            List<clsconsultationgynecologique> lstclsconsultationgynecologique = new List<clsconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT consultationgynecologique.id,dossierconsultationgynecologique.id as idDossier, consultationgynecologique.ddr, consultationgynecologique.dpa, consultationgynecologique.date_consultation, consultationgynecologique.examengyneco, consultationgynecologique.id_critere_echo,consultationgynecologique.diagnostic FROM  dossierconsultationgynecologique 
                    INNER JOIN consultationgynecologique ON dossierconsultationgynecologique.id = consultationgynecologique.id_dossierconsultationgyneco  WHERE dossierconsultationgynecologique.id_malade= " + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationgynecologique varclsconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["dpa"].ToString());
                            lstclsconsultationgynecologique.Add(varclsconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationgynecologique;
        }

        public List<clsconsultationgynecologique> getAllClsconsultationgynecologique3(int id_malade)
        {
            List<clsconsultationgynecologique> lstclsconsultationgynecologique = new List<clsconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT consultationgynecologique.* FROM consultationgynecologique
                    INNER JOIN dossierconsultationgynecologique ON dossierconsultationgynecologique.id = consultationgynecologique.id_dossierconsultationgyneco
                    INNER JOIN malade ON malade.id = dossierconsultationgynecologique.id_malade where malade.id=" + id_malade + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationgynecologique varclsconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["ddr"].ToString());
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            lstclsconsultationgynecologique.Add(varclsconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationgynecologique;
        }

        public List<clsconsultationgynecologique> getAllClsconsultationgynecologique()
        {
            List<clsconsultationgynecologique> lstclsconsultationgynecologique = new List<clsconsultationgynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM consultationgynecologique ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsconsultationgynecologique varclsconsultationgynecologique = null;
                        while (dr.Read())
                        {
                            varclsconsultationgynecologique = new clsconsultationgynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_dossierconsultationgyneco"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_dossierconsultationgynecologique = int.Parse(dr["id_dossierconsultationgyneco"].ToString());
                            if (!dr["id_critere_echo"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Id_critereecho = int.Parse(dr["id_critere_echo"].ToString());
                            varclsconsultationgynecologique.Examengyneco = dr["examengyneco"].ToString();
                            varclsconsultationgynecologique.Diagnostic = dr["diagnostic"].ToString();
                            if (!dr["dpa"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Dpa = DateTime.Parse(dr["dpa"].ToString());
                            if (!dr["date_consultation"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Date_consultation = DateTime.Parse(dr["date_consultation"].ToString());
                            if (!dr["ddr"].ToString().Trim().Equals("")) varclsconsultationgynecologique.Ddr = DateTime.Parse(dr["dpa"].ToString());
                            lstclsconsultationgynecologique.Add(varclsconsultationgynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsconsultationgynecologique;
        }

        public int insertClsconsultationgynecologique(clsconsultationgynecologique varclsconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO consultationgynecologique( ddr,dpa, id_critere_echo, id_dossierconsultationgyneco,examengyneco,date_consultation,diagnostic) VALUES (@ddr,@dpa, @id_critere_echo, @id_dossierconsultationgyneco,@examengyneco,@date_consultation,@diagnostic)");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgyneco", DbType.Int32, 100, varclsconsultationgynecologique.Id_dossierconsultationgynecologique));
                    if (varclsconsultationgynecologique.Id_critereecho.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_critere_echo", DbType.Int32, 100, varclsconsultationgynecologique.Id_critereecho));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_critere_echo", DbType.Int32, 100, DBNull.Value));
                    if (varclsconsultationgynecologique.Examengyneco != null) cmd.Parameters.Add(getParameter(cmd, "@examengyneco", DbType.String, 3000, varclsconsultationgynecologique.Examengyneco));
                    else cmd.Parameters.Add(getParameter(cmd, "@examengyneco", DbType.String, 3000, DBNull.Value));
                    if (varclsconsultationgynecologique.Diagnostic != null) cmd.Parameters.Add(getParameter(cmd, "@diagnostic", DbType.String, 3000, varclsconsultationgynecologique.Diagnostic));
                    else cmd.Parameters.Add(getParameter(cmd, "@diagnostic", DbType.String, 3000, DBNull.Value));
                    if (varclsconsultationgynecologique.Ddr.HasValue) cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.DateTime, 8, varclsconsultationgynecologique.Ddr));
                    else cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.DateTime, 8, DateTime.Today));
                    if (varclsconsultationgynecologique.Dpa.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dpa", DbType.DateTime, 8, varclsconsultationgynecologique.Dpa));
                    else cmd.Parameters.Add(getParameter(cmd, "@dpa", DbType.DateTime, 8, DateTime.Today));
                    if (varclsconsultationgynecologique.Date_consultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_consultation", DbType.DateTime, 8, varclsconsultationgynecologique.Date_consultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_consultation", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsconsultationgynecologique(clsconsultationgynecologique varclsconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE consultationgynecologique  SET id_dossierconsultationgyneco=@id_dossierconsultationgyneco,id_critere_echo=@id_critere_echo,examengyneco=@examengyneco,ddr=@ddr,dpa=@dpa,date_consultation=@date_consultation ,diagnostic=@diagnostic WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationgyneco", DbType.Int32, 100, varclsconsultationgynecologique.Id_dossierconsultationgynecologique));
                    if (varclsconsultationgynecologique.Id_critereecho.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_critere_echo", DbType.Int32, 100, varclsconsultationgynecologique.Id_critereecho));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_critere_echo", DbType.Int32, 100, DBNull.Value));
                    if (varclsconsultationgynecologique.Examengyneco != null) cmd.Parameters.Add(getParameter(cmd, "@examengyneco", DbType.String, 3000, varclsconsultationgynecologique.Examengyneco));
                    else cmd.Parameters.Add(getParameter(cmd, "@examengyneco", DbType.String, 3000, DBNull.Value));
                    if (varclsconsultationgynecologique.Ddr.HasValue) cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.DateTime, 8, varclsconsultationgynecologique.Ddr));                
                    else cmd.Parameters.Add(getParameter(cmd, "@ddr", DbType.DateTime, 8, DateTime.Today));
                    if (varclsconsultationgynecologique.Diagnostic != null) cmd.Parameters.Add(getParameter(cmd, "@diagnostic", DbType.String, 3000, varclsconsultationgynecologique.Diagnostic));
                    else cmd.Parameters.Add(getParameter(cmd, "@diagnostic", DbType.String, 3000, DBNull.Value));
                    if (varclsconsultationgynecologique.Dpa.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dpa", DbType.DateTime, 8, varclsconsultationgynecologique.Dpa));
                    else cmd.Parameters.Add(getParameter(cmd, "@dpa", DbType.DateTime, 8, DateTime.Today));
                    if (varclsconsultationgynecologique.Date_consultation.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date_consultation", DbType.DateTime, 8, varclsconsultationgynecologique.Date_consultation));
                    else cmd.Parameters.Add(getParameter(cmd, "@date_consultation", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsconsultationgynecologique.Id));

                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsconsultationgynecologique(clsconsultationgynecologique varclsconsultationgynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM consultationgynecologique  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsconsultationgynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCONSULTATIONGYNECOLOGIQUE 
        #region  CLSCRITEREECHOGRAPHIE

        public clscriterechographie getClscriterechographie(object intid)
        {
            clscriterechographie varclscriterechographie = new clscriterechographie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM criterechographie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclscriterechographie.Id = int.Parse(dr["id"].ToString());
                            varclscriterechographie.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscriterechographie;
        }

        public List<clscriterechographie> getAllClscriterechographie(string criteria)
        {
            List<clscriterechographie> lstclscriterechographie = new List<clscriterechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM criterechographie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscriterechographie varclscriterechographie = null;
                        while (dr.Read())
                        {

                            varclscriterechographie = new clscriterechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscriterechographie.Id = int.Parse(dr["id"].ToString());
                            varclscriterechographie.Designation = dr["designation"].ToString();
                            lstclscriterechographie.Add(varclscriterechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscriterechographie;
        }

        public List<clscriterechographie> getAllClscriterechographie()
        {
            List<clscriterechographie> lstclscriterechographie = new List<clscriterechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM criterechographie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscriterechographie varclscriterechographie = null;
                        while (dr.Read())
                        {
                            varclscriterechographie = new clscriterechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscriterechographie.Id = int.Parse(dr["id"].ToString());
                            varclscriterechographie.Designation = dr["designation"].ToString();
                            lstclscriterechographie.Add(varclscriterechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclscriterechographie;
        }

        public int insertClscriterechographie(clscriterechographie varclscriterechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO criterechographie ( designation ) VALUES (@designation  )");
                    if (varclscriterechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscriterechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscriterechographie(clscriterechographie varclscriterechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE criterechographie  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclscriterechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscriterechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscriterechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscriterechographie(clscriterechographie varclscriterechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM criterechographie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclscriterechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCRITEREECHOGRAPHIE
        #region  CLSMALADIEGYNECOLOGIQUE
        public clsmaladiegynecologique getClsmaladiegynecologique(object intid)
        {
            clsmaladiegynecologique varclsmaladiegynecologique = new clsmaladiegynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladiegynecologique WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            varclsmaladiegynecologique.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmaladiegynecologique;
        }

        public int getClsmaladiegynecologique1(string designation)
        {
            int idMaladie = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT id FROM maladiegynecologique WHERE designation=@designation";
                    cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, designation));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read()) idMaladie = int.Parse(dr["id"].ToString());
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return idMaladie;
        }

        public List<clsmaladiegynecologique> getAllClsmaladiegynecologique(string criteria)
        {
            List<clsmaladiegynecologique> lstclsmaladiegynecologique = new List<clsmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladiegynecologique  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladiegynecologique varclsmaladiegynecologique = null;
                        while (dr.Read())
                        {

                            varclsmaladiegynecologique = new clsmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            varclsmaladiegynecologique.Designation = dr["designation"].ToString();
                            lstclsmaladiegynecologique.Add(varclsmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladiegynecologique;
        }

//        public List<clsmaladiegynecologique> getAllClsmaladiegynecologique1(int criteria)
//        {
//            List<clsmaladie> lstclsmaladiegynecologique = new List<clsmaladiegynecologique>();
//            try
//            {
//                if (conn.State != ConnectionState.Open) conn.Open();
//                using (IDbCommand cmd = conn.CreateCommand())
//                {
//                    string sql = @"SELECT maladiegynecologique.id,maladiegynecologique.designation FROM maladiegynecologique  
//             INNER JOIN passationexamen ON maladie.id=passationexamen.id_maladie 
//             INNER JOIN malade ON maladiegynecologique.id=passationexamen.id_malade WHERE malade.id=" + criteria;
//                    cmd.CommandText = string.Format(sql);
//                    using (IDataReader dr = cmd.ExecuteReader())
//                    {
//                        clsmaladiegynecologique varclsmaladiegynecologique = null;
//                        while (dr.Read())
//                        {
//                            varclsmaladiegynecologique = new clsmaladiegynecologique();
//                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
//                            varmaladiegynecologique.Designation = dr["designation"].ToString();
//                            lstclsmaladie.Add(varclsmaladie);
//                        }
//                    }
//                }
//                conn.Close();
//            }
//            catch (Exception exc)
//            {
//                conn.Close();
//                throw new Exception(exc.Message);
//            }
//            return lstclsmaladie;
//        }

        public List<clsmaladiegynecologique> getAllClsmaladiegynecologique2(int criteria)
        {
            List<clsmaladiegynecologique> lstclsmaladiegynecologique = new List<clsmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM maladiegynecologique  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmaladiegynecologique varclsmaladiegynecologique = null;
                        while (dr.Read())
                        {
                            varclsmaladiegynecologique = new clsmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            varclsmaladiegynecologique.Designation = dr["designation"].ToString();
                            lstclsmaladiegynecologique.Add(varclsmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladiegynecologique;
        }

        public List<clsmaladiegynecologique> getAllClsmaladiegynecologique()
        {
            List<clsmaladiegynecologique> lstclsmaladiegynecologique = new List<clsmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM maladiegynecologique ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmaladiegynecologique varclsmaladiegynecologique = null;
                        while (dr.Read())
                        {

                            varclsmaladiegynecologique = new clsmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            varclsmaladiegynecologique.Designation = dr["designation"].ToString();
                            lstclsmaladiegynecologique.Add(varclsmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmaladiegynecologique;
        }

        public int insertClsmaladiegynecologique(clsmaladiegynecologique varclsmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO maladiegynecologique ( designation ) VALUES (@designation  )");
                    if (varclsmaladiegynecologique.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsmaladiegynecologique.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmaladiegynecologique(clsmaladiegynecologique varclsmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE maladiegynecologique  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsmaladiegynecologique.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsmaladiegynecologique.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmaladiegynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmaladiegynecologique(clsmaladiegynecologique varclsmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM maladiegynecologique  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmaladiegynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSMALADIEGYNECOLOGIQUE
        #region  CLSMOUVEMENTMALADIE
        public clsmouvementmaladiegynecologique getClsmouvementmaladiegynecologique(object intid)
        {
            clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique = new clsmouvementmaladiegynecologique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementmaladiegynecologique WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_consultationgynecologique"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_consultationgynecologique = int.Parse(dr["id_consultationgynecologique"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Date = DateTime.Parse(dr["date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmouvementmaladiegynecologique;
        }

        public List<clsmouvementmaladiegynecologique> getAllClsmouvementmaladiegynecologique(string criteria)
        {
            List<clsmouvementmaladiegynecologique> lstclsmouvementmaladiegynecologique = new List<clsmouvementmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM mouvementmaladiegynecologique  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladiegynecologique = new clsmouvementmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_consultationgynecologique"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_consultationgynecologique = int.Parse(dr["id_consultationgynecologique"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladiegynecologique.Add(varclsmouvementmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladiegynecologique;
        }

        public List<clsmouvementmaladiegynecologique> getAllClsmouvementmaladiegynecologique()
        {
            List<clsmouvementmaladiegynecologique> lstclsmouvementmaladiegynecologique = new List<clsmouvementmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM mouvementmaladiegynecologique ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladiegynecologique = new clsmouvementmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_consultationgynecologique"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_consultationgynecologique = int.Parse(dr["id_consultationgynecologique"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladiegynecologique.Add(varclsmouvementmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladiegynecologique;
        }

        public List<clsmouvementmaladiegynecologique> getAllClsmouvementmaladiegynecologique2(int criteria)
        {
            List<clsmouvementmaladiegynecologique> lstclsmouvementmaladiegynecologique = new List<clsmouvementmaladiegynecologique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @" SELECT mouvementmaladiegynecologique.date, mouvementmaladiegynecologique.id_consultationgynecologique, mouvementmaladiegynecologique.id_maladie, mouvementmaladiegynecologique.id
                    FROM mouvementmaladiegynecologique 
                                    INNER JOIN consultationgynecologique ON mouvementmaladiegynecologique.id_consultationgynecologique = consultationgynecologique.id where consultationgynecologique.id=" + criteria + "";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique = null;
                        while (dr.Read())
                        {

                            varclsmouvementmaladiegynecologique = new clsmouvementmaladiegynecologique();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id = int.Parse(dr["id"].ToString());
                            if (!dr["id_consultationgynecologique"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_consultationgynecologique = int.Parse(dr["id_consultationgynecologique"].ToString());
                            if (!dr["id_maladie"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Id_maladie = int.Parse(dr["id_maladie"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmouvementmaladiegynecologique.Date = DateTime.Parse(dr["date"].ToString());
                            lstclsmouvementmaladiegynecologique.Add(varclsmouvementmaladiegynecologique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmouvementmaladiegynecologique;
        }

        public int insertClsmouvementmaladiegynecologique(clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO mouvementmaladiegynecologique ( id_consultationgynecologique,id_maladie,date ) VALUES (@id_consultationgynecologique,@id_maladie,@date  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationgynecologique", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id_consultationgynecologique));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id_maladie));
                    if (varclsmouvementmaladiegynecologique.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementmaladiegynecologique.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmouvementmaladiegynecologique(clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE mouvementmaladiegynecologique  SET id_consultationgynecologique=@id_consultationgynecologique,id_maladie=@id_maladie,date=@date  WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_consultationgynecologique", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id_consultationgynecologique));
                    cmd.Parameters.Add(getParameter(cmd, "@id_maladie", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id_maladie));
                    if (varclsmouvementmaladiegynecologique.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmouvementmaladiegynecologique.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmouvementmaladiegynecologique(clsmouvementmaladiegynecologique varclsmouvementmaladiegynecologique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM mouvementmaladiegynecologique  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsmouvementmaladiegynecologique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion  
        #region  CLSDOSSIERCONSULTATIONPOSTSCOLAIRE
        public clsdossierconsultationpostscolaire getClsdossierconsultationpostnatale(object intid)
        {
            clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationpostnatal WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationpostnatale;
        }

        public clsdossierconsultationpostscolaire getClsdossierconsultationpostnatale1(int ? id)
        {
            clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossierconsultationpostnatal WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationpostnatale;
        }

        public List<clsdossierconsultationpostscolaire> getAllClsdossierconsultationpostnatale(string criteria)
        {
            List<clsdossierconsultationpostscolaire> lstclsdossierconsultationpostnatale = new List<clsdossierconsultationpostscolaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationpostnatal  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationpostnatale.Add(varclsdossierconsultationpostnatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationpostnatale;
        }

        public List<clsdossierconsultationpostscolaire> getAllClsdossierconsultationpostnatale2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossierconsultationpostscolaire> lstclsdossierconsultationpostnatale = new List<clsdossierconsultationpostscolaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossierconsultationpostnatal.*,tarifconsultationpostnatal.designation,tarifconsultationpostnatal.montant AS prix  FROM dossierconsultationpostnatal INNER JOIN tarifconsultationpostnatal ON tarifconsultationpostnatal.id=dossierconsultationpostnatal.id_tarifconsultationpostnatal WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossierconsultationpostnatale.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierconsultationpostnatale.Date.ToString().Substring(0, 10);
                            lstclsdossierconsultationpostnatale.Add(varclsdossierconsultationpostnatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationpostnatale;
        }

        public List<clsdossierconsultationpostscolaire> getAllClsdossierconsultationpostnatale3(int criteria)
        {
            List<clsdossierconsultationpostscolaire> lstclsdossierconsultationpostnatale = new List<clsdossierconsultationpostscolaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierconsultationpostnatal  WHERE id_malade = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationpostnatale.Add(varclsdossierconsultationpostnatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationpostnatale;
        }

        public List<clsdossierconsultationpostscolaire> getAllClsdossierconsultationpostnatale()
        {
            List<clsdossierconsultationpostscolaire> lstclsdossierconsultationpostnatale = new List<clsdossierconsultationpostscolaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierconsultationpostnatal ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationpostnatale = new clsdossierconsultationpostscolaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifconsultationpostnatal"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale = int.Parse(dr["id_tarifconsultationpostnatal"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierconsultationpostnatale.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationpostnatale.Add(varclsdossierconsultationpostnatale);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationpostnatale;
        }

        public int insertClsdossierconsultationpostnatale(clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossierconsultationpostnatal ( date,id_malade,id_agent,id_tarifconsultationpostnatal,etatpaiement ) VALUES (@date,@id_malade,@id_agent,@id_tarifconsultationpostnatal,@etatpaiement  )");
                    if (varclsdossierconsultationpostnatale.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationpostnatale.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsdossierconsultationpostnatale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationpostnatal", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationpostnatal", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierconsultationpostnatale.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationpostnatale(clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierconsultationpostnatal  SET date=@date,id_malade=@id_malade,id_agent=@id_agent,id_tarifconsultationpostnatal=@id_tarifconsultationpostnatal,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossierconsultationpostnatale.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationpostnatale.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationpostnatal", DbType.Int32, 100, varclsdossierconsultationpostnatale.Id_tarifconsultationpostnatale));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifconsultationpostnatal", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierconsultationpostnatale.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierconsultationpostnatale.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationpostnatale(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossierconsultationpostnatal SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossierconsultationpostnatal SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossierconsultationpostnatale(clsdossierconsultationpostscolaire varclsdossierconsultationpostnatale)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM vaccination WHERE  1=1  AND id_maladeenconsultationpostnatal=(SELECT maladeenconsultationpostnatal.id FROM maladeenconsultationpostnatal INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=maladeenconsultationpostnatal.id_dossierconsultationpostnatal WHERE dossierconsultationpostnatal.id=@id_dossierconsultationpostnatal) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM prise_vitamine WHERE  1=1  AND id_malade=(SELECT malade.id FROM malade INNER JOIN maladeenconsultationpostnatal ON malade.id=maladeenconsultationpostnatal.id_malade  INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=maladeenconsultationpostnatal.id_dossierconsultationpostnatal WHERE dossierconsultationpostnatal.id=@id_dossierconsultationpostnatal) ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM attention_speciale WHERE  1=1  AND id_malade=(SELECT malade.id FROM malade INNER JOIN maladeenconsultationpostnatal ON malade.id=maladeenconsultationpostnatal.id_malade  INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=maladeenconsultationpostnatal.id_dossierconsultationpostnatal WHERE dossierconsultationpostnatal.id=@id_dossierconsultationpostnatal) ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                }

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM rendezvous WHERE  1=1  AND id_maladeenconsultationpostnatal=(SELECT maladeenconsultationpostnatal.id FROM maladeenconsultationpostnatal INNER JOIN dossierconsultationpostnatal ON dossierconsultationpostnatal.id=maladeenconsultationpostnatal.id_dossierconsultationpostnatal WHERE dossierconsultationpostnatal.id=@id_dossierconsultationpostnatal) ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd3.Transaction = transaction;
                    i3 = cmd3.ExecuteNonQuery();
                }

                using (IDbCommand cmd4 = conn.CreateCommand())
                {
                    cmd4.CommandText = string.Format("DELETE FROM suivicroissance WHERE  1=1  AND id_maladeenconsultationpostnatal=(SELECT id FROM maladeenconsultationpostnatal WHERE id_dossierconsultationpostnatal=@id_dossierconsultationpostnatal) ");
                    cmd4.Parameters.Add(getParameter(cmd4, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd4.Transaction = transaction;
                    i4 = cmd4.ExecuteNonQuery();
                }

                using (IDbCommand cmd5 = conn.CreateCommand())
                {
                    cmd5.CommandText = string.Format("DELETE FROM maladeenconsultationpostnatal WHERE  1=1  AND id_dossierconsultationpostnatal=@id_dossierconsultationpostnatal ");
                    cmd5.Parameters.Add(getParameter(cmd5, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd5.Transaction = transaction;
                    i5 = cmd5.ExecuteNonQuery();
                }

                using (IDbCommand cmd6 = conn.CreateCommand())
                {
                    cmd6.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossierconsultationpostnatal=@id_dossierconsultationpostnatal) ");
                    cmd6.Parameters.Add(getParameter(cmd6, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd6.Transaction = transaction;
                    i6 = cmd6.ExecuteNonQuery();
                }

                using (IDbCommand cmd7 = conn.CreateCommand())
                {
                    cmd7.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossierconsultationpostnatal=@id_dossierconsultationpostnatal ");
                    cmd7.Parameters.Add(getParameter(cmd7, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd7.Transaction = transaction;
                    i7 = cmd7.ExecuteNonQuery();
                }

                using (IDbCommand cmd8 = conn.CreateCommand())
                {
                    cmd8.CommandText = string.Format("DELETE FROM dossierconsultationpostnatal WHERE 1=1 AND id=@id_dossierconsultationpostnatal ");
                    cmd8.Parameters.Add(getParameter(cmd8, "@id_dossierconsultationpostnatal", DbType.Int32, 4, varclsdossierconsultationpostnatale.Id));
                    cmd8.Transaction = transaction;
                    i8 = cmd8.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }

        #endregion
        #region  CLSDOSSIERACCOUCHEMENT

        public clsdossierconsultationaccouchement getClsdossierconsultationaccouchement(object intid)
        {
            clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossieraccouchement WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationaccouchement;
        }

        public clsdossierconsultationaccouchement getClsdossierconsultationaccouchement1(int? id)
        {
            clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossieraccouchement WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationaccouchement;
        }

        public clsdossierconsultationaccouchement getClsdossierconsultationaccouchement2(object intid)
        {
            clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossieraccouchement WHERE id_malade={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierconsultationaccouchement;
        }

        public List<clsdossierconsultationaccouchement> getAllClsdossierconsultationaccouchement(string criteria)
        {
            List<clsdossierconsultationaccouchement> lstclsdossierconsultationaccouchement = new List<clsdossierconsultationaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieraccouchement  WHERE 1=1";
                    sql += "  OR   etatpaiement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationaccouchement.Add(varclsdossierconsultationaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationaccouchement;
        }

        public List<clsdossierconsultationaccouchement> getAllClsdossierconsultationaccouchement2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossierconsultationaccouchement> lstclsdossierconsultationaccouchement = new List<clsdossierconsultationaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossieraccouchement.*,typeaccouchement.designation,typeaccouchement.prix  FROM dossieraccouchement INNER JOIN typeaccouchement ON typeaccouchement.id=dossieraccouchement.id_typeaccouchement WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossierconsultationaccouchement.DesignationComplete = dr["etatpaiement"].ToString();
                            varclsdossierconsultationaccouchement.DesignationComplete1 = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierconsultationaccouchement.Date.ToString().Substring(0,10);
                            lstclsdossierconsultationaccouchement.Add(varclsdossierconsultationaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationaccouchement;
        }

        public List<clsdossierconsultationaccouchement> getAllClsdossierconsultationaccouchement1(int criteria)
        {
            List<clsdossierconsultationaccouchement> lstclsdossierconsultationaccouchement = new List<clsdossierconsultationaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieraccouchement  WHERE id_malade = '" + criteria + "' ";

                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = null;
                        while (dr.Read())
                        {

                            varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationaccouchement.Add(varclsdossierconsultationaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationaccouchement;
        }

        public List<clsdossierconsultationaccouchement> getAllClsdossierconsultationaccouchement()
        {
            List<clsdossierconsultationaccouchement> lstclsdossierconsultationaccouchement = new List<clsdossierconsultationaccouchement>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossieraccouchement ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierconsultationaccouchement varclsdossierconsultationaccouchement = null;
                        while (dr.Read())
                        {
                            varclsdossierconsultationaccouchement = new clsdossierconsultationaccouchement();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_typeaccouchement"].ToString().Trim().Equals("")) varclsdossierconsultationaccouchement.Id_typeaccouchement = int.Parse(dr["id_typeaccouchement"].ToString());
                            varclsdossierconsultationaccouchement.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierconsultationaccouchement.Add(varclsdossierconsultationaccouchement);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierconsultationaccouchement;
        }

        public int insertClsdossierconsultationaccouchement(clsdossierconsultationaccouchement varclsdossierconsultationaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossieraccouchement ( date,id_malade,id_typeaccouchement,etatpaiement,id_agent ) VALUES (@date,@id_malade,@id_typeaccouchement,@etatpaiement,@id_agent)");
                    if (varclsdossierconsultationaccouchement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationaccouchement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeaccouchement", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_typeaccouchement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_agent));
                    if (varclsdossierconsultationaccouchement.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierconsultationaccouchement.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationaccouchement(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossieraccouchement SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossieraccouchement SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierconsultationaccouchement(clsdossierconsultationaccouchement varclsdossierconsultationaccouchement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossieraccouchement  SET date=@date,id_malade=@id_malade,id_typeaccouchement=@id_typeaccouchement,etatpaiement=@etatpaiement,id_agent=@id_agent  WHERE 1=1  AND id=@id ");
                    if (varclsdossierconsultationaccouchement.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierconsultationaccouchement.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_malade));
                    cmd.Parameters.Add(getParameter(cmd, "@id_typeaccouchement", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_typeaccouchement));
                    cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id_agent));
                    if (varclsdossierconsultationaccouchement.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsdossierconsultationaccouchement.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsdossierconsultationaccouchement.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossierconsultationaccouchement(clsdossierconsultationaccouchement varclsdossierconsultationaccouchement)
        {
            int i = 0, i1 = 0, i2 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_accouchement=@id_accouchement) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_accouchement", DbType.Int32, 4, varclsdossierconsultationaccouchement.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_accouchement=@id_accouchement ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_accouchement", DbType.Int32, 4, varclsdossierconsultationaccouchement.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM dossieraccouchement WHERE 1=1 AND id=@id_accouchement ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_accouchement", DbType.Int32, 4, varclsdossierconsultationaccouchement.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i2;
        }

        #endregion CLSACCOUCHEMENT
        #region  CLSECHOGRAPHIE
        public clsechographie getClsechographie(object intid)
        {
            clsechographie varclsechographie = new clsechographie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM criterechographie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsechographie.Id = int.Parse(dr["id"].ToString());
                            varclsechographie.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsechographie;
        }

        public int getClsechographie1(string designation)
        {
            int idMaladie = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT id FROM criterechographie WHERE designation=@designation";
                    cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, designation));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read()) idMaladie = int.Parse(dr["id"].ToString());
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return idMaladie;
        }

        public List<clsechographie> getAllClsechographie(string criteria)
        {
            List<clsechographie> lstclsechographie = new List<clsechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM criterechographie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsechographie varclsechographie = null;
                        while (dr.Read())
                        {

                            varclsechographie = new clsechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsechographie.Id = int.Parse(dr["id"].ToString());
                            varclsechographie.Designation = dr["designation"].ToString();
                            lstclsechographie.Add(varclsechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsechographie;
        }

        public List<clsechographie> getAllClsechographie2(int criteria)
        {
            List<clsechographie> lstclsechographie = new List<clsechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM criterechographie  WHERE id=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsechographie varclsechographie = null;
                        while (dr.Read())
                        {
                            varclsechographie = new clsechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsechographie.Id = int.Parse(dr["id"].ToString());
                            varclsechographie.Designation = dr["designation"].ToString();
                            lstclsechographie.Add(varclsechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsechographie;
        }

        public List<clsechographie> getAllClsechographie()
        {
            List<clsechographie> lstclsechographie = new List<clsechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM criterechographie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsechographie varclsechographie = null;
                        while (dr.Read())
                        {

                            varclsechographie = new clsechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsechographie.Id = int.Parse(dr["id"].ToString());
                            varclsechographie.Designation = dr["designation"].ToString();
                            lstclsechographie.Add(varclsechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsechographie;
        }

        public int insertClsechographie(clsechographie varclsechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO criterechographie ( designation ) VALUES (@designation  )");
                    if (varclsechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsechographie(clsechographie varclsechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE criterechographie  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, varclsechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 20, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsechographie(clsechographie varclsechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM criterechographie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclsechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSECHOGRAPHIE
        #region  CLSDOSSIERSOIN
        public clsdossiersoin getClsdossiersoin(object intid)
        {
            clsdossiersoin varclsdossiersoin = new clsdossiersoin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossiersoin WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossiersoin;
        }

        public clsdossiersoin getClsdossiersoin1(int? id)
        {
            clsdossiersoin varclsdossiersoin = new clsdossiersoin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossiersoin WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossiersoin;
        }

        public List<clsdossiersoin> getAllClsdossiersoin(string criteria)
        {
            List<clsdossiersoin> lstclsdossiersoin = new List<clsdossiersoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossiersoin  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossiersoin varclsdossiersoin = null;
                        while (dr.Read())
                        {
                            varclsdossiersoin = new clsdossiersoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossiersoin.Add(varclsdossiersoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiersoin;
        }

        public List<clsdossiersoin> getAllClsdossiersoin2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossiersoin> lstclsdossiersoin = new List<clsdossiersoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossiersoin.*,tarifsoin.designation,tarifsoin.montant AS prix  FROM dossiersoin INNER JOIN tarifsoin ON tarifsoin.id=dossiersoin.id_tarifsoin WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossiersoin varclsdossiersoin = null;
                        while (dr.Read())
                        {
                            varclsdossiersoin = new clsdossiersoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossiersoin.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossiersoin.Date.ToString().Substring(0, 10);
                            lstclsdossiersoin.Add(varclsdossiersoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiersoin;
        }

        public List<clsdossiersoin> getAllClsdossiersoin3(int criteria)
        {
            List<clsdossiersoin> lstclsdossiersoin = new List<clsdossiersoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossiersoin  WHERE id_malade = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossiersoin varclsdossiersoin = null;
                        while (dr.Read())
                        {

                            varclsdossiersoin = new clsdossiersoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossiersoin.Add(varclsdossiersoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiersoin;
        }

        public List<clsdossiersoin> getAllClsdossiersoin()
        {
            List<clsdossiersoin> lstclsdossiersoin = new List<clsdossiersoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossiersoin ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossiersoin varclsdossiersoin = null;
                        while (dr.Read())
                        {

                            varclsdossiersoin = new clsdossiersoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiersoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiersoin.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiersoin.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiersoin.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifsoin"].ToString().Trim().Equals("")) varclsdossiersoin.Id_tarifsoin = int.Parse(dr["id_tarifsoin"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiersoin.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossiersoin.Add(varclsdossiersoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiersoin;
        }

        public int insertClsdossiersoin(clsdossiersoin varclsdossiersoin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossiersoin ( date,id_malade,id_agent,id_tarifsoin,etatpaiement ) VALUES (@date,@id_malade,@id_agent,@id_tarifsoin,@etatpaiement)");
                    if (varclsdossiersoin.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossiersoin.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsdossiersoin.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossiersoin.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossiersoin.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Id_tarifsoin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifsoin", DbType.Int32, 100, varclsdossiersoin.Id_tarifsoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifsoin", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossiersoin.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossiersoin(clsdossiersoin varclsdossiersoin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossiersoin  SET date=@date,id_malade=@id_malade,id_agent=@id_agent,id_tarifsoin=@id_tarifsoin,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossiersoin.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossiersoin.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdossiersoin.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossiersoin.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossiersoin.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Id_tarifsoin.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifsoin", DbType.Int32, 100, varclsdossiersoin.Id_tarifsoin));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifsoin", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiersoin.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossiersoin.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossiersoin(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossiersoin SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossiersoin SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossiersoin(clsdossiersoin varclsdossiersoin)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossiersoin=@id_dossiersoin) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossiersoin", DbType.Int32, 4, varclsdossiersoin.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossiersoin=@id_dossiersoin ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossiersoin", DbType.Int32, 4, varclsdossiersoin.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM dossiersoin WHERE 1=1 AND id=@id_dossiersoin ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossiersoin", DbType.Int32, 4, varclsdossiersoin.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }

        #endregion
        #region  CLSTARIFSOIN
        public clstarifsoin getClstarifsoin(object intid)
        {
            clstarifsoin varclstarifsoin = new clstarifsoin();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifsoin WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifsoin.Id = int.Parse(dr["id"].ToString());
                            varclstarifsoin.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifsoin.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifsoin;
        }

        public List<clstarifsoin> getAllClstarifsointarifpaiement(int id_malade)
        {
            List<clstarifsoin> lstclstarifsoin = new List<clstarifsoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossiersoin.id AS idDossierSoin,tarifsoin.id,tarifsoin.designation,tarifsoin.montant FROM tarifsoin 
                    INNER JOIN dossiersoin ON tarifsoin.id=dossiersoin.id_tarifsoin
                    INNER JOIN malade ON malade.id=dossiersoin.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossiersoin.etatpaiement='Non cloturé non payé' OR dossiersoin.etatpaiement='Cloturé non payé') ORDER BY tarifsoin.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifsoin varclstarifsoin = null;
                        while (dr.Read())
                        {
                            varclstarifsoin = new clstarifsoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifsoin.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierSoin"].ToString().Trim().Equals("")) varclstarifsoin.Id_de_dossiersoin = int.Parse(dr["idDossierSoin"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifsoin.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclstarifsoin.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["montant"].ToString()), 2) + " $US";
                            lstclstarifsoin.Add(varclstarifsoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifsoin;
        }

        public List<clstarifsoin> getAllClstarifsoin(string criteria)
        {
            List<clstarifsoin> lstclstarifsoin = new List<clstarifsoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifsoin  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifsoin varclstarifsoin = null;
                        while (dr.Read())
                        {

                            varclstarifsoin = new clstarifsoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifsoin.Id = int.Parse(dr["id"].ToString());
                            varclstarifsoin.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifsoin.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifsoin.Add(varclstarifsoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifsoin;
        }

        public List<clstarifsoin> getAllClstarifsoin()
        {
            List<clstarifsoin> lstclstarifsoin = new List<clstarifsoin>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifsoin ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifsoin varclstarifsoin = null;
                        while (dr.Read())
                        {

                            varclstarifsoin = new clstarifsoin();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifsoin.Id = int.Parse(dr["id"].ToString());
                            varclstarifsoin.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifsoin.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifsoin.Add(varclstarifsoin);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifsoin;
        }

        public int insertClstarifsoin(clstarifsoin varclstarifsoin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifsoin ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifsoin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifsoin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifsoin.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifsoin.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifsoin(clstarifsoin varclstarifsoin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifsoin  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifsoin.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifsoin.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifsoin.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifsoin.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifsoin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifsoin(clstarifsoin varclstarifsoin)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifsoin  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifsoin.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSTARIFSOIN
        #region  CLSDOSSIERECHOGRAPHIE
        public clsdossierechographie getClsdossierechographie(object intid)
        {
            clsdossierechographie varclsdossierechographie = new clsdossierechographie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierechographie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierechographie;
        }

        public clsdossierechographie getClsdossierechographie1(int? id)
        {
            clsdossierechographie varclsdossierechographie = new clsdossierechographie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossierechographie WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossierechographie;
        }

        public List<clsdossierechographie> getAllClsdossierechographie(string criteria)
        {
            List<clsdossierechographie> lstclsdossierechographie = new List<clsdossierechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierechographie  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierechographie varclsdossierechographie = null;
                        while (dr.Read())
                        {

                            varclsdossierechographie = new clsdossierechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierechographie.Add(varclsdossierechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierechographie;
        }

        public List<clsdossierechographie> getAllClsdossierechographie2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossierechographie> lstclsdossierechographie = new List<clsdossierechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossierechographie.*,tarifechographie.designation,tarifechographie.montant AS prix  FROM dossierechographie INNER JOIN tarifechographie ON tarifechographie.id=dossierechographie.id_tarifechographie WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossierechographie varclsdossierechographie = null;
                        while (dr.Read())
                        {
                            varclsdossierechographie = new clsdossierechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossierechographie.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossierechographie.Date.ToString().Substring(0, 10);
                            lstclsdossierechographie.Add(varclsdossierechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierechographie;
        }

        public List<clsdossierechographie> getAllClsdossierechographie3(int criteria)
        {
            List<clsdossierechographie> lstclsdossierechographie = new List<clsdossierechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossierechographie  WHERE id_malade = '" + criteria + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierechographie varclsdossierechographie = null;
                        while (dr.Read())
                        {

                            varclsdossierechographie = new clsdossierechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierechographie.Add(varclsdossierechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierechographie;
        }

        public List<clsdossierechographie> getAllClsdossierechographie()
        {
            List<clsdossierechographie> lstclsdossierechographie = new List<clsdossierechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossierechographie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdossierechographie varclsdossierechographie = null;
                        while (dr.Read())
                        {

                            varclsdossierechographie = new clsdossierechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossierechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossierechographie.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossierechographie.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossierechographie.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifechographie"].ToString().Trim().Equals("")) varclsdossierechographie.Id_tarifechographie = int.Parse(dr["id_tarifechographie"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossierechographie.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossierechographie.Add(varclsdossierechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossierechographie;
        }

        public int insertClsdossierechographie(clsdossierechographie varclsdossierechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossierechographie ( date,id_malade,id_agent,id_tarifechographie,etatpaiement ) VALUES (@date,@id_malade,@id_agent,@id_tarifechographie,@etatpaiement  )");
                    if (varclsdossierechographie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierechographie.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsdossierechographie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierechographie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierechographie.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Id_tarifechographie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifechographie", DbType.Int32, 100, varclsdossierechographie.Id_tarifechographie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifechographie", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierechographie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierechographie(clsdossierechographie varclsdossierechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossierechographie  SET date=@date,id_malade=@id_malade,id_agent=@id_agent,id_tarifechographie=@id_tarifechographie,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossierechographie.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossierechographie.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdossierechographie.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossierechographie.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossierechographie.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Id_tarifechographie.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifechographie", DbType.Int32, 100, varclsdossierechographie.Id_tarifechographie));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifechographie", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossierechographie.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossierechographie.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossierechographie(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossierechographie SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossierechographie SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }


        public int deleteClsdossierechographie(clsdossierechographie varclsdossierechographie)
        {
            int i = 0, i1 = 0, i2 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossierechographie=@id_dossierechographie) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierechographie", DbType.Int32, 4, varclsdossierechographie.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossierechographie=@id_dossierechographie ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossierechographie", DbType.Int32, 4, varclsdossierechographie.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM dossierechographie WHERE 1=1 AND id=@id_dossierechographie ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossierechographie", DbType.Int32, 4, varclsdossierechographie.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i2;
        }

        #endregion
        #region  CLSTARIFECHOGRAPHIE
        public clstarifechographie getClstarifechographie(object intid)
        {
            clstarifechographie varclstarifechographie = new clstarifechographie();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifechographie WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifechographie.Id = int.Parse(dr["id"].ToString());
                            varclstarifechographie.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifechographie.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifechographie;
        }

        public List<clstarifechographie> getAllCltarifechographietarifpaiement(int id_malade)
        {
            List<clstarifechographie> lstclstarifechographie = new List<clstarifechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossierechographie.id AS idDossierEchographie,tarifechographie.id,tarifechographie.designation,tarifechographie.montant FROM tarifechographie 
                    INNER JOIN dossierechographie ON tarifechographie.id=dossierechographie.id_tarifechographie
                    INNER JOIN malade ON malade.id=dossierechographie.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossierechographie.etatpaiement='Non cloturé non payé' OR dossierechographie.etatpaiement='Cloturé non payé') ORDER BY tarifechographie.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifechographie varclstarifechographie = null;
                        while (dr.Read())
                        {
                            varclstarifechographie = new clstarifechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifechographie.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierEchographie"].ToString().Trim().Equals("")) varclstarifechographie.Id_de_dossierechographie = int.Parse(dr["idDossierEchographie"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifechographie.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclstarifechographie.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["montant"].ToString()), 2) + " $US";
                            lstclstarifechographie.Add(varclstarifechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifechographie;
        }

        public List<clstarifechographie> getAllClstarifechographie(string criteria)
        {
            List<clstarifechographie> lstclstarifechographie = new List<clstarifechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifechographie  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifechographie varclstarifechographie = null;
                        while (dr.Read())
                        {

                            varclstarifechographie = new clstarifechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifechographie.Id = int.Parse(dr["id"].ToString());
                            varclstarifechographie.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifechographie.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifechographie.Add(varclstarifechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifechographie;
        }

        public List<clstarifechographie> getAllClstarifechographie()
        {
            List<clstarifechographie> lstclstarifechographie = new List<clstarifechographie>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifechographie ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifechographie varclstarifechographie = null;
                        while (dr.Read())
                        {
                            varclstarifechographie = new clstarifechographie();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifechographie.Id = int.Parse(dr["id"].ToString());
                            varclstarifechographie.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifechographie.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifechographie.Add(varclstarifechographie);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifechographie;
        }

        public int insertClstarifechographie(clstarifechographie varclstarifechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifechographie ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifechographie.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifechographie.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifechographie(clstarifechographie varclstarifechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifechographie  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifechographie.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifechographie.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifechographie.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, varclstarifechographie.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifechographie(clstarifechographie varclstarifechographie)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifechographie  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, varclstarifechographie.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTARIFECHOGRAPHIE 
        #region  CLSDOSSIERNURSING
        public clsdossiernursing getClsdossiernursing(object intid)
        {
            clsdossiernursing varclsdossiernursing = new clsdossiernursing();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossiernursing WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiernursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiernursing.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiernursing.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiernursing.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifnursing"].ToString().Trim().Equals("")) varclsdossiernursing.Id_tarifnursing = int.Parse(dr["id_tarifnursing"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiernursing.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossiernursing;
        }

        public clsdossiernursing getClsdossiernursing1(int? id)
        {
            clsdossiernursing varclsdossiernursing = new clsdossiernursing();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossiernursing WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {

                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiernursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiernursing.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiernursing.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiernursing.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifnursing"].ToString().Trim().Equals("")) varclsdossiernursing.Id_tarifnursing = int.Parse(dr["id_tarifnursing"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiernursing.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossiernursing;
        }

        public List<clsdossiernursing> getAllClsdossiernursing(string criteria)
        {
            List<clsdossiernursing> lstclsdossiernursing = new List<clsdossiernursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossiernursing  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossiernursing varclsdossiernursing = null;
                        while (dr.Read())
                        {
                            varclsdossiernursing = new clsdossiernursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiernursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiernursing.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiernursing.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiernursing.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifnursing"].ToString().Trim().Equals("")) varclsdossiernursing.Id_tarifnursing = int.Parse(dr["id_tarifnursing"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiernursing.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossiernursing.Add(varclsdossiernursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiernursing;
        }

        public List<clsdossiernursing> getAllClsdossiernursing2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossiernursing> lstclsdossiernursing = new List<clsdossiernursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT dossiernursing.*,tarifnursing.designation,tarifnursing.montant AS prix  FROM dossiernursing INNER JOIN tarifnursing ON tarifnursing.id=dossiernursing.id_tarifnursing WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossiernursing varclsdossiernursing = null;
                        while (dr.Read())
                        {
                            varclsdossiernursing = new clsdossiernursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiernursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiernursing.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiernursing.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiernursing.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifnursing"].ToString().Trim().Equals("")) varclsdossiernursing.Id_tarifnursing = int.Parse(dr["id_tarifnursing"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiernursing.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsdossiernursing.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["prix"].ToString()), 2).ToString() + "$US=>" + varclsdossiernursing.Date.ToString().Substring(0, 10);
                            lstclsdossiernursing.Add(varclsdossiernursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiernursing;
        }

        public List<clsdossiernursing> getAllClsdossiernursing()
        {
            List<clsdossiernursing> lstclsdossiernursing = new List<clsdossiernursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossiernursing ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossiernursing varclsdossiernursing = null;
                        while (dr.Read())
                        {
                            varclsdossiernursing = new clsdossiernursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossiernursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossiernursing.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossiernursing.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_agent"].ToString().Trim().Equals("")) varclsdossiernursing.Id_agent = int.Parse(dr["id_agent"].ToString());
                            if (!dr["id_tarifnursing"].ToString().Trim().Equals("")) varclsdossiernursing.Id_tarifnursing = int.Parse(dr["id_tarifnursing"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossiernursing.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossiernursing.Add(varclsdossiernursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossiernursing;
        }

        public int insertClsdossiernursing(clsdossiernursing varclsdossiernursing)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossiernursing ( date,id_malade,id_agent,id_tarifnursing,etatpaiement ) VALUES (@date,@id_malade,@id_agent,@id_tarifnursing,@etatpaiement)");
                    if (varclsdossiernursing.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossiernursing.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsdossiernursing.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossiernursing.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossiernursing.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Id_tarifnursing.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifnursing", DbType.Int32, 100, varclsdossiernursing.Id_tarifnursing));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifnursing", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossiernursing.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossiernursing(clsdossiernursing varclsdossiernursing)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossiernursing  SET date=@date,id_malade=@id_malade,id_agent=@id_agent,id_tarifnursing=@id_tarifnursing,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossiernursing.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsdossiernursing.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsdossiernursing.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossiernursing.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Id_agent.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, varclsdossiernursing.Id_agent));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_agent", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Id_tarifnursing.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifnursing", DbType.Int32, 100, varclsdossiernursing.Id_tarifnursing));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifnursing", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossiernursing.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossiernursing.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdossiernursing(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    if (etatpaiement == "Non cloturé payé")
                    {
                        cmd.CommandText = "UPDATE dossiernursing SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    else
                    {
                        cmd.CommandText = "UPDATE dossiernursing SET etatpaiement='Cloturé non payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    }
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossiernursing(clsdossiernursing varclsdossiernursing)
        {
            int i = 0, i1 = 0, i2 = 0, i3 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM article_paye WHERE 1=1 AND id_paiement=(SELECT id FROM paiement WHERE id_dossiernursing=@id_dossiernursing) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossiernursing", DbType.Int32, 4, varclsdossiernursing.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM paiement WHERE 1=1 AND id_dossiernursing=@id_dossiernursing ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossiernursing", DbType.Int32, 4, varclsdossiernursing.Id));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                }

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("DELETE FROM dossiernursing WHERE 1=1 AND id=@id_dossiernursing ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossiernursing", DbType.Int32, 4, varclsdossiernursing.Id));
                    cmd2.Transaction = transaction;
                    i2 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i3;
        }

        #endregion
        #region  CLSTARIFNURSING
        public clstarifnursing getClstarifnursing(object intid)
        {
            clstarifnursing varclstarifnursing = new clstarifnursing();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifnursing WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifnursing.Id = int.Parse(dr["id"].ToString());
                            varclstarifnursing.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifnursing.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifnursing;
        }

        public List<clstarifnursing> getAllClstarifnursingtarifpaiement(int id_malade)
        {
            List<clstarifnursing> lstclstarifnursing = new List<clstarifnursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT dossiernursing.id AS idDossierNursing,tarifnursing.id,tarifnursing.designation,tarifnursing.montant FROM tarifnursing 
                    INNER JOIN dossiernursing ON tarifnursing.id=dossiernursing.id_tarifnursing
                    INNER JOIN malade ON malade.id=dossiernursing.id_malade 
                    WHERE malade.id=" + id_malade + " AND (dossiernursing.etatpaiement='Non cloturé non payé' OR dossiernursing.etatpaiement='Cloturé non payé') ORDER BY tarifnursing.designation ASC");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifnursing varclstarifnursing = null;
                        while (dr.Read())
                        {
                            varclstarifnursing = new clstarifnursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifnursing.Id = int.Parse(dr["id"].ToString());
                            if (!dr["idDossierNursing"].ToString().Trim().Equals("")) varclstarifnursing.Id_de_dossiernursing = int.Parse(dr["idDossierNursing"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifnursing.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            varclstarifnursing.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["montant"].ToString()), 2) + " $US";
                            lstclstarifnursing.Add(varclstarifnursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifnursing;
        }

        public List<clstarifnursing> getAllClstarifnursing(string criteria)
        {
            List<clstarifnursing> lstclstarifsoin = new List<clstarifnursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifnursing  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifnursing varclstarifnursing = null;
                        while (dr.Read())
                        {

                            varclstarifnursing = new clstarifnursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifnursing.Id = int.Parse(dr["id"].ToString());
                            varclstarifnursing.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifnursing.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifsoin.Add(varclstarifnursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifsoin;
        }

        public List<clstarifnursing> getAllClstarifnursing()
        {
            List<clstarifnursing> lstclstarifnursing = new List<clstarifnursing>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifnursing ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clstarifnursing varclstarifnursing = null;
                        while (dr.Read())
                        {

                            varclstarifnursing = new clstarifnursing();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifnursing.Id = int.Parse(dr["id"].ToString());
                            varclstarifnursing.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifnursing.Montant = Math.Round(double.Parse(dr["montant"].ToString()),2);
                            lstclstarifnursing.Add(varclstarifnursing);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifnursing;
        }

        public int insertClstarifnursing(clstarifnursing varclstarifnursing)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifnursing ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifnursing.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifnursing.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifnursing.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifnursing.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifnursing(clstarifnursing varclstarifnursing)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifnursing  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifnursing.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, varclstarifnursing.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 1000, DBNull.Value));
                    if (varclstarifnursing.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifnursing.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifnursing.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifnursing(clstarifnursing varclstarifnursing)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifnursing  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifnursing.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSTARIFNURSING
        #region  CLSPROVINCE
        public clsprovince getClsprovince(object intid)
        {
            clsprovince varclsprovince = new clsprovince();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM province WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprovince.Id = int.Parse(dr["id"].ToString());
                            varclsprovince.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsprovince;
        }

        public List<clsprovince> getAllClsprovince(string criteria)
        {
            List<clsprovince> lstclsprovince = new List<clsprovince>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM province  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprovince varclsprovince = null;
                        while (dr.Read())
                        {

                            varclsprovince = new clsprovince();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprovince.Id = int.Parse(dr["id"].ToString());
                            varclsprovince.Designation = dr["designation"].ToString();
                            lstclsprovince.Add(varclsprovince);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprovince;
        }

        public List<clsprovince> getAllClsprovince()
        {
            List<clsprovince> lstclsprovince = new List<clsprovince>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM province ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsprovince varclsprovince = null;
                        while (dr.Read())
                        {
                            varclsprovince = new clsprovince();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsprovince.Id = int.Parse(dr["id"].ToString());
                            varclsprovince.Designation = dr["designation"].ToString();
                            lstclsprovince.Add(varclsprovince);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsprovince;
        }

        public int insertClsprovince(clsprovince varclsprovince)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO province ( designation ) VALUES (@designation  )");
                    if (varclsprovince.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsprovince.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsprovince(clsprovince varclsprovince)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE province  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsprovince.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsprovince.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprovince.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsprovince(clsprovince varclsprovince)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM province  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsprovince.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSPROVINCE
        #region  CLSDISTRICTVILLE
        public clsdistrictville getClsdistrictville(object intid)
        {
            clsdistrictville varclsdistrictville = new clsdistrictville();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM districtville WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdistrictville.Id = int.Parse(dr["id"].ToString());
                            varclsdistrictville.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdistrictville;
        }

        public List<clsdistrictville> getAllClsdistrictville(string criteria)
        {
            List<clsdistrictville> lstclsdistrictville = new List<clsdistrictville>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM districtville  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsdistrictville varclsdistrictville = null;
                        while (dr.Read())
                        {

                            varclsdistrictville = new clsdistrictville();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdistrictville.Id = int.Parse(dr["id"].ToString());
                            varclsdistrictville.Designation = dr["designation"].ToString();
                            lstclsdistrictville.Add(varclsdistrictville);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdistrictville;
        }

        public List<clsdistrictville> getAllClsdistrictville()
        {
            List<clsdistrictville> lstclsdistrictville = new List<clsdistrictville>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM districtville ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdistrictville varclsdistrictville = null;
                        while (dr.Read())
                        {
                            varclsdistrictville = new clsdistrictville();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdistrictville.Id = int.Parse(dr["id"].ToString());
                            varclsdistrictville.Designation = dr["designation"].ToString();
                            lstclsdistrictville.Add(varclsdistrictville);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdistrictville;
        }

        public int insertClsdistrictville(clsdistrictville varclsdistrictville)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO districtville ( designation ) VALUES (@designation  )");
                    if (varclsdistrictville.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsdistrictville.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsdistrictville(clsdistrictville varclsdistrictville)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE districtville  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsdistrictville.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsdistrictville.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdistrictville.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdistrictville(clsdistrictville varclsdistrictville)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM districtville  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdistrictville.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSDISTRICTVILLE
        #region  CLSCOLLECTIVITEQUARTIER
        public clscollectivitequartier getClscollectivitequartier(object intid)
        {
            clscollectivitequartier varclscollectivitequartier = new clscollectivitequartier();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM collectivitequartier WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclscollectivitequartier.Id = int.Parse(dr["id"].ToString());
                            varclscollectivitequartier.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclscollectivitequartier;
        }

        public List<clscollectivitequartier> getAllClscollectivitequartier(string criteria)
        {
            List<clscollectivitequartier> lscollectivitequartier = new List<clscollectivitequartier>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM collectivitequartier  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clscollectivitequartier varclscollectivitequartier = null;
                        while (dr.Read())
                        {

                            varclscollectivitequartier = new clscollectivitequartier();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscollectivitequartier.Id = int.Parse(dr["id"].ToString());
                            varclscollectivitequartier.Designation = dr["designation"].ToString();
                            lscollectivitequartier.Add(varclscollectivitequartier);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lscollectivitequartier;
        }

        public List<clscollectivitequartier> getAllClscollectivitequartier()
        {
            List<clscollectivitequartier> lstcollectivitequartier = new List<clscollectivitequartier>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM collectivitequartier ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clscollectivitequartier varclscollectivitequartier = null;
                        while (dr.Read())
                        {
                            varclscollectivitequartier = new clscollectivitequartier();
                            if (!dr["id"].ToString().Trim().Equals("")) varclscollectivitequartier.Id = int.Parse(dr["id"].ToString());
                            varclscollectivitequartier.Designation = dr["designation"].ToString();
                            lstcollectivitequartier.Add(varclscollectivitequartier);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstcollectivitequartier;
        }

        public int insertClscollectivitequartier(clscollectivitequartier varclscollectivitequartier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO collectivitequartier ( designation ) VALUES (@designation  )");
                    if (varclscollectivitequartier.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscollectivitequartier.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClscollectivitequartier(clscollectivitequartier varclscollectivitequartier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE collectivitequartier  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclscollectivitequartier.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclscollectivitequartier.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscollectivitequartier.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClscollectivitequartier(clscollectivitequartier varclscollectivitequartier)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM collectivitequartier  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclscollectivitequartier.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSCOLLECTIVITEQUARTIER
        #region  CLSTERRITOIRECOMMUNE
        public clsterritoirecommune getClsterritoirecommune(object intid)
        {
            clsterritoirecommune varclsterritoirecommune = new clsterritoirecommune();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM territoirecommune WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsterritoirecommune.Id = int.Parse(dr["id"].ToString());
                            varclsterritoirecommune.Designation = dr["designation"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsterritoirecommune;
        }

        public List<clsterritoirecommune> getAllClsterritoirecommune(string criteria)
        {
            List<clsterritoirecommune> lstterritoirecommune = new List<clsterritoirecommune>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM territoirecommune  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {

                        clsterritoirecommune varclsterritoirecommune = null;
                        while (dr.Read())
                        {

                            varclsterritoirecommune = new clsterritoirecommune();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsterritoirecommune.Id = int.Parse(dr["id"].ToString());
                            varclsterritoirecommune.Designation = dr["designation"].ToString();
                            lstterritoirecommune.Add(varclsterritoirecommune);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstterritoirecommune;
        }

        public List<clsterritoirecommune> getAllClsterritoirecommune()
        {
            List<clsterritoirecommune> lstclsterritoirecommune = new List<clsterritoirecommune>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM territoirecommune ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsterritoirecommune varclsdistrictville = null;
                        while (dr.Read())
                        {
                            varclsdistrictville = new clsterritoirecommune();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdistrictville.Id = int.Parse(dr["id"].ToString());
                            varclsdistrictville.Designation = dr["designation"].ToString();
                            lstclsterritoirecommune.Add(varclsdistrictville);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsterritoirecommune;
        }

        public int insertClsterritoirecommune(clsterritoirecommune varclsterritoirecommune)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO territoirecommune ( designation ) VALUES (@designation  )");
                    if (varclsterritoirecommune.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsterritoirecommune.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsterritoirecommune(clsterritoirecommune varclsterritoirecommune)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE territoirecommune  SET designation=@designation  WHERE 1=1  AND id=@id ");
                    if (varclsterritoirecommune.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclsterritoirecommune.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsterritoirecommune.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsterritoirecommune(clsterritoirecommune varclsterritoirecommune)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM territoirecommune  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsterritoirecommune.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSTERRITOIRECOMMUNE
        #region  CLSAPTITUDEPHYSIQUE
        public clsaptitudephysique getClsaptitudephysique(object intid)//Avec Id de la personne comme pramètre
        {
            clsaptitudephysique varclsaptitudephysique = new clsaptitudephysique();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,aptitudephysique.id AS idApt,aptitudephysique.id_province,aptitudephysique.id_districtville,aptitudephysique.id_territoirecommune,aptitudephysique.id_collectivitequartier,aptitudephysique.id_personne,aptitudephysique.age,aptitudephysique.taille,aptitudephysique.poid,
                    aptitudephysique.perimetrethoracique,aptitudephysique.quotientvervaeck,aptitudephysique.indicepigment,aptitudephysique.remarque,aptitudephysique.dateexamen FROM personne
                    INNER JOIN aptitudephysique ON personne.id=aptitudephysique.id_personne 
                    INNER JOIN province ON province.id=aptitudephysique.id_province
                    INNER JOIN districtville ON districtville.id=aptitudephysique.id_districtville
                    INNER JOIN territoirecommune ON territoirecommune.id=aptitudephysique.id_territoirecommune  
                    INNER JOIN collectivitequartier ON collectivitequartier.id=aptitudephysique.id_collectivitequartier WHERE aptitudephysique.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //Aptitude
                            if (!dr["idApt"].ToString().Trim().Equals("")) varclsaptitudephysique.Id = int.Parse(dr["idApt"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_province"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_province = int.Parse(dr["id_province"].ToString());
                            if (!dr["id_districtville"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_districtville = int.Parse(dr["id_districtville"].ToString());
                            if (!dr["id_territoirecommune"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_territoirecommune = int.Parse(dr["id_territoirecommune"].ToString());
                            if (!dr["id_collectivitequartier"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_collectivitequartier = int.Parse(dr["id_collectivitequartier"].ToString());
                            if (!dr["age"].ToString().Trim().Equals("")) varclsaptitudephysique.Age = int.Parse(dr["age"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsaptitudephysique.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsaptitudephysique.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["perimetrethoracique"].ToString().Trim().Equals("")) varclsaptitudephysique.Perimetrethoracique = Math.Round(double.Parse(dr["perimetrethoracique"].ToString()),2);
                            if (!dr["quotientvervaeck"].ToString().Trim().Equals("")) varclsaptitudephysique.Quotientvervaeck = Math.Round(double.Parse(dr["quotientvervaeck"].ToString()),2);
                            if (!dr["indicepigment"].ToString().Trim().Equals("")) varclsaptitudephysique.Indicepigment = Math.Round(double.Parse(dr["indicepigment"].ToString()), 2);
                            if (!dr["dateexamen"].ToString().Trim().Equals("")) varclsaptitudephysique.Dateexamen = DateTime.Parse(dr["dateexamen"].ToString());
                            varclsaptitudephysique.Remarque = dr["remarque"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaptitudephysique.IdPers = int.Parse(dr["id"].ToString());
                            varclsaptitudephysique.Nom = dr["nom"].ToString();
                            varclsaptitudephysique.Postnom = dr["postnom"].ToString();
                            varclsaptitudephysique.Prenom = dr["prenom"].ToString();
                            varclsaptitudephysique.Sexe = dr["sexe"].ToString();
                            varclsaptitudephysique.Etatcivil = dr["etatcivil"].ToString();
                            varclsaptitudephysique.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsaptitudephysique.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsaptitudephysique.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsaptitudephysique.Photo = (Byte[])dr["photo"];
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsaptitudephysique;
        }

        public List<clsaptitudephysique> getAllClsaptitudephysique(string criteria)
        {
            List<clsaptitudephysique> lstaptitudephysique = new List<clsaptitudephysique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT personne.id,personne.nom,personne.postnom,personne.prenom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,aptitudephysique.id AS idApt,aptitudephysique.id_province,aptitudephysique.id_districtville,aptitudephysique.id_territoirecommune,aptitudephysique.id_collectivitequartier,aptitudephysique.id_personne,aptitudephysique.age,aptitudephysique.taille,aptitudephysique.poid,
                    aptitudephysique.perimetrethoracique,aptitudephysique.quotientvervaeck,aptitudephysique.indicepigment,aptitudephysique.remarque,aptitudephysique.dateexamen FROM personne
                    INNER JOIN aptitudephysique ON personne.id=aptitudephysique.id_personne 
                    INNER JOIN province ON province.id=aptitudephysique.id_province
                    INNER JOIN districtville ON districtville.id=aptitudephysique.id_districtville
                    INNER JOIN territoirecommune ON territoirecommune.id=aptitudephysique.id_territoirecommune  
                    INNER JOIN collectivitequartier ON collectivitequartier.id=aptitudephysique.id_collectivitequartier  WHERE ";
                    sql += "       aptitudephysique.remarque LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.nom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.postnom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.prenom LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.sexe LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.etatcivil LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.telephone LIKE '%" + criteria + "%'";
                    sql += "  OR   personne.adresse LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaptitudephysique varclsaptitudephysique = null;
                        while (dr.Read())
                        {
                            varclsaptitudephysique = new clsaptitudephysique();
                            //Aptitude
                            if (!dr["idApt"].ToString().Trim().Equals("")) varclsaptitudephysique.Id = int.Parse(dr["idApt"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_province"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_province = int.Parse(dr["id_province"].ToString());
                            if (!dr["id_districtville"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_districtville = int.Parse(dr["id_districtville"].ToString());
                            if (!dr["id_territoirecommune"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_territoirecommune = int.Parse(dr["id_territoirecommune"].ToString());
                            if (!dr["id_collectivitequartier"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_collectivitequartier = int.Parse(dr["id_collectivitequartier"].ToString());
                            if (!dr["age"].ToString().Trim().Equals("")) varclsaptitudephysique.Age = int.Parse(dr["age"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsaptitudephysique.Taille = Math.Round(double.Parse(dr["taille"].ToString()),2);
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsaptitudephysique.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["perimetrethoracique"].ToString().Trim().Equals("")) varclsaptitudephysique.Perimetrethoracique = Math.Round(double.Parse(dr["perimetrethoracique"].ToString()),2);
                            if (!dr["quotientvervaeck"].ToString().Trim().Equals("")) varclsaptitudephysique.Quotientvervaeck = Math.Round(double.Parse(dr["quotientvervaeck"].ToString()),2);
                            if (!dr["indicepigment"].ToString().Trim().Equals("")) varclsaptitudephysique.Indicepigment = Math.Round(double.Parse(dr["indicepigment"].ToString()), 2);
                            if (!dr["dateexamen"].ToString().Trim().Equals("")) varclsaptitudephysique.Dateexamen = DateTime.Parse(dr["dateexamen"].ToString());
                            varclsaptitudephysique.Remarque = dr["remarque"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaptitudephysique.IdPers = int.Parse(dr["id"].ToString());
                            varclsaptitudephysique.Nom = dr["nom"].ToString();
                            varclsaptitudephysique.Postnom = dr["postnom"].ToString();
                            varclsaptitudephysique.Prenom = dr["prenom"].ToString();
                            varclsaptitudephysique.Sexe = dr["sexe"].ToString();
                            varclsaptitudephysique.Etatcivil = dr["etatcivil"].ToString();
                            varclsaptitudephysique.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsaptitudephysique.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsaptitudephysique.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsaptitudephysique.Photo = (Byte[])dr["photo"];

                            lstaptitudephysique.Add(varclsaptitudephysique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstaptitudephysique;
        }

        public List<clsaptitudephysique> getAllClsaptitudephysique()
        {
            List<clsaptitudephysique> lstaptitudephysique = new List<clsaptitudephysique>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,aptitudephysique.id AS idApt,aptitudephysique.id_province,aptitudephysique.id_districtville,aptitudephysique.id_territoirecommune,aptitudephysique.id_collectivitequartier,aptitudephysique.id_personne,aptitudephysique.age,aptitudephysique.taille,aptitudephysique.poid,
                    aptitudephysique.perimetrethoracique,aptitudephysique.quotientvervaeck,aptitudephysique.indicepigment,aptitudephysique.remarque,aptitudephysique.dateexamen FROM personne
                    INNER JOIN aptitudephysique ON personne.id=aptitudephysique.id_personne 
                    INNER JOIN province ON province.id=aptitudephysique.id_province
                    INNER JOIN districtville ON districtville.id=aptitudephysique.id_districtville
                    INNER JOIN territoirecommune ON territoirecommune.id=aptitudephysique.id_territoirecommune  
                    INNER JOIN collectivitequartier ON collectivitequartier.id=aptitudephysique.id_collectivitequartier ORDER BY personne.nom");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsaptitudephysique varclsaptitudephysique = null;
                        while (dr.Read())
                        {
                            //Malade
                            varclsaptitudephysique = new clsaptitudephysique();
                            if (!dr["idApt"].ToString().Trim().Equals("")) varclsaptitudephysique.Id = int.Parse(dr["idApt"].ToString());
                            if (!dr["id_personne"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_personne = int.Parse(dr["id_personne"].ToString());
                            if (!dr["id_province"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_province = int.Parse(dr["id_province"].ToString());
                            if (!dr["id_districtville"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_districtville = int.Parse(dr["id_districtville"].ToString());
                            if (!dr["id_territoirecommune"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_territoirecommune = int.Parse(dr["id_territoirecommune"].ToString());
                            if (!dr["id_collectivitequartier"].ToString().Trim().Equals("")) varclsaptitudephysique.Id_collectivitequartier = int.Parse(dr["id_collectivitequartier"].ToString());
                            if (!dr["age"].ToString().Trim().Equals("")) varclsaptitudephysique.Age = int.Parse(dr["age"].ToString());
                            if (!dr["taille"].ToString().Trim().Equals("")) varclsaptitudephysique.Taille = Math.Round(double.Parse(dr["taille"].ToString()), 2);
                            if (!dr["poid"].ToString().Trim().Equals("")) varclsaptitudephysique.Poid = Math.Round(double.Parse(dr["poid"].ToString()),2);
                            if (!dr["perimetrethoracique"].ToString().Trim().Equals("")) varclsaptitudephysique.Perimetrethoracique = Math.Round(double.Parse(dr["perimetrethoracique"].ToString()),2);
                            if (!dr["quotientvervaeck"].ToString().Trim().Equals("")) varclsaptitudephysique.Quotientvervaeck = Math.Round(double.Parse(dr["quotientvervaeck"].ToString()),2);
                            if (!dr["indicepigment"].ToString().Trim().Equals("")) varclsaptitudephysique.Indicepigment = Math.Round(double.Parse(dr["indicepigment"].ToString()),2);
                            if (!dr["dateexamen"].ToString().Trim().Equals("")) varclsaptitudephysique.Dateexamen = DateTime.Parse(dr["dateexamen"].ToString());
                            varclsaptitudephysique.Remarque = dr["remarque"].ToString();

                            //Personne
                            if (!dr["id"].ToString().Trim().Equals("")) varclsaptitudephysique.IdPers = int.Parse(dr["id"].ToString());
                            varclsaptitudephysique.Nom = dr["nom"].ToString();
                            //varclsaptitudephysique.Postnom = dr["postnom"].ToString();
                            //varclsaptitudephysique.Prenom = dr["prenom"].ToString();
                            varclsaptitudephysique.Sexe = dr["sexe"].ToString();
                            varclsaptitudephysique.Etatcivil = dr["etatcivil"].ToString();
                            varclsaptitudephysique.Adresse = dr["adresse"].ToString();
                            if (!dr["datenaissance"].ToString().Trim().Equals("")) varclsaptitudephysique.Datenaissance = DateTime.Parse(dr["datenaissance"].ToString());
                            varclsaptitudephysique.Telephone = dr["telephone"].ToString();
                            if (!dr["photo"].ToString().Trim().Equals("")) varclsaptitudephysique.Photo = (Byte[])dr["photo"];
                            lstaptitudephysique.Add(varclsaptitudephysique);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstaptitudephysique;
        }

        public DataTable getAllClsaptitudephysiqueDt(int id_personne)
        {
            DataTable lstclsaptitudephysique = new DataTable();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT personne.id,isnull(personne.nom,'') + ' ' + isnull(personne.postnom,'') + ' ' + isnull(personne.prenom,'') AS nom,ISNULL(personne.nom,'') + ' '+ ISNULL(personne.postnom,'') + ' ' + ISNULL(personne.prenom,'') AS Nom_complet,personne.sexe,personne.etatcivil,personne.datenaissance,personne.telephone,personne.adresse,personne.photo,aptitudephysique.id AS idApt,aptitudephysique.id_province,aptitudephysique.id_districtville,aptitudephysique.id_territoirecommune,aptitudephysique.id_collectivitequartier,aptitudephysique.id_personne,aptitudephysique.age,ROUND(aptitudephysique.taille,2) AS taille,ROUND(aptitudephysique.poid,2) AS poid,
                    ROUND(aptitudephysique.perimetrethoracique,2) AS perimetrethoracique,ROUND(aptitudephysique.quotientvervaeck,2) AS quotientvervaeck,ROUND(aptitudephysique.indicepigment,2) AS indicepigment,aptitudephysique.remarque,aptitudephysique.dateexamen FROM personne
                    INNER JOIN aptitudephysique ON personne.id=aptitudephysique.id_personne 
                    INNER JOIN province ON province.id=aptitudephysique.id_province
                    INNER JOIN districtville ON districtville.id=aptitudephysique.id_districtville
                    INNER JOIN territoirecommune ON territoirecommune.id=aptitudephysique.id_territoirecommune  
                    INNER JOIN collectivitequartier ON collectivitequartier.id=aptitudephysique.id_collectivitequartier WHERE personne.id=" + id_personne + "ORDER BY personne.nom ASC");

                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        lstclsaptitudephysique.Load(dr);
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsaptitudephysique;
        }

        public int insertClsaptitudephysique(clsaptitudephysique varclsaptitudephysique)
        {
            int i = 0;
            try
            {
                varclsaptitudephysique.Id_personne = clsDoTraitement.Identifiant_Personne;
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT ISNULL((year(GETDATE())-year(personne.datenaissance)),0) AS age_pers FROM personne WHERE id={0}", varclsaptitudephysique.Id_personne);
                    using (IDataReader dr = cmd1.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsaptitudephysique.Age = int.Parse(dr["age_pers"].ToString());
                        }
                    }
                }

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclsaptitudephysique.Dateexamen.HasValue) { }
                    else date = varclsaptitudephysique.Dateexamen;

                    cmd.CommandText = string.Format("INSERT INTO aptitudephysique ( id_province,id_districtville,id_territoirecommune,id_collectivitequartier,id_personne,age,taille,poid,perimetrethoracique,quotientvervaeck,indicepigment,dateexamen,remarque ) VALUES (@id_province,@id_districtville,@id_territoirecommune,@id_collectivitequartier,@id_personne,@age,@taille,@poid,@perimetrethoracique,@quotientvervaeck,@indicepigment,@dateexamen,@remarque  )");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsaptitudephysique.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_province", DbType.Int32, 4, varclsaptitudephysique.Id_province));
                    cmd.Parameters.Add(getParameter(cmd, "@id_districtville", DbType.Int32, 4, varclsaptitudephysique.Id_districtville));
                    cmd.Parameters.Add(getParameter(cmd, "@id_territoirecommune", DbType.Int32, 4, varclsaptitudephysique.Id_territoirecommune));
                    cmd.Parameters.Add(getParameter(cmd, "@id_collectivitequartier", DbType.Int32, 4, varclsaptitudephysique.Id_collectivitequartier));
                    cmd.Parameters.Add(getParameter(cmd, "@age", DbType.Int32, 4, varclsaptitudephysique.Age));
                    cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsaptitudephysique.Taille));
                    cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsaptitudephysique.Poid));
                    cmd.Parameters.Add(getParameter(cmd, "@perimetrethoracique", DbType.Single, 4, varclsaptitudephysique.Perimetrethoracique));
                    cmd.Parameters.Add(getParameter(cmd, "@quotientvervaeck", DbType.Single, 4, varclsaptitudephysique.Quotientvervaeck));
                    cmd.Parameters.Add(getParameter(cmd, "@indicepigment", DbType.Single, 4, varclsaptitudephysique.Indicepigment));
                    if (varclsaptitudephysique.Dateexamen.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateexamen", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateexamen", DbType.DateTime, 8, date));
                    if (varclsaptitudephysique.Remarque != null) cmd.Parameters.Add(getParameter(cmd, "@remarque", DbType.String, 300, varclsaptitudephysique.Remarque));
                    else cmd.Parameters.Add(getParameter(cmd, "@remarque", DbType.String, 20, varclsaptitudephysique.Remarque));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsaptitudephysique(clsaptitudephysique varclsaptitudephysique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    DateTime? date = DateTime.Today;
                    if (!varclsaptitudephysique.Dateexamen.HasValue) { }
                    else date = varclsaptitudephysique.Dateexamen;

                    cmd.CommandText = string.Format("UPDATE aptitudephysique SET id_province=@id_province,id_districtville=@id_districtville,id_territoirecommune=@id_territoirecommune,id_collectivitequartier=@id_collectivitequartier,id_personne=@id_personne,age=@age,taille=@taille,poid=@poid,perimetrethoracique=@perimetrethoracique,quotientvervaeck=@quotientvervaeck,indicepigment=@indicepigment,dateexamen=@dateexamen,remarque=@remarque WHERE 1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_personne", DbType.Int32, 4, varclsaptitudephysique.Id_personne));
                    cmd.Parameters.Add(getParameter(cmd, "@id_province", DbType.Int32, 4, varclsaptitudephysique.Id_province));
                    cmd.Parameters.Add(getParameter(cmd, "@id_districtville", DbType.Int32, 4, varclsaptitudephysique.Id_districtville));
                    cmd.Parameters.Add(getParameter(cmd, "@id_territoirecommune", DbType.Int32, 4, varclsaptitudephysique.Id_territoirecommune));
                    cmd.Parameters.Add(getParameter(cmd, "@id_collectivitequartier", DbType.Int32, 4, varclsaptitudephysique.Id_collectivitequartier));
                    cmd.Parameters.Add(getParameter(cmd, "@age", DbType.Int32, 4, varclsaptitudephysique.Age));
                    cmd.Parameters.Add(getParameter(cmd, "@taille", DbType.Single, 4, varclsaptitudephysique.Taille));
                    cmd.Parameters.Add(getParameter(cmd, "@poid", DbType.Single, 4, varclsaptitudephysique.Poid));
                    cmd.Parameters.Add(getParameter(cmd, "@perimetrethoracique", DbType.Single, 4, varclsaptitudephysique.Perimetrethoracique));
                    cmd.Parameters.Add(getParameter(cmd, "@quotientvervaeck", DbType.Single, 4, varclsaptitudephysique.Quotientvervaeck));
                    cmd.Parameters.Add(getParameter(cmd, "@indicepigment", DbType.Single, 4, varclsaptitudephysique.Indicepigment));
                    if (varclsaptitudephysique.Dateexamen.HasValue) cmd.Parameters.Add(getParameter(cmd, "@dateexamen", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@dateexamen", DbType.DateTime, 8, date));
                    if (varclsaptitudephysique.Remarque != null) cmd.Parameters.Add(getParameter(cmd, "@remarque", DbType.String, 300, varclsaptitudephysique.Remarque));
                    else cmd.Parameters.Add(getParameter(cmd, "@remarque", DbType.String, 20, varclsaptitudephysique.Remarque));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaptitudephysique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsaptitudephysique(clsaptitudephysique varclsaptitudephysique)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM aptitudephysique  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsaptitudephysique.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSAPTITUDEPHYSIQUE
        #region  CLSTARIFAVANCE
        public clstarifavance getClstarifavance(object intid)
        {
            clstarifavance varclstarifavance = new clstarifavance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifavance WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifavance.Id = int.Parse(dr["id"].ToString());
                            varclstarifavance.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifavance.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclstarifavance;
        }

        public List<clstarifavance> getAllClstarifavance(string criteria)
        {
            List<clstarifavance> lstclstarifavance = new List<clstarifavance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM tarifavance  WHERE 1=1";
                    sql += "  OR   designation LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifavance varclstarifavance = null;
                        while (dr.Read())
                        {
                            varclstarifavance = new clstarifavance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifavance.Id = int.Parse(dr["id"].ToString());
                            varclstarifavance.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifavance.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            lstclstarifavance.Add(varclstarifavance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifavance;
        }

        public List<clstarifavance> getAllClstarifavance()
        {
            List<clstarifavance> lstclstarifavance = new List<clstarifavance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM tarifavance ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clstarifavance varclstarifavance = null;
                        while (dr.Read())
                        {
                            varclstarifavance = new clstarifavance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclstarifavance.Id = int.Parse(dr["id"].ToString());
                            varclstarifavance.Designation = dr["designation"].ToString();
                            if (!dr["montant"].ToString().Trim().Equals("")) varclstarifavance.Montant = Math.Round(double.Parse(dr["montant"].ToString()), 2);
                            lstclstarifavance.Add(varclstarifavance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclstarifavance;
        }

        public int insertClstarifavance(clstarifavance varclstarifavance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO tarifavance ( designation,montant ) VALUES (@designation,@montant  )");
                    if (varclstarifavance.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifavance.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifavance.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifavance.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClstarifavance(clstarifavance varclstarifavance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE tarifavance  SET designation=@designation,montant=@montant  WHERE 1=1  AND id=@id ");
                    if (varclstarifavance.Designation != null) cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, varclstarifavance.Designation));
                    else cmd.Parameters.Add(getParameter(cmd, "@designation", DbType.String, 100, DBNull.Value));
                    if (varclstarifavance.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, varclstarifavance.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifavance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClstarifavance(clstarifavance varclstarifavance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM tarifavance  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclstarifavance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }
        #endregion CLSTARIFAVANCE
        #region  CLSDOSSIERAVANCE
        public clsdossieravance getClsdossieravance(object intid)
        {
            clsdossieravance varclsdossieravance = new clsdossieravance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossieravance WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossieravance;
        }

        public clsdossieravance getClsdossieravance1(int? id)
        {
            clsdossieravance varclsdossieravance = new clsdossieravance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM dossieravance WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsdossieravance;
        }

        public List<clsdossieravance> getAllClsdossieravance(string criteria)
        {
            List<clsdossieravance> lstclsdossieravance = new List<clsdossieravance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieravance  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossieravance varclsdossieravance = null;
                        while (dr.Read())
                        {
                            varclsdossieravance = new clsdossieravance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossieravance.Add(varclsdossieravance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossieravance;
        }

        public List<clsdossieravance> getAllClsdossieravance1(int criteria)
        {
            List<clsdossieravance> lstclsdossieravance = new List<clsdossieravance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieravance  WHERE id_malade = " + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossieravance varclsdossieravance = null;
                        while (dr.Read())
                        {
                            varclsdossieravance = new clsdossieravance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossieravance.Add(varclsdossieravance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossieravance;
        }

        public List<clsdossieravance> getAllClsdossieravance2(int criteria, string EtatPaiement1, string EtatPaiement2)
        {
            List<clsdossieravance> lstclsdossieravance = new List<clsdossieravance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieravance  WHERE id_malade = '" + criteria + "' and (etatpaiement='" + EtatPaiement1 + "' or etatpaiement='" + EtatPaiement2 + "')";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossieravance varclsdossieravance = null;
                        while (dr.Read())
                        {
                            varclsdossieravance = new clsdossieravance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossieravance.Add(varclsdossieravance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossieravance;
        }

        public List<clsdossieravance> getAllClsdossieravance3(int id_malade,DateTime date)
        {
            List<clsdossieravance> lstclsdossieravance = new List<clsdossieravance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM dossieravance  WHERE id_malade = " + id_malade + " and date='" + date.ToString().Substring(0, 10) + "'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossieravance varclsdossieravance = null;
                        while (dr.Read())
                        {
                            varclsdossieravance = new clsdossieravance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossieravance.Add(varclsdossieravance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossieravance;
        }

        public List<clsdossieravance> getAllClsdossieravance()
        {
            List<clsdossieravance> lstclsdossieravance = new List<clsdossieravance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM dossieravance ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsdossieravance varclsdossieravance = null;
                        while (dr.Read())
                        {
                            varclsdossieravance = new clsdossieravance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsdossieravance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsdossieravance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsdossieravance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_tarifavance"].ToString().Trim().Equals("")) varclsdossieravance.Id_tarifavance = int.Parse(dr["id_tarifavance"].ToString());
                            if (!dr["etatpaiement"].ToString().Trim().Equals("")) varclsdossieravance.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsdossieravance.Add(varclsdossieravance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsdossieravance;
        }

        public int insertClsdossieravance(clsdossieravance varclsdossieravance)
        {
            int i = 0, i1 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                DateTime? date = DateTime.Today;
                if (!varclsdossieravance.Date.HasValue) { }
                else date = varclsdossieravance.Date;

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO dossieravance ( date,id_malade,id_tarifavance,etatpaiement ) VALUES (@date,@id_malade,@id_tarifavance,@etatpaiement)");
                    if (varclsdossieravance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    if (varclsdossieravance.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossieravance.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossieravance.Id_tarifavance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifavance", DbType.Int32, 100, varclsdossieravance.Id_tarifavance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifavance", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossieravance.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossieravance.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                int lastId = -1;
                //Recuperation du dernier id de dossieravance insere
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = "SELECT @@IDENTITY AS lastIdInserted FROM dossieravance ";
                    cmd1.Transaction = transaction;
                    IDataReader dr = cmd1.ExecuteReader();
                    if (dr.Read()) lastId = int.Parse(dr["lastIdInserted"].ToString());
                    dr.Close();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("INSERT INTO malade_avance ( date,id_malade,id_dossieravance,avance,montant,cumul,solde ) VALUES (@date,@id_malade,@id_dossieravance,@avance,@montant,@cumul,@solde)");
                    cmd1.Parameters.Add(getParameter(cmd1, "@date", DbType.DateTime, 8, date));
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_malade", DbType.Int32, 4, varclsdossieravance.Id_malade));
                    cmd1.Parameters.Add(getParameter(cmd1, "@id_dossieravance", DbType.Int32, 4, lastId));
                    cmd1.Parameters.Add(getParameter(cmd1, "@avance", DbType.Single, 4, clsDoTraitement.dblAvance));
                    cmd1.Parameters.Add(getParameter(cmd1, "@montant", DbType.Int32, 4, clsDoTraitement.dblMontant));
                    cmd1.Parameters.Add(getParameter(cmd1, "@cumul", DbType.Int32, 4, clsDoTraitement.dblMontant));
                    cmd1.Parameters.Add(getParameter(cmd1, "@solde", DbType.Boolean, 2, 0));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de l'enregistrement, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i1;
        }

        public int updateClsdossieravance(clsdossieravance varclsdossieravance)
        {
            int i = 0,i1= 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                DateTime? date = DateTime.Today;
                if (!varclsdossieravance.Date.HasValue) { }
                else date = varclsdossieravance.Date;

                //On vérifie que l'avance n'a pas été concerné par une facture soldée
                using (IDbCommand cmd11 = conn.CreateCommand())
                {
                    cmd11.CommandText = "SELECT solde from malade_avance WHERE id_dossieravance=@id_dossieravance";
                    cmd11.Parameters.Add(getParameter(cmd11, "@id_dossieravance", DbType.Int32, 100, varclsdossieravance.Id));

                    cmd11.Transaction = transaction;
                    using (IDataReader dr = cmd11.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["solde"].ToString().Trim().Equals("")) if (!dr["solde"].ToString().ToLower().Equals("true")) throw new Exception("Cette avance a déjà été soldée");
                        }
                        else throw new Exception("Erreur inattendue !!!");
                    }
                }

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE dossieravance  SET date=@date,id_malade=@id_malade,id_tarifavance=@id_tarifavance,etatpaiement=@etatpaiement  WHERE 1=1  AND id=@id ");
                    if (varclsdossieravance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, date));
                    if (varclsdossieravance.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, varclsdossieravance.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossieravance.Id_tarifavance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_tarifavance", DbType.Int32, 100, varclsdossieravance.Id_tarifavance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_tarifavance", DbType.Int32, 100, DBNull.Value));
                    if (varclsdossieravance.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, varclsdossieravance.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 100, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsdossieravance.Id));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                //Selection de la valeur maximale du motant avance (Cumul) ainsi que du montant de l'avance du record en cours
                double avance = 0, maxCumul = 0,cumul_courant = 0;
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT avance AS avance,solde AS solde,MAX(montant) AS cumul_avance FROM malade_avance WHERE id_dossieravance={0}", varclsdossieravance.Id + "GROUP BY avance,solde");
                    cmd1.Transaction = transaction;
                    using (IDataReader dr = cmd1.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (Convert.ToBoolean(dr["solde"]).ToString().ToLower().Equals("true")) //Déja soldé 
                                throw new Exception("Vous ne pouvez pas mettre à jour un enregistrement soldé");
                            else
                            {
                                maxCumul = dr["cumul_avance"] == DBNull.Value ? 0 : Math.Round(double.Parse(dr["cumul_avance"].ToString()), 2);
                                avance = dr["avance"] == DBNull.Value ? 0 : Math.Round(double.Parse(dr["avance"].ToString()), 2);
                            }
                        }
                    }
                }

                //Calcul du good montant du cumul
                if (clsDoTraitement.dblAvance < 0) throw new Exception("Le montant à mettre à jour ne peut être inférieur à zéro");
                else if (clsDoTraitement.dblAvance == 0) throw new Exception("Le montant à mettre à jour ne peut être égal à zéro");
                else cumul_courant = maxCumul - avance + clsDoTraitement.dblAvance;

                using (IDbCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = string.Format("UPDATE malade_avance SET date=@date,id_malade=@id_malade,id_dossieravance=@id_dossieravance,avance=@avance,montant=@montant,cumul=@cumul,solde=@solde WHERE 1=1  AND id=@id ");
                    cmd2.Parameters.Add(getParameter(cmd2, "@date", DbType.DateTime, 8, date));
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_malade", DbType.Int32, 4, varclsdossieravance.Id_malade));
                    cmd2.Parameters.Add(getParameter(cmd2, "@id_dossieravance", DbType.Int32, 4, varclsdossieravance.Id));
                    cmd2.Parameters.Add(getParameter(cmd2, "@avance", DbType.Single, 4, clsDoTraitement.dblAvance));
                    cmd2.Parameters.Add(getParameter(cmd2, "@montant", DbType.Int32, 4, cumul_courant));
                    cmd2.Parameters.Add(getParameter(cmd2, "@cumul", DbType.Int32, 4, cumul_courant));
                    cmd2.Parameters.Add(getParameter(cmd2, "@solde", DbType.Int32, 4, 0));
                    cmd2.Parameters.Add(getParameter(cmd2, "@id", DbType.Int32, 4, clsDoTraitement.intIdAvance));
                    cmd2.Transaction = transaction;
                    i1 = cmd2.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de l'enregistrement, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i1;
        }

        public int updateClsdossieravance(int? id, string etatpaiement)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    //if (etatpaiement == "Non cloturé payé")
                    //{
                    //cmd.CommandText = "UPDATE dossieravance SET etatpaiement='Non cloturé non payé' WHERE id=@id";
                        cmd.CommandText = "UPDATE dossieravance SET etatpaiement='Non cloturé payé' WHERE id=@id";
                        if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                        else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    //}
                    //else
                    //{
                    //    cmd.CommandText = "UPDATE dossieravance SET etatpaiement='Cloturé non payé' WHERE id=@id";
                    //    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    //    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    //}
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsdossieravance(clsdossieravance varclsdossieravance)
        {
            int i = 0, i1 = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM malade_avance WHERE 1=1 AND id_dossieravance=@id_dossieravance ");
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossieravance", DbType.Int32, 4, clsDoTraitement.intIdDossierAvance));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("DELETE FROM dossieravance WHERE 1=1 AND id=@id ");
                    cmd1.Parameters.Add(getParameter(cmd1, "@id", DbType.Int32, 4, clsDoTraitement.intIdDossierAvance));
                    cmd1.Transaction = transaction;
                    i1 = cmd1.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i1;
        }

        #endregion
        #region  CLSMALADE_AVANCE
        public clsmalade_avance getClsmalade_avance(object intid)
        {
            clsmalade_avance varclsmalade_avance = new clsmalade_avance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM malade_avance WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade_avance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmalade_avance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmalade_avance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["id_dossieravance"].ToString().Trim().Equals("")) varclsmalade_avance.Id_dossieravance = int.Parse(dr["id_dossieravance"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsmalade_avance.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsmalade_avance.Montant = double.Parse(dr["montant"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsmalade_avance.Cumul = double.Parse(dr["cumul"].ToString());
                            if (!dr["solde"].ToString().Trim().Equals("")) varclsmalade_avance.Solde = bool.Parse(dr["solde"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade_avance;
        }

        public double getClsmalade_avanceMontantCumul(int intid)
        {
            double varclsmalade_avance = 0;
            //temp1 = 0, temp2 = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT solde AS solde,SUM(montant) AS cumul_avance,SUM(cumul) AS cumul_avance1 FROM malade_avance WHERE id_malade={0} and solde=0 GROUP BY solde", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            //temp1 = dr["cumul_avance"] == DBNull.Value ? 0 : Math.Round(double.Parse(dr["cumul_avance"].ToString()),2);
                            varclsmalade_avance = dr["cumul_avance1"] == DBNull.Value ? 0 : Math.Round(double.Parse(dr["cumul_avance1"].ToString()), 2);
                            //if (Convert.ToBoolean(dr["solde"]).ToString().ToLower().Equals("true")) //Si l'avance correspondant à la facture a été soldée
                            //    varclsmalade_avance = temp2;
                            //else varclsmalade_avance = temp1;//L'avance n'a pas encore été soldée
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade_avance;
        }

        public double getClsmalade_avanceMontantCumulMax(int intid)
        {
            double varclsmalade_avance = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT MAX(cumul) AS cumul_avance FROM malade_avance WHERE id_malade={0} AND solde=0", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            varclsmalade_avance = dr["cumul_avance"] == DBNull.Value ? 0 : Math.Round(double.Parse(dr["cumul_avance"].ToString()),2);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade_avance;
        }

        public clsmalade_avance getClsmalade_avance1(int? id)
        {
            clsmalade_avance varclsmalade_avance = new clsmalade_avance();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "SELECT *  FROM malade_avance WHERE id=@id";
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 100, DBNull.Value));
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade_avance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmalade_avance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossieravance"].ToString().Trim().Equals("")) varclsmalade_avance.Id_dossieravance = int.Parse(dr["id_dossieravance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmalade_avance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsmalade_avance.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsmalade_avance.Montant = double.Parse(dr["montant"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsmalade_avance.Cumul = double.Parse(dr["cumul"].ToString());
                            if (!dr["solde"].ToString().Trim().Equals("")) varclsmalade_avance.Solde = bool.Parse(dr["solde"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsmalade_avance;
        }

        public List<clsmalade_avance> getAllClsmalade_avance1(int criteria)
        {
            List<clsmalade_avance> lstclsmalade_avance = new List<clsmalade_avance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM malade_avance WHERE id_malade=" + criteria;
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade_avance varclsmalade_avance = null;
                        while (dr.Read())
                        {
                            varclsmalade_avance = new clsmalade_avance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade_avance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmalade_avance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossieravance"].ToString().Trim().Equals("")) varclsmalade_avance.Id_dossieravance = int.Parse(dr["id_dossieravance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmalade_avance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsmalade_avance.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsmalade_avance.Montant = double.Parse(dr["montant"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsmalade_avance.Cumul = double.Parse(dr["cumul"].ToString());
                            if (!dr["solde"].ToString().Trim().Equals("")) varclsmalade_avance.Solde = bool.Parse(dr["solde"].ToString());
                            lstclsmalade_avance.Add(varclsmalade_avance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade_avance;
        }

        public List<clsmalade_avance> getAllClsmalade_avance(string criteria)
        {
            List<clsmalade_avance> lstclsmalade_avance = new List<clsmalade_avance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM malade_avance  WHERE 1=1";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade_avance varclsmalade_avance = null;
                        while (dr.Read())
                        {
                            varclsmalade_avance = new clsmalade_avance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade_avance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmalade_avance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossieravance"].ToString().Trim().Equals("")) varclsmalade_avance.Id_dossieravance = int.Parse(dr["id_dossieravance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmalade_avance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsmalade_avance.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsmalade_avance.Montant = double.Parse(dr["montant"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsmalade_avance.Cumul = double.Parse(dr["cumul"].ToString());
                            if (!dr["solde"].ToString().Trim().Equals("")) varclsmalade_avance.Solde = bool.Parse(dr["solde"].ToString());
                            lstclsmalade_avance.Add(varclsmalade_avance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade_avance;
        }

        public List<clsmalade_avance> getAllClsmalade_avance()
        {
            List<clsmalade_avance> lstclsmalade_avance = new List<clsmalade_avance>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM malade_avance ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsmalade_avance varclsmalade_avance = null;
                        while (dr.Read())
                        {
                            varclsmalade_avance = new clsmalade_avance();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsmalade_avance.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsmalade_avance.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossieravance"].ToString().Trim().Equals("")) varclsmalade_avance.Id_dossieravance = int.Parse(dr["id_dossieravance"].ToString());
                            if (!dr["id_malade"].ToString().Trim().Equals("")) varclsmalade_avance.Id_malade = int.Parse(dr["id_malade"].ToString());
                            if (!dr["avance"].ToString().Trim().Equals("")) varclsmalade_avance.Avance = double.Parse(dr["avance"].ToString());
                            if (!dr["montant"].ToString().Trim().Equals("")) varclsmalade_avance.Montant = double.Parse(dr["montant"].ToString());
                            if (!dr["cumul"].ToString().Trim().Equals("")) varclsmalade_avance.Cumul = double.Parse(dr["cumul"].ToString());
                            if (!dr["solde"].ToString().Trim().Equals("")) varclsmalade_avance.Solde = bool.Parse(dr["solde"].ToString());
                            lstclsmalade_avance.Add(varclsmalade_avance);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsmalade_avance;
        }

        public int insertClsmalade_avance(clsmalade_avance varclsmalade_avance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO malade_avance ( date,id_malade,id_dossieravance,avance,montant,cumul,solde ) VALUES (@date,@id_malade,@id_dossieravance,@avance,@montant,@cumul,@solde)");
                    if (varclsmalade_avance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmalade_avance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    if (varclsmalade_avance.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmalade_avance.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsmalade_avance.Id_dossieravance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossieravance", DbType.Int32, 4, varclsmalade_avance.Id_dossieravance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossieravance", DbType.Int32, 100, DBNull.Value));
                    if (varclsmalade_avance.Avance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 4, varclsmalade_avance.Avance));
                    else cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 4, DBNull.Value));
                    if (varclsmalade_avance.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Int32, 4, varclsmalade_avance.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    if (varclsmalade_avance.Cumul.HasValue) cmd.Parameters.Add(getParameter(cmd, "@cumul", DbType.Int32, 4, varclsmalade_avance.Cumul));
                    else cmd.Parameters.Add(getParameter(cmd, "@cumul", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@solde", DbType.Boolean, 2, 0));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsmalade_avance(clsmalade_avance varclsmalade_avance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE malade_avance  SET date=@date,id_malade=@id_malade,id_dossieravance=@id_dossieravance,avance=@avance,montant=@montant,cumul=@cumul,solde=@solde  WHERE 1=1  AND id=@id ");
                    if (varclsmalade_avance.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsmalade_avance.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DBNull.Value));
                    if (varclsmalade_avance.Id_malade.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 4, varclsmalade_avance.Id_malade));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_malade", DbType.Int32, 100, DBNull.Value));
                    if (varclsmalade_avance.Id_dossieravance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id_dossieravance", DbType.Int32, 4, varclsmalade_avance.Id_dossieravance));
                    else cmd.Parameters.Add(getParameter(cmd, "@id_dossieravance", DbType.Int32, 4, DBNull.Value));
                    if (varclsmalade_avance.Avance.HasValue) cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 4, varclsmalade_avance.Avance));
                    else cmd.Parameters.Add(getParameter(cmd, "@avance", DbType.Single, 4, DBNull.Value));
                    if (varclsmalade_avance.Montant.HasValue) cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Int32, 4, varclsmalade_avance.Montant));
                    else cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 4, DBNull.Value));
                    if (varclsmalade_avance.Cumul.HasValue) cmd.Parameters.Add(getParameter(cmd, "@cumul", DbType.Int32, 4, varclsmalade_avance.Cumul));
                    else cmd.Parameters.Add(getParameter(cmd, "@cumul", DbType.Single, 4, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@solde", DbType.Boolean, 2, varclsmalade_avance.Solde));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsmalade_avance(clsmalade_avance varclsmalade_avance)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM malade_avance WHERE 1=1 AND id=@id) ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsmalade_avance.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion
        #region  CLSETABLISSEMENTEXTERNE
        public clsetablissementexterne getClsetablissementexterne(object intid)
        {
            clsetablissementexterne varclsetablissementexterne = new clsetablissementexterne();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format(@"SELECT *  FROM etablissementexterne WHERE malade.id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementexterne.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementexterne.Denomination = dr["denomination"].ToString();
                            varclsetablissementexterne.Adresse = dr["adresse"].ToString();
                            varclsetablissementexterne.Telephone = dr["telephone"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsetablissementexterne;
        }

        public List<clsetablissementexterne> getAllClsetablissementexterne(string criteria)
        {
            List<clsetablissementexterne> lstclsetablissementpriseencharge = new List<clsetablissementexterne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM etablissementexterne  WHERE 1=1";
                    sql += "  OR   denomination LIKE '%" + criteria + "%'";
                    sql += "  OR   adresse LIKE '%" + criteria + "%'";
                    sql += "  OR   telephone LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetablissementexterne varclsetablissementexterne = null;
                        while (dr.Read())
                        {
                            varclsetablissementexterne = new clsetablissementexterne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementexterne.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementexterne.Denomination = dr["denomination"].ToString();
                            varclsetablissementexterne.Adresse = dr["adresse"].ToString();
                            varclsetablissementexterne.Telephone = dr["telephone"].ToString();
                            lstclsetablissementpriseencharge.Add(varclsetablissementexterne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsetablissementpriseencharge;
        }

        public List<clsetablissementexterne> getAllClsetablissementexterne()
        {
            List<clsetablissementexterne> lstclsetablissementexterne = new List<clsetablissementexterne>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM etablissementexterne ");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsetablissementexterne varclsetablissementexterne = null;
                        while (dr.Read())
                        {
                            varclsetablissementexterne = new clsetablissementexterne();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsetablissementexterne.Id = int.Parse(dr["id"].ToString());
                            varclsetablissementexterne.Denomination = dr["denomination"].ToString();
                            varclsetablissementexterne.Adresse = dr["adresse"].ToString();
                            varclsetablissementexterne.Telephone = dr["telephone"].ToString();
                            lstclsetablissementexterne.Add(varclsetablissementexterne);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsetablissementexterne;
        }

        public int insertClsetablissementexterne(clsetablissementexterne varclsetablissementexterne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO etablissementexterne ( denomination,adresse,telephone ) VALUES (@denomination,@adresse,@telephone )");
                    if (varclsetablissementexterne.Denomination != null) cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, varclsetablissementexterne.Denomination));
                    else cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementexterne.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, varclsetablissementexterne.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementexterne.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, varclsetablissementexterne.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int updateClsetablissementexterne(clsetablissementexterne varclsetablissementexterne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE etablissementexterne  SET denomination=@denomination,adresse=@adresse,telephone=@telephone  WHERE 1=1  AND id=@id ");
                    if (varclsetablissementexterne.Denomination != null) cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, varclsetablissementexterne.Denomination));
                    else cmd.Parameters.Add(getParameter(cmd, "@denomination", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementexterne.Adresse != null) cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, varclsetablissementexterne.Adresse));
                    else cmd.Parameters.Add(getParameter(cmd, "@adresse", DbType.String, 100, DBNull.Value));
                    if (varclsetablissementexterne.Telephone != null) cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, varclsetablissementexterne.Telephone));
                    else cmd.Parameters.Add(getParameter(cmd, "@telephone", DbType.String, 14, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetablissementexterne.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsetablissementexterne(clsetablissementexterne varclsetablissementexterne)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("DELETE FROM etablissementexterne  WHERE  1=1  AND id=@id ");
                    cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, varclsetablissementexterne.Id));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        #endregion CLSETABLISSEMENTEXTERNE
        #region  CLSFICHESUPPLEMENTAIRE
        public clsfichesupplementaire getClsfichesupplementaire(object intid)
        {
            clsfichesupplementaire varclsfichesupplementaire = new clsfichesupplementaire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fichesupplementaire WHERE id={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfichesupplementaire;
        }

        public clsfichesupplementaire getClsfichesupplementaire2(object intid)
        {
            clsfichesupplementaire varclsfichesupplementaire = new clsfichesupplementaire();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fichesupplementaire WHERE id_dossierpreconsultation={0}", intid);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return varclsfichesupplementaire;
        }

        public List<clsfichesupplementaire> getAllClsfichesupplementaire(string criteria)
        {
            List<clsfichesupplementaire> lstclsfichesupplementaire = new List<clsfichesupplementaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = "SELECT *  FROM fichesupplementaire  WHERE 1=1";
                    sql += "  OR   etatpaiement LIKE '%" + criteria + "%'";
                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfichesupplementaire varclsfichesupplementaire = null;
                        while (dr.Read())
                        {
                            varclsfichesupplementaire = new clsfichesupplementaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                            lstclsfichesupplementaire.Add(varclsfichesupplementaire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfichesupplementaire;
        }

        public List<clsfichesupplementaire> getAllClsfichesupplementaire1(int criteria)
        {
            List<clsfichesupplementaire> lstclsfichesupplementaire = new List<clsfichesupplementaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT fichesupplementaire.*,tarifpreconsultation.designation,dossierpreconsultation.cumul AS cumul,tarifpreconsultation.montant AS prix  FROM fichesupplementaire 
                    INNER JOIN tarifpreconsultation ON tarifpreconsultation.id=fichesupplementaire.id_tarifpreconsultation 
                    INNER JOIN dossierpreconsultation ON dossierpreconsultation.id=fichesupplementaire.id_dossierpreconsultation
                    INNER JOIN malade ON malade.id=dossierpreconsultation.id_malade WHERE malade.id=" + criteria;

                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfichesupplementaire varclsfichesupplementaire = null;
                        while (dr.Read())
                        {
                            varclsfichesupplementaire = new clsfichesupplementaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                            varclsfichesupplementaire.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["cumul"].ToString()), 2).ToString() + "$US=>" + varclsfichesupplementaire.Date.ToString().Substring(0, 10);
                            lstclsfichesupplementaire.Add(varclsfichesupplementaire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfichesupplementaire;
        }

        public List<clsfichesupplementaire> getAllClsfichesupplementaire2(int criteria)
        {
            List<clsfichesupplementaire> lstclsfichesupplementaire = new List<clsfichesupplementaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    string sql = @"SELECT * FROM fichesupplementaire WHERE id_dossierpreconsultation=" + criteria;

                    cmd.CommandText = string.Format(sql);
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfichesupplementaire varclsfichesupplementaire = null;
                        while (dr.Read())
                        {
                            varclsfichesupplementaire = new clsfichesupplementaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                            varclsfichesupplementaire.DesignationComplete = dr["designation"].ToString() + "=>" + Math.Round(double.Parse(dr["cumul"].ToString()), 2).ToString() + "$US=>" + varclsfichesupplementaire.Date.ToString().Substring(0, 10);
                            lstclsfichesupplementaire.Add(varclsfichesupplementaire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfichesupplementaire;
        }

        public List<clsfichesupplementaire> getAllClsfichesupplementaire()
        {
            List<clsfichesupplementaire> lstclsfichesupplementaire = new List<clsfichesupplementaire>();
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("SELECT *  FROM fichesupplementaire WHERE etatpaiement='Fiche non payée'");
                    using (IDataReader dr = cmd.ExecuteReader())
                    {
                        clsfichesupplementaire varclsfichesupplementaire = null;
                        while (dr.Read())
                        {
                            varclsfichesupplementaire = new clsfichesupplementaire();
                            if (!dr["id"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id = int.Parse(dr["id"].ToString());
                            if (!dr["date"].ToString().Trim().Equals("")) varclsfichesupplementaire.Date = DateTime.Parse(dr["date"].ToString());
                            if (!dr["id_dossierpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_dossierpreconsultation = int.Parse(dr["id_dossierpreconsultation"].ToString());
                            if (!dr["id_tarifpreconsultation"].ToString().Trim().Equals("")) varclsfichesupplementaire.Id_tarifpreconsultation = int.Parse(dr["id_tarifpreconsultation"].ToString());
                            varclsfichesupplementaire.Montant = Convert.ToDouble(dr["montant"].ToString());
                            varclsfichesupplementaire.Etatpaiement = dr["etatpaiement"].ToString();
                            lstclsfichesupplementaire.Add(varclsfichesupplementaire);
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return lstclsfichesupplementaire;
        }

        public int insertClsfichesupplementaire(clsfichesupplementaire varclsfichesupplementaire)
        {
            int i = 0;
            IDbTransaction transaction = null;
            string etatpaiement = "";
            double montantFiche = 0, oldCumul = 0;

            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //On recupère le montant correspondant à la fiche dans la table tarifptreconsultation
                using (IDbCommand cmd0 = conn.CreateCommand())
                {
                    cmd0.CommandText = string.Format(@"SELECT SUM(ISNULL(tarifpreconsultation.montant,0)) AS montant2 FROM tarifpreconsultation 
                        WHERE tarifpreconsultation.id=" + varclsfichesupplementaire.Id_tarifpreconsultation);
                    cmd0.Transaction = transaction;
                    IDataReader rd = cmd0.ExecuteReader();
                    if (rd.Read()) varclsfichesupplementaire.Montant = Convert.ToDouble(rd["montant2"].ToString());
                    else varclsfichesupplementaire.Montant = 0;
                    rd.Dispose();
                }

                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("INSERT INTO fichesupplementaire ( date,id_dossierpreconsultation,id_tarifpreconsultation,etatpaiement,montant ) VALUES (@date,@id_dossierpreconsultation,@id_tarifpreconsultation,@etatpaiement,@montant  )");
                    if (varclsfichesupplementaire.Date.HasValue) cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, varclsfichesupplementaire.Date));
                    else cmd.Parameters.Add(getParameter(cmd, "@date", DbType.DateTime, 8, DateTime.Today));
                    cmd.Parameters.Add(getParameter(cmd, "@id_dossierpreconsultation", DbType.Int32, 4, varclsfichesupplementaire.Id_dossierpreconsultation));
                    cmd.Parameters.Add(getParameter(cmd, "@id_tarifpreconsultation", DbType.Int32, 4, varclsfichesupplementaire.Id_tarifpreconsultation));
                    if (varclsfichesupplementaire.Etatpaiement != null) cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, varclsfichesupplementaire.Etatpaiement));
                    else cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, DBNull.Value));
                    cmd.Parameters.Add(getParameter(cmd, "@montant", DbType.Single, 8, varclsfichesupplementaire.Montant));
                    cmd.Transaction = transaction;
                    i = cmd.ExecuteNonQuery();
                }

                //Préparation de la mise à jour du cumul et récupération de l'ancienne valeur du cumul
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format("SELECT etatpaiement,cumul FROM dossierpreconsultation WHERE id=" + varclsfichesupplementaire.Id_dossierpreconsultation);
                    cmd1.Transaction = transaction;
                    IDataReader rd = cmd1.ExecuteReader();
                    if (rd.Read())
                    {
                        etatpaiement = rd["etatpaiement"].ToString();
                        oldCumul = Convert.ToDouble(rd["cumul"].ToString());
                    }
                    rd.Dispose();
                }

                if (etatpaiement.Equals("Fiche payée"))
                {
                    //Si la fiche est payée on récalcule la somme du vrai cumul qui correspondra à la somme du montant
                    //de fiche ajoutées où l'Etat paiement est Fiche non payée

                    //Recalculage du cumul
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format(@"SELECT SUM(fichesupplementaire.montant) AS montant2 FROM fichesupplementaire 
                        WHERE fichesupplementaire.id_dossierpreconsultation=" + varclsfichesupplementaire.Id_dossierpreconsultation + @" and fichesupplementaire.etatpaiement='Fiche non payée'");
                        cmd2.Transaction = transaction;
                        IDataReader rd = cmd2.ExecuteReader();
                        if (rd.Read()) montantFiche = Convert.ToDouble(rd["montant2"].ToString());
                        rd.Dispose();
                    }

                    //On met à jour la valeur du cumul dans la table dossier préconsultation
                    using (IDbCommand cmd3 = conn.CreateCommand())
                    {
                        cmd3.CommandText = string.Format("UPDATE dossierpreconsultation SET cumul=@cumul WHERE id=" + varclsfichesupplementaire.Id_dossierpreconsultation);
                        cmd3.Parameters.Add(getParameter(cmd3, "@cumul", DbType.Single, 8, (montantFiche)));
                        cmd3.Transaction = transaction;
                        i = cmd3.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
                else if (etatpaiement.Equals("Fiche non payée")) //La valeur du cumul sera ajouté à la somme du total à récalculer pour les fiches ajoutées
                {
                    double montant1 = 0, montant2 = 0;
                    //On va ajouter l'ancienne valeur du cumul à la nouvelle quisera recalculé en faisant la somme des fiches non payées
                    //Recalculage du cumul

                    //Recalculage du cumul qui prendra en compte la valeur de la fiche de préconsultation principale en cours
                    using (IDbCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = string.Format(@"SELECT tarifpreconsultation.montant AS montant1 FROM tarifpreconsultation INNER JOIN dossierpreconsultation ON tarifpreconsultation.id=dossierpreconsultation.id_tarifpreconsultation WHERE dossierpreconsultation.id=" + varclsfichesupplementaire.Id_dossierpreconsultation);
                        cmd2.Transaction = transaction;
                        IDataReader rd = cmd2.ExecuteReader();
                        if (rd.Read()) montant1 = Convert.ToDouble(rd["montant1"].ToString());
                        rd.Dispose();
                    }

                    using (IDbCommand cmd3 = conn.CreateCommand())
                    {
                        cmd3.CommandText = string.Format(@"SELECT SUM(fichesupplementaire.montant) AS montant2 FROM fichesupplementaire WHERE fichesupplementaire.id_dossierpreconsultation=" + varclsfichesupplementaire.Id_dossierpreconsultation);
                        cmd3.Transaction = transaction;
                        IDataReader rd = cmd3.ExecuteReader();
                        if (rd.Read()) montant2 = Convert.ToDouble(rd["montant2"].ToString());
                        rd.Dispose();
                    }

                    //On update le cumul en faisant la somme des deux précédents montants
                    using (IDbCommand cmd4 = conn.CreateCommand())
                    {
                        cmd4.CommandText = string.Format("UPDATE dossierpreconsultation SET cumul=@cumul WHERE id=" + varclsfichesupplementaire.Id_dossierpreconsultation);
                        cmd4.Parameters.Add(getParameter(cmd4, "@cumul", DbType.Single, 8, (montant1 + montant2)));
                        cmd4.Transaction = transaction;
                        i = cmd4.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de l'insertion, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClsfichesupplementaire(clsfichesupplementaire varclsfichesupplementaire)
        {
            int i = 0;
            IDbTransaction transaction = null;
            double cumulOld = 0, vraieMontant = 0, nouveauMontant = 0, montantFiche = 0;
            string etatPaiement = "";
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                //On recupere le cumul dans la table dossierpreconsultation tout en spécifiant l'etat paiement
                using (IDbCommand cmd1 = conn.CreateCommand())
                {
                    cmd1.CommandText = string.Format(@"SELECT dossierpreconsultation.cumul,dossierpreconsultation.etatpaiement FROM dossierpreconsultation WHERE dossierpreconsultation.id=" + clsDoTraitement.intIdentifiantDossier);
                    cmd1.Transaction = transaction;
                    IDataReader rd = cmd1.ExecuteReader();

                    if (rd.Read())
                    {
                        cumulOld = Convert.ToDouble(rd["cumul"].ToString());
                        etatPaiement = rd["etatpaiement"].ToString();
                    }
                    rd.Dispose();
                }

                //Premières verifications avant de modifier suivant les cas
                if (cumulOld == 0) throw new Exception("La modification ne peut s'effectuée, les données sont invalides");
                else if (cumulOld < 0) throw new Exception("La modification ne peut s'effectuée, les données sont invalides");

                nouveauMontant = clsDoTraitement.dblNewValeurChoisie;  

                if (etatPaiement.Equals("Fiche payée"))
                {
                    vraieMontant = (cumulOld - clsDoTraitement.dblOldValeurChoisie) + nouveauMontant;

                    //On fait les calculs sans considéré le montant de la fiche principale car elle est déjà payée
                    using (IDbCommand cmd3 = conn.CreateCommand())
                    {
                        cmd3.CommandText = string.Format("UPDATE fichesupplementaire  SET date=@date,id_dossierpreconsultation=@id_dossierpreconsultation,id_tarifpreconsultation=@id_tarifpreconsultation,etatpaiement=@etatpaiement,montant=@montant  WHERE 1=1  AND id=@id ");
                        if (varclsfichesupplementaire.Date.HasValue) cmd3.Parameters.Add(getParameter(cmd3, "@date", DbType.DateTime, 8, varclsfichesupplementaire.Date));
                        else cmd3.Parameters.Add(getParameter(cmd3, "@date", DbType.DateTime, 8, DateTime.Today));
                        cmd3.Parameters.Add(getParameter(cmd3, "@id_dossierpreconsultation", DbType.Int32, 4, clsDoTraitement.intIdentifiantDossier));
                        cmd3.Parameters.Add(getParameter(cmd3, "@id_tarifpreconsultation", DbType.Int32, 4, clsDoTraitement.intIdentifiantTarif));
                        if (varclsfichesupplementaire.Etatpaiement != null) cmd3.Parameters.Add(getParameter(cmd3, "@etatpaiement", DbType.String, 50, varclsfichesupplementaire.Etatpaiement));
                        else cmd3.Parameters.Add(getParameter(cmd3, "@etatpaiement", DbType.String, 50, DBNull.Value));
                        cmd3.Parameters.Add(getParameter(cmd3, "@montant", DbType.Single, 8, nouveauMontant));
                        cmd3.Parameters.Add(getParameter(cmd3, "@id", DbType.Int32, 4, clsDoTraitement.intIdentifiantFiche));
                        cmd3.Transaction = transaction;
                        i = cmd3.ExecuteNonQuery();
                    }

                    //On met à jour le cumul en ne considérant pas la fiche principale
                    using (IDbCommand cmd4 = conn.CreateCommand())
                    {
                        cmd4.CommandText = string.Format("UPDATE dossierpreconsultation SET cumul=@cumul WHERE id=" + clsDoTraitement.intIdentifiantDossier);
                        cmd4.Parameters.Add(getParameter(cmd4, "@cumul", DbType.Single, 8, vraieMontant));
                        cmd4.Transaction = transaction;
                        i = cmd4.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
                else if (etatPaiement.Equals("Fiche non payée"))
                {
                    //On fait les calculs en considérant le montant de la fiche principale car elle n'est pas encore payée
                    //On recupere le montant de la fiche principale qui sera ajouté à celui du vraiMontant pour avoir le cuml actuel
                    using (IDbCommand cmd33 = conn.CreateCommand())
                    {
                        cmd33.CommandText = string.Format(@"SELECT tarifpreconsultation.montant AS montant1 FROM tarifpreconsultation INNER JOIN dossierpreconsultation ON tarifpreconsultation.id=dossierpreconsultation.id_tarifpreconsultation WHERE dossierpreconsultation.id=" + clsDoTraitement.intIdentifiantDossier);
                        cmd33.Transaction = transaction;
                        IDataReader rd = cmd33.ExecuteReader();
                        if (rd.Read()) montantFiche = Convert.ToDouble(rd["montant1"].ToString());
                        rd.Dispose();
                    }

                    //Avant de mettre à jour le montant du cumul, on doit d'abord retrancher le montant de la fiche puis on fait les calculs

                    vraieMontant = (cumulOld - clsDoTraitement.dblOldValeurChoisie - montantFiche) + nouveauMontant;

                    //On met à jour les data dans la table fichesupplementaire
                    using (IDbCommand cmd4 = conn.CreateCommand())
                    {
                        cmd4.CommandText = string.Format("UPDATE fichesupplementaire SET montant=@montant,id_tarifpreconsultation=@id_tarifpreconsultation WHERE id=" + clsDoTraitement.intIdentifiantFiche);
                        cmd4.Parameters.Add(getParameter(cmd4, "@montant", DbType.Single, 8, clsDoTraitement.dblNewValeurChoisie));
                        cmd4.Parameters.Add(getParameter(cmd4, "@id_tarifpreconsultation", DbType.Int32, 4, clsDoTraitement.intIdentifiantTarif));
                        cmd4.Transaction = transaction;
                        i = cmd4.ExecuteNonQuery();
                    }

                    //On met à jour le cumul en considérant le montant de la fiche principale (Sachons que ce montant est déjà considéré dans le cumul lors de l'insertion)
                    using (IDbCommand cmd3 = conn.CreateCommand())
                    {
                        cmd3.CommandText = string.Format("UPDATE dossierpreconsultation SET cumul=@cumul WHERE id=" + clsDoTraitement.intIdentifiantDossier);
                        cmd3.Parameters.Add(getParameter(cmd3, "@cumul", DbType.Single, 8, vraieMontant + montantFiche));
                        cmd3.Transaction = transaction;
                        i = cmd3.ExecuteNonQuery();
                        transaction.Commit();
                    }
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de la modification, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        public int updateClsfichesupplementaire(int? id)
        {
            int i = 0;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                using (IDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = string.Format("UPDATE fichesupplementaire  SET etatpaiement=@etatpaiement WHERE 1=1  AND id=@id");
                    cmd.Parameters.Add(getParameter(cmd, "@etatpaiement", DbType.String, 50, "Fiche non payée"));
                    if (id.HasValue) cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, id));
                    else cmd.Parameters.Add(getParameter(cmd, "@id", DbType.Int32, 4, DBNull.Value));
                    i = cmd.ExecuteNonQuery();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                conn.Close();
                throw new Exception(exc.Message);
            }
            return i;
        }

        public int deleteClsfichesupplementaire(clsfichesupplementaire varclsfichesupplementaire)
        {
            int i = 0;
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);

                using (IDbCommand cmd3 = conn.CreateCommand())
                {
                    cmd3.CommandText = string.Format("DELETE FROM fichesupplementaire  WHERE  1=1  AND id=@id_dossierpreconsultation ");
                    cmd3.Parameters.Add(getParameter(cmd3, "@id_dossierpreconsultation", DbType.Int32, 4, varclsfichesupplementaire.Id));
                    cmd3.Transaction = transaction;
                    i = cmd3.ExecuteNonQuery();
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec de suppression, veuillez réessayez svp, " + exc.Message);
                }
                conn.Close();
            }
            return i;
        }

        #endregion CLSFICHESUPPLEMENTAIRE
        #region GESTION DES DROITS D'ACCES SUR LES TABLES POUR LES UTILISATEUR
        public string[] getLogin_SchemaUser(int id_user)
        {
            if (conn.State != ConnectionState.Open) conn.Open();
            string[] schema = new string[2];
            using (IDbCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = string.Format("SELECT nomuser,schema_user  FROM utilisateur WHERE id=" + id_user);
                using (IDataReader dr = cmd.ExecuteReader())
                {
                    if (dr.Read())
                    {
                        schema[0] = dr["nomuser"].ToString();
                        schema[1] = dr["schema_user"].ToString();
                    }
                }
            }
            conn.Close();
            return schema;
        }

        public List<int> getDroitsUser(int id_user)
        {
            if (conn.State != ConnectionState.Open) conn.Open();
            List<int> droits = new List<int>();
            using (IDbCommand cmd = conn.CreateCommand())
            {
                cmd.CommandText = string.Format("SELECT droits  FROM utilisateur WHERE id=" + id_user);
                using (IDataReader dr = cmd.ExecuteReader())
                {
                    if (dr.Read())
                    {
                        string[] temp = dr["droits"].ToString().Split(',');
                        int taille = temp.Length;

                        foreach (string str in temp)
                        {
                            if (str.ToString().Equals("Administrateur")) droits.Add(0);
                            else if (str.Equals("Médecin")) droits.Add(1);
                            else if (str.Equals("Infirmier")) droits.Add(2);
                            else if (str.Equals("Laborantin")) droits.Add(3);
                            else if (str.Equals("Pharmacien")) droits.Add(4);
                            else if (str.Equals("Caissier")) droits.Add(5);
                            else if (str.ToString().Equals("Médecin gynéco.")) droits.Add(6);
                            else if (str.ToString().Equals("Service")) droits.Add(7);
                        }
                    }
                }
            }
            conn.Close();
            return droits;
        }

        public void grantPermission(List<int> permission, string nom_login, string nom_utilisateur)
        {
            IDbTransaction transaction = null;
            bool isAdmin = false;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                //On tourne dans la boucle qui tournera tant qu'il ya encore un groupe de permission à accordé
                foreach (int droit in permission)
                {
                    if (droit == 0)
                    {
                        transaction.Dispose();
                        #region Droit pour administrateur
                        isAdmin = true;
                        string requete = @"exec sp_addsrvrolemember '" + nom_login + @"','sysadmin' 
                        exec sp_addsrvrolemember '" + nom_login + @"','securityadmin' 
                        exec sp_addsrvrolemember '" + nom_login + @"','dbcreator' 
                        exec sp_addrolemember 'db_owner','" + nom_utilisateur + @"'
                        exec sp_addrolemember 'db_ddladmin','" + nom_utilisateur + @"'
                        exec sp_addrolemember 'db_accessadmin','" + nom_utilisateur + @"'";

                        using (IDbCommand cmd = conn.CreateCommand())
                        {
                            cmd.CommandText = string.Format(requete);
                            cmd.ExecuteNonQuery();
                        }
                        conn.Close();
                        #endregion
                    }
                    else if (droit == 1)
                    {
                        #region Droit pour medecin
                        string requete = @"grant select,insert,update,delete on personne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on province to " + nom_utilisateur + @"
                        grant select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        grant select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        grant select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        grant select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on profession to " + nom_utilisateur + @"
                        grant select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        grant select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on malade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladiegynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on allergie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on antecedentallergie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on antecedentmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        grant select on consultation to " + nom_utilisateur + @"
                        grant select on mouvementconsultation to " + nom_utilisateur + @"
                        grant select on operation_laboratoire to " + nom_utilisateur + @"
                        grant select on critereresultat to " + nom_utilisateur + @"
                        grant select on examen to " + nom_utilisateur + @"
                        grant select on typeexamen to " + nom_utilisateur + @"
                        grant select on hospitalisation to " + nom_utilisateur + @"
                        grant select on mvmhospitalisation to " + nom_utilisateur + @"
                        grant select on chambre to " + nom_utilisateur + @"
                        grant select on categoriechambre to " + nom_utilisateur + @"
                        grant select on intervention to " + nom_utilisateur + @"
                        grant select on subit to " + nom_utilisateur + @"
                        grant select on bloc to " + nom_utilisateur + @"
                        grant select on criterechographie to " + nom_utilisateur + @"
                        grant select on consultationgynecologique to " + nom_utilisateur + @"
                        grant select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"
                        grant select on service to " + nom_utilisateur + @"
                        grant select on autrefraie to " + nom_utilisateur + @"
                        grant select on etablissementexterne to " + nom_utilisateur + @"
                        grant select on detailsautrefraie to " + nom_utilisateur + @"
                        grant select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        grant select on consultationprenatal to " + nom_utilisateur + @"
                        grant select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on tarifechographie to " + nom_utilisateur + @"
                        grant select on dossierechographie to " + nom_utilisateur + @"
                        grant select on tarifsoin to " + nom_utilisateur + @"
                        grant select on dossiersoin to " + nom_utilisateur + @"
                        grant select on tarifnursing to " + nom_utilisateur + @"
                        grant select on dossiernursing to " + nom_utilisateur + @"
                        grant select on dossieraccouchement to " + nom_utilisateur + @"
                        grant select on typeaccouchement to " + nom_utilisateur + @"
                        grant select on tarifavance to " + nom_utilisateur + @"
                        grant select on dossieravance to " + nom_utilisateur + @"
                        grant select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        grant select on agent to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"

                        grant select,insert,update,delete on examen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        grant select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        grant select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        grant update on consultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mvmhospitalisation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on subit to " + nom_utilisateur + @"
                        grant select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        grant select on tarifpreconsultation to " + nom_utilisateur + @"
                        grant select on sortie to " + nom_utilisateur + @"
                        grant select on tarifconsultation to " + nom_utilisateur + @"
                        grant select on tarifconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on tarifconsultationprenatal to " + nom_utilisateur + @"
                        grant select on tarifsoin to " + nom_utilisateur + @"
                        grant select on tarifnursing to " + nom_utilisateur + @"";
                    
                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format(requete);
                            cmd1.Transaction = transaction;
                            cmd1.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 2)
                    {
                        #region Droit pour infirmier
                        string requete = @"grant select,insert,update,delete on personne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on province to " + nom_utilisateur + @"
                        grant select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        grant select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        grant select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        grant select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on profession to " + nom_utilisateur + @"
                        grant select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        grant select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on malade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"

                        grant select on consultation to " + nom_utilisateur + @"
                        grant select on mouvementconsultation to " + nom_utilisateur + @"
                        grant select on operation_laboratoire to " + nom_utilisateur + @"
                        grant select on critereresultat to " + nom_utilisateur + @"
                        grant select on examen to " + nom_utilisateur + @"
                        grant select on typeexamen to " + nom_utilisateur + @"
                        grant select on hospitalisation to " + nom_utilisateur + @"
                        grant select on mvmhospitalisation to " + nom_utilisateur + @"
                        grant select on chambre to " + nom_utilisateur + @"
                        grant select on categoriechambre to " + nom_utilisateur + @"
                        grant select on intervention to " + nom_utilisateur + @"
                        grant select on subit to " + nom_utilisateur + @"
                        grant select on bloc to " + nom_utilisateur + @"
                        grant select on criterechographie to " + nom_utilisateur + @"
                        grant select on consultationgynecologique to " + nom_utilisateur + @"
                        grant select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"
                        grant select on service to " + nom_utilisateur + @"
                        grant select on autrefraie to " + nom_utilisateur + @"
                        grant select on etablissementexterne to " + nom_utilisateur + @"
                        grant select on detailsautrefraie to " + nom_utilisateur + @"
                        grant select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        grant select on consultationprenatal to " + nom_utilisateur + @"
                        grant select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on tarifechographie to " + nom_utilisateur + @"
                        grant select on dossierechographie to " + nom_utilisateur + @"
                        grant select on tarifsoin to " + nom_utilisateur + @"
                        grant select on dossiersoin to " + nom_utilisateur + @"
                        grant select on tarifnursing to " + nom_utilisateur + @"
                        grant select on dossiernursing to " + nom_utilisateur + @"
                        grant select on dossieraccouchement to " + nom_utilisateur + @"
                        grant select on typeaccouchement to " + nom_utilisateur + @"
                        grant select on tarifavance to " + nom_utilisateur + @"
                        grant select on dossieravance to " + nom_utilisateur + @"
                        grant select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        grant select on tarifpreconsultation to " + nom_utilisateur + @"
                        grant select on sortie to " + nom_utilisateur + @"";

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = string.Format(requete);
                            cmd2.Transaction = transaction;
                            cmd2.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 3)
                    {
                        #region Droit pour laborantin
                        string requete = @"grant select on personne to " + nom_utilisateur + @"
                        grant select on malade to " + nom_utilisateur + @"
                        grant select on groupesanguin to " + nom_utilisateur + @"
                        grant select on agent to " + nom_utilisateur + @"
                        grant select on examen to " + nom_utilisateur + @"
                        grant select on typeexamen to " + nom_utilisateur + @"
                        grant select on categoriemalade to " + nom_utilisateur + @"
                        grant select on etablissementpriseencharge to " + nom_utilisateur + @"
                        grant select on mouvementconsultation to " + nom_utilisateur + @"
                        grant select on mouvementmaladiegynecologique to " + nom_utilisateur + @"
                        grant select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        grant select,update on operation_laboratoire to " + nom_utilisateur + @"
                        grant select on dossierpreconsultation to " + nom_utilisateur + @"
                        grant select on preconsultation to " + nom_utilisateur + @"
                        grant select on consultation to " + nom_utilisateur + @"
                        grant select on consultationgynecologique to " + nom_utilisateur + @"
                        grant select on tarifconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on critereresultat to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementoperation_laboratoire to " + nom_utilisateur + @"";

                        using (IDbCommand cmd3 = conn.CreateCommand())
                        {
                            cmd3.CommandText = string.Format(requete);
                            cmd3.Transaction = transaction;
                            cmd3.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 4)
                    {
                        #region Droit pour pharmacien
                        string requete = @"grant select,insert,update,delete on personne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fournisseur to " + nom_utilisateur + @"
                        grant select,insert,update,delete on article to " + nom_utilisateur + @"
                        grant select,insert,update,delete on livraison to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select,insert,update,delete on conditionnement to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fournisseur to " + nom_utilisateur + @"
                        grant select on malade to " + nom_utilisateur + @"
                        grant select on agent to " + nom_utilisateur + @"
                        grant select on service to " + nom_utilisateur + @"";

                        using (IDbCommand cmd4 = conn.CreateCommand())
                        {
                            cmd4.CommandText = string.Format(requete);
                            cmd4.Transaction = transaction;
                            cmd4.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 5)
                    {
                        #region Droit pour caissier
                        string requete = @"grant insert,update,delete on personne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on autrefraie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on detailsautrefraie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on article to " + nom_utilisateur + @"
                        grant select,insert,update,delete on operation_laboratoire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifconsultationpostnatal to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifconsultationprenatal to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifpreconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on intervention to " + nom_utilisateur + @"
                        grant select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        grant select,insert,update,delete on categoriechambre to " + nom_utilisateur + @"
                        grant select,insert,update,delete on typeaccouchement to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifechographie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifsoin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifnursing to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tarifavance to " + nom_utilisateur + @"
                        grant select,insert,update,delete on paiement to " + nom_utilisateur + @"
                        grant select,insert,update,delete on article_paye to " + nom_utilisateur + @"
                        grant select,insert,update,delete on facturation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on consultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierconsultationprenatale to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        grant select,insert,update,delete on operation_laboratoire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on subit to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossieraccouchement to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierechographie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossiersoin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossiernursing to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossieravance to " + nom_utilisateur + @"
                        grant select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on bloc to " + nom_utilisateur + @"
                        grant select,insert,update,delete on service to " + nom_utilisateur + @"
                        grant select,insert,update,delete on etablissementexterne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        grant select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on examen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on malade_avance to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on examengynecoobsetrical to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on consultationprenatal to " + nom_utilisateur + @"
                        grant select,insert,update,delete on consellingettestrapide to " + nom_utilisateur + @"
                        grant select,insert,update,delete on entecedentmedicauxobsetricaux to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        grant select,insert,update,delete on vaccination to " + nom_utilisateur + @"
                        grant select,insert,update,delete on vitamine to " + nom_utilisateur + @"
                        grant select,insert,update,delete on prise_vitamine to " + nom_utilisateur + @"
                        grant select,insert,update,delete on attention to " + nom_utilisateur + @"
                        grant select,insert,update,delete on attention_speciale to " + nom_utilisateur + @"
                        grant select,insert,update,delete on rendezvous to " + nom_utilisateur + @"
                        grant select,insert,update,delete on suivicroissance to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementmaladiegynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on tempAvance to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        grant select on aptitudephysique to " + nom_utilisateur + @"
                        grant select on province to " + nom_utilisateur + @"
                        grant select on districtville to " + nom_utilisateur + @"
                        grant select on territoirecommune to " + nom_utilisateur + @"
                        grant select on collectivitequartier to " + nom_utilisateur + @"
                        grant select on categoriemalade to " + nom_utilisateur + @"
                        grant select on profession to " + nom_utilisateur + @"
                        grant select on groupesanguin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on malade to " + nom_utilisateur + @"
                        grant select on categoriemalade to " + nom_utilisateur + @"
                        grant select on airsante to " + nom_utilisateur + @"";

                        using (IDbCommand cmd5 = conn.CreateCommand())
                        {
                            cmd5.CommandText = string.Format(requete);
                            cmd5.Transaction = transaction;
                            cmd5.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 6)
                    {
                        #region Droit pour medecin gynéco.
                        string requete = @"grant select,insert,update,delete on personne to " + nom_utilisateur + @"
                        grant select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on province to " + nom_utilisateur + @"
                        grant select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        grant select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        grant select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        grant select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on profession to " + nom_utilisateur + @"
                        grant select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        grant select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        grant select,insert,update,delete on malade to " + nom_utilisateur + @"
                        grant select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on allergie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on antecedentallergie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on antecedentmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"
                        grant select on consultation to " + nom_utilisateur + @"
                        grant select on mouvementconsultation to " + nom_utilisateur + @"
                        grant select on operation_laboratoire to " + nom_utilisateur + @"
                        grant select on critereresultat to " + nom_utilisateur + @"
                        grant select on examen to " + nom_utilisateur + @"
                        grant select on typeexamen to " + nom_utilisateur + @"
                        grant select on hospitalisation to " + nom_utilisateur + @"
                        grant select on mvmhospitalisation to " + nom_utilisateur + @"
                        grant select on chambre to " + nom_utilisateur + @"
                        grant select on categoriechambre to " + nom_utilisateur + @"
                        grant select on intervention to " + nom_utilisateur + @"
                        grant select on subit to " + nom_utilisateur + @"
                        grant select on bloc to " + nom_utilisateur + @"
                        grant select on criterechographie to " + nom_utilisateur + @"
                        grant select on consultationgynecologique to " + nom_utilisateur + @"
                        grant select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on article to " + nom_utilisateur + @"
                        grant select on service to " + nom_utilisateur + @"
                        grant select on autrefraie to " + nom_utilisateur + @"
                        grant select on etablissementexterne to " + nom_utilisateur + @"
                        grant select on detailsautrefraie to " + nom_utilisateur + @"
                        grant select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        grant select on consultationprenatal to " + nom_utilisateur + @"
                        grant select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        grant select on tarifechographie to " + nom_utilisateur + @"
                        grant select on dossierechographie to " + nom_utilisateur + @"
                        grant select on tarifsoin to " + nom_utilisateur + @"
                        grant select on dossiersoin to " + nom_utilisateur + @"
                        grant select on tarifnursing to " + nom_utilisateur + @"
                        grant select on dossiernursing to " + nom_utilisateur + @"
                        grant select on dossieraccouchement to " + nom_utilisateur + @"
                        grant select on typeaccouchement to " + nom_utilisateur + @"
                        grant select on tarifavance to " + nom_utilisateur + @"
                        grant select on dossieravance to " + nom_utilisateur + @"
                        grant select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        grant select on agent to " + nom_utilisateur + @"
                        grant select on tarifconsultation to " + nom_utilisateur + @"

                        grant select,insert,update,delete on examen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        grant select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        grant update on consultation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mvmhospitalisation to " + nom_utilisateur + @"
                        grant select,insert,update,delete on subit to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on maladiegynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on mouvementmaladiegynecologique to " + nom_utilisateur + @"

                        grant select,insert,update,delete on criterechographie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on consultationgynecologique to " + nom_utilisateur + @"
                        grant select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        grant select on tarifpreconsultation to " + nom_utilisateur + @"
                        grant select on sortie to " + nom_utilisateur + @"
                        grant select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        grant select on tarifconsultationprenatal to " + nom_utilisateur + @"
                        grant select on tarifechographie to " + nom_utilisateur + @"";

                        using (IDbCommand cmd6 = conn.CreateCommand())
                        {
                            cmd6.CommandText = string.Format(requete);
                            cmd6.Transaction = transaction;
                            cmd6.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 7)
                    {
                        #region Droit pour service
                        string requete = @"grant select,insert,update,delete on article to " + nom_utilisateur + @"
                        grant select,insert on sortie to " + nom_utilisateur + @"
                        grant select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        grant select on conditionnement to " + nom_utilisateur + @"
                        grant select on fournisseur to " + nom_utilisateur + @"
                        grant select on malade to " + nom_utilisateur + @"
                        grant select on agent to " + nom_utilisateur + @"
                        grant select on service to " + nom_utilisateur + @"";
                        using (IDbCommand cmd7 = conn.CreateCommand())
                        {
                            cmd7.CommandText = string.Format(requete);
                            cmd7.Transaction = transaction;
                            cmd7.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    if (droit == 1 || droit == 2 || droit == 3 || droit == 4 || droit == 5 || droit == 6 || droit == 7)
                    {
                        #region Droit pour tous les utilisateur excepté l'Administrateur qui en a tous
                        string requete = @"grant select on personne to public
                        grant select on agent to public
                        grant select on utilisateur to public
                        grant select on groupe to public
                        grant select on utilisateur_groupe to public";
                        using (IDbCommand cmd8 = conn.CreateCommand())
                        {
                            cmd8.CommandText = string.Format(requete);
                            cmd8.Transaction = transaction;
                            cmd8.ExecuteNonQuery();
                        }
                        #endregion
                    }
                }
                if (isAdmin) {}
                else
                {
                    transaction.Commit();
                    conn.Close();
                }
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec d'attribution des droits à l'utilisateur, veuillez réessayez ultérieurement, " + exc.Message);
                }
                conn.Close();
            }
        }

        public void revokePermission(List<int> permission, string nom_login, string nom_utilisateur)
        {
            IDbTransaction transaction = null;
            try
            {
                if (conn.State != ConnectionState.Open) conn.Open();
                transaction = conn.BeginTransaction(IsolationLevel.Serializable);
                //On tourne dans la boucle qui tournera tant qu'il ya encore un groupe dde permission à accordé
                foreach (int droit in permission)
                {
                    if (droit == 0)
                    {
                        //Droit pour administrateur
                        throw new Exception("Les droits de l'administrateur ne peuvent pas être retirés ici, reportez vous au moteur de SGBD");
                    }
                    else if (droit == 1)
                    {
                        #region Droit pour medecin
                        string requete = @"revoke select,insert,update,delete on personne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on province to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on profession to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on malade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladiegynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on allergie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on antecedentallergie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on antecedentmaladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"

                        revoke select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on consultation to " + nom_utilisateur + @"
                        revoke select on mouvementconsultation to " + nom_utilisateur + @"
                        revoke select on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select on critereresultat to " + nom_utilisateur + @"
                        revoke select on examen to " + nom_utilisateur + @"
                        revoke select on typeexamen to " + nom_utilisateur + @"
                        revoke select on hospitalisation to " + nom_utilisateur + @"
                        revoke select on mvmhospitalisation to " + nom_utilisateur + @"
                        revoke select on chambre to " + nom_utilisateur + @"
                        revoke select on categoriechambre to " + nom_utilisateur + @"
                        revoke select on intervention to " + nom_utilisateur + @"
                        revoke select on subit to " + nom_utilisateur + @"
                        revoke select on bloc to " + nom_utilisateur + @"
                        revoke select on criterechographie to " + nom_utilisateur + @"
                        revoke select on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on service to " + nom_utilisateur + @"
                        revoke select on autrefraie to " + nom_utilisateur + @"
                        revoke select on etablissementexterne to " + nom_utilisateur + @"
                        revoke select on detailsautrefraie to " + nom_utilisateur + @"
                        revoke select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        revoke select on consultationprenatal to " + nom_utilisateur + @"
                        revoke select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on tarifechographie to " + nom_utilisateur + @"
                        revoke select on dossierechographie to " + nom_utilisateur + @"
                        revoke select on tarifsoin to " + nom_utilisateur + @"
                        revoke select on dossiersoin to " + nom_utilisateur + @"
                        revoke select on tarifnursing to " + nom_utilisateur + @"
                        revoke select on dossiernursing to " + nom_utilisateur + @"
                        revoke select on dossieraccouchement to " + nom_utilisateur + @"
                        revoke select on typeaccouchement to " + nom_utilisateur + @"
                        revoke select on tarifavance to " + nom_utilisateur + @"
                        revoke select on dossieravance to " + nom_utilisateur + @"
                        revoke select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        revoke select on agent to " + nom_utilisateur + @"

                        revoke select,insert,update,delete on examen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        revoke select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        revoke select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        revoke update on consultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mvmhospitalisation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on subit to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        revoke select on tarifpreconsultation to " + nom_utilisateur + @"
                        revoke select on sortie to " + nom_utilisateur + @"
                        revoke select on tarifconsultation to " + nom_utilisateur + @"
                        revoke select on tarifconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on tarifconsultationprenatal to " + nom_utilisateur + @"
                        revoke select on tarifsoin to " + nom_utilisateur + @"
                        revoke select on tarifnursing to " + nom_utilisateur + @"";

                        using (IDbCommand cmd1 = conn.CreateCommand())
                        {
                            cmd1.CommandText = string.Format(requete);
                            cmd1.Transaction = transaction;
                            cmd1.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 2)
                    {
                        #region Droit pour infirmier
                        string requete = @"revoke select,insert,update,delete on personne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on province to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on profession to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on malade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on consultation to " + nom_utilisateur + @"
                        revoke select on mouvementconsultation to " + nom_utilisateur + @"
                        revoke select on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select on critereresultat to " + nom_utilisateur + @"
                        revoke select on examen to " + nom_utilisateur + @"
                        revoke select on typeexamen to " + nom_utilisateur + @"
                        revoke select on hospitalisation to " + nom_utilisateur + @"
                        revoke select on mvmhospitalisation to " + nom_utilisateur + @"
                        revoke select on chambre to " + nom_utilisateur + @"
                        revoke select on categoriechambre to " + nom_utilisateur + @"
                        revoke select on intervention to " + nom_utilisateur + @"
                        revoke select on subit to " + nom_utilisateur + @"
                        revoke select on bloc to " + nom_utilisateur + @"
                        revoke select on criterechographie to " + nom_utilisateur + @"
                        revoke select on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on service to " + nom_utilisateur + @"
                        revoke select on autrefraie to " + nom_utilisateur + @"
                        revoke select on etablissementexterne to " + nom_utilisateur + @"
                        revoke select on detailsautrefraie to " + nom_utilisateur + @"
                        revoke select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        revoke select on consultationprenatal to " + nom_utilisateur + @"
                        revoke select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on tarifechographie to " + nom_utilisateur + @"
                        revoke select on dossierechographie to " + nom_utilisateur + @"
                        revoke select on tarifsoin to " + nom_utilisateur + @"
                        revoke select on dossiersoin to " + nom_utilisateur + @"
                        revoke select on tarifnursing to " + nom_utilisateur + @"
                        revoke select on dossiernursing to " + nom_utilisateur + @"
                        revoke select on dossieraccouchement to " + nom_utilisateur + @"
                        revoke select on typeaccouchement to " + nom_utilisateur + @"
                        revoke select on tarifavance to " + nom_utilisateur + @"
                        revoke select on dossieravance to " + nom_utilisateur + @"
                        revoke select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        revoke select on airsante to " + nom_utilisateur + @"
                        revoke select on tarifpreconsultation to " + nom_utilisateur + @"
                        revoke select on sortie to " + nom_utilisateur + @"";

                        using (IDbCommand cmd2 = conn.CreateCommand())
                        {
                            cmd2.CommandText = string.Format(requete);
                            cmd2.Transaction = transaction;
                            cmd2.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 3)
                    {
                        #region Droit pour laborantin
                        string requete = @"revoke select on personne to " + nom_utilisateur + @"
                        revoke select on malade to " + nom_utilisateur + @"
                        revoke select on groupesanguin to " + nom_utilisateur + @"
                        revoke select on agent to " + nom_utilisateur + @"
                        revoke select on examen to " + nom_utilisateur + @"
                        revoke select on typeexamen to " + nom_utilisateur + @"
                        revoke select on categoriemalade to " + nom_utilisateur + @"
                        revoke select on etablissementpriseencharge to " + nom_utilisateur + @"
                        revoke select on mouvementconsultation to " + nom_utilisateur + @"
                        revoke select on mouvementmaladiegynecologique to " + nom_utilisateur + @"
                        revoke select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select,update on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select on dossierpreconsultation to " + nom_utilisateur + @"
                        revoke select on preconsultation to " + nom_utilisateur + @"
                        revoke select on consultation to " + nom_utilisateur + @"
                        revoke select on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select on tarifconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on critereresultat to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementoperation_laboratoire to " + nom_utilisateur + @"";

                        using (IDbCommand cmd3 = conn.CreateCommand())
                        {
                            cmd3.CommandText = string.Format(requete);
                            cmd3.Transaction = transaction;
                            cmd3.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 4)
                    {
                        #region Droit pour pharmacien
                        string requete = @"revoke select,insert,update,delete on personne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fournisseur to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on article to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on livraison to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on conditionnement to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fournisseur to " + nom_utilisateur + @"
                        revoke select on malade to " + nom_utilisateur + @"
                        revoke select on agent to " + nom_utilisateur + @"
                        revoke select on service to " + nom_utilisateur + @"";
                        using (IDbCommand cmd4 = conn.CreateCommand())
                        {
                            cmd4.CommandText = string.Format(requete);
                            cmd4.Transaction = transaction;
                            cmd4.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 5)
                    {
                        #region Droit pour caissier
                        string requete = @"revoke insert,update,delete on personne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on autrefraie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on detailsautrefraie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on article to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifconsultationprenatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifpreconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on intervention to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on categoriechambre to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on typeaccouchement to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifechographie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifsoin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifnursing to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tarifavance to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on paiement to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on article_paye to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on facturation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierconsultationprenatale to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on subit to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossieraccouchement to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierechographie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossiersoin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossiernursing to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossieravance to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on bloc to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on service to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on etablissementexterne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on examen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on malade_avance to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on examengynecoobsetrical to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultationprenatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultationprenatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consellingettestrapide to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on entecedentmedicauxobsetricaux to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on vaccination to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on vitamine to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on prise_vitamine to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on attention to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on attention_speciale to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on rendezvous to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on suivicroissance to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementmaladiegynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on tempAvance to " + nom_utilisateur + @"
                        revoke select on aptitudephysique to " + nom_utilisateur + @"
                        revoke select on province to " + nom_utilisateur + @"
                        revoke select on districtville to " + nom_utilisateur + @"
                        revoke select on territoirecommune to " + nom_utilisateur + @"
                        revoke select on collectivitequartier to " + nom_utilisateur + @"
                        revoke select on categoriemalade to " + nom_utilisateur + @"
                        revoke select on profession to " + nom_utilisateur + @"
                        revoke select on groupesanguin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on malade to " + nom_utilisateur + @"
                        revoke select on categoriemalade to " + nom_utilisateur + @"
                        revoke select on airsante to " + nom_utilisateur + @"";

                        using (IDbCommand cmd5 = conn.CreateCommand())
                        {
                            cmd5.CommandText = string.Format(requete);
                            cmd5.Transaction = transaction;
                            cmd5.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 6)
                    {
                        #region Droit pour medecin gynéco.
                        string requete = @"revoke select,insert,update,delete on personne to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on aptitudephysique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on province to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on districtville to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on territoirecommune to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on collectivitequartier to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on categoriemalade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on profession to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on etablissementpriseencharge to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on groupesanguin to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on malade to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on dossierpreconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on preconsultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladiegynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on antecedentallergie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on antecedentmaladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on fichesupplementaire to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on consultation to " + nom_utilisateur + @"
                        revoke select on mouvementconsultation to " + nom_utilisateur + @"
                        revoke select on operation_laboratoire to " + nom_utilisateur + @"
                        revoke select on critereresultat to " + nom_utilisateur + @"
                        revoke select on examen to " + nom_utilisateur + @"
                        revoke select on typeexamen to " + nom_utilisateur + @"
                        revoke select on hospitalisation to " + nom_utilisateur + @"
                        revoke select on mvmhospitalisation to " + nom_utilisateur + @"
                        revoke select on chambre to " + nom_utilisateur + @"
                        revoke select on categoriechambre to " + nom_utilisateur + @"
                        revoke select on intervention to " + nom_utilisateur + @"
                        revoke select on subit to " + nom_utilisateur + @"
                        revoke select on bloc to " + nom_utilisateur + @"
                        revoke select on criterechographie to " + nom_utilisateur + @"
                        revoke select on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on dossierconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on article to " + nom_utilisateur + @"
                        revoke select on service to " + nom_utilisateur + @"
                        revoke select on autrefraie to " + nom_utilisateur + @"
                        revoke select on etablissementexterne to " + nom_utilisateur + @"
                        revoke select on detailsautrefraie to " + nom_utilisateur + @"
                        revoke select on dossierconsultationprenatale to " + nom_utilisateur + @"
                        revoke select on consultationprenatal to " + nom_utilisateur + @"
                        revoke select on dossierconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on maladeenconsultationpostnatal to " + nom_utilisateur + @"
                        revoke select on tarifechographie to " + nom_utilisateur + @"
                        revoke select on dossierechographie to " + nom_utilisateur + @"
                        revoke select on tarifsoin to " + nom_utilisateur + @"
                        revoke select on dossiersoin to " + nom_utilisateur + @"
                        revoke select on tarifnursing to " + nom_utilisateur + @"
                        revoke select on dossiernursing to " + nom_utilisateur + @"
                        revoke select on dossieraccouchement to " + nom_utilisateur + @"
                        revoke select on typeaccouchement to " + nom_utilisateur + @"
                        revoke select on tarifavance to " + nom_utilisateur + @"
                        revoke select on dossieravance to " + nom_utilisateur + @"
                        revoke select on mouvementoperation_laboratoire to " + nom_utilisateur + @"
                        revoke select on agent to " + nom_utilisateur + @"
                        revoke select on tarifconsultation to " + nom_utilisateur + @"

                        revoke select,insert,update,delete on examen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on typeexamen to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on maladie to " + nom_utilisateur + @" 
                        revoke select,insert,update,delete on mouvementmaladie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementconsultation to " + nom_utilisateur + @"
                        revoke update on consultation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on hospitalisation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on chambre to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mvmhospitalisation to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on subit to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on mouvementmaladiegynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on allergie to " + nom_utilisateur + @"

                        revoke select,insert,update,delete on criterechographie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on consultationgynecologique to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on airsante to " + nom_utilisateur + @"
                        revoke select on tarifpreconsultation to " + nom_utilisateur + @"
                        revoke select on sortie to " + nom_utilisateur + @"
                        revoke select on tarifconsultationgynecologique to " + nom_utilisateur + @"
                        revoke select on tarifconsultationprenatal to " + nom_utilisateur + @"
                        revoke select on tarifechographie to " + nom_utilisateur + @"";

                        using (IDbCommand cmd6 = conn.CreateCommand())
                        {
                            cmd6.CommandText = string.Format(requete);
                            cmd6.Transaction = transaction;
                            cmd6.ExecuteNonQuery();
                        }
                        #endregion
                    }
                    else if (droit == 7)
                    {
                        #region Droit pour service
                        string requete = @"revoke select,insert,update,delete on article to " + nom_utilisateur + @"
                        revoke select,insert on sortie to " + nom_utilisateur + @"
                        revoke select,insert,update,delete on sortiecancel to " + nom_utilisateur + @"
                        revoke select on conditionnement to " + nom_utilisateur + @"
                        revoke select on fournisseur to " + nom_utilisateur + @"
                        revoke select on malade to " + nom_utilisateur + @"
                        revoke select on agent to " + nom_utilisateur + @"
                        revoke select on service to " + nom_utilisateur + @"";
                        using (IDbCommand cmd7 = conn.CreateCommand())
                        {
                            cmd7.CommandText = string.Format(requete);
                            cmd7.Transaction = transaction;
                            cmd7.ExecuteNonQuery();
                        }
                        #endregion
                    }
                }
                transaction.Commit();
                conn.Close();
            }
            catch (Exception exc)
            {
                if (transaction != null)
                {
                    transaction.Rollback();
                    throw new Exception("Echec d'attribution des droits à l'utilisateur, veuillez réessayez ultérieurement, " + exc.Message);
                }
                conn.Close();
            }
        }
        #endregion

    } //***fin class 
} //***fin namespace 
